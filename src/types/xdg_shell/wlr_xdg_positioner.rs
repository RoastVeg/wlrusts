use libc;
extern "C" {
    pub type wl_event_source;
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_backend;
    pub type wlr_output_impl;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_error(resource: *mut wl_resource, code: uint32_t,
                              msg: *const libc::c_char, _: ...);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    /* *
 * @page page_iface_xdg_positioner xdg_positioner
 * @section page_iface_xdg_positioner_desc Description
 *
 * The xdg_positioner provides a collection of rules for the placement of a
 * child surface relative to a parent surface. Rules can be defined to ensure
 * the child surface remains within the visible area's borders, and to
 * specify how the child surface changes its position, such as sliding along
 * an axis, or flipping around a rectangle. These positioner-created rules are
 * constrained by the requirement that a child surface must intersect with or
 * be at least partially adjacent to its parent surface.
 *
 * See the various requests for details about possible rules.
 *
 * At the time of the request, the compositor makes a copy of the rules
 * specified by the xdg_positioner. Thus, after the request is complete the
 * xdg_positioner object can be destroyed or reused; further changes to the
 * object will have no effect on previous usages.
 *
 * For an xdg_positioner object to be considered complete, it must have a
 * non-zero size set by set_size, and a non-zero anchor rectangle set by
 * set_anchor_rect. Passing an incomplete xdg_positioner object when
 * positioning a surface raises an error.
 * @section page_iface_xdg_positioner_api API
 * See @ref iface_xdg_positioner.
 */
/* *
 * @defgroup iface_xdg_positioner The xdg_positioner interface
 *
 * The xdg_positioner provides a collection of rules for the placement of a
 * child surface relative to a parent surface. Rules can be defined to ensure
 * the child surface remains within the visible area's borders, and to
 * specify how the child surface changes its position, such as sliding along
 * an axis, or flipping around a rectangle. These positioner-created rules are
 * constrained by the requirement that a child surface must intersect with or
 * be at least partially adjacent to its parent surface.
 *
 * See the various requests for details about possible rules.
 *
 * At the time of the request, the compositor makes a copy of the rules
 * specified by the xdg_positioner. Thus, after the request is complete the
 * xdg_positioner object can be destroyed or reused; further changes to the
 * object will have no effect on previous usages.
 *
 * For an xdg_positioner object to be considered complete, it must have a
 * non-zero size set by set_size, and a non-zero anchor rectangle set by
 * set_anchor_rect. Passing an incomplete xdg_positioner object when
 * positioning a surface raises an error.
 */
    #[no_mangle]
    static xdg_positioner_interface: wl_interface;
    #[no_mangle]
    fn schedule_xdg_surface_configure(surface: *mut wlr_xdg_surface)
     -> uint32_t;
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
pub type wl_output_subpixel = libc::c_uint;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_BGR: wl_output_subpixel = 5;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_RGB: wl_output_subpixel = 4;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR: wl_output_subpixel = 3;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB: wl_output_subpixel = 2;
pub const WL_OUTPUT_SUBPIXEL_NONE: wl_output_subpixel = 1;
pub const WL_OUTPUT_SUBPIXEL_UNKNOWN: wl_output_subpixel = 0;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_box {
    pub x: libc::c_int,
    pub y: libc::c_int,
    pub width: libc::c_int,
    pub height: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_0,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output_mode {
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub preferred: bool,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output_cursor {
    pub output: *mut wlr_output,
    pub x: libc::c_double,
    pub y: libc::c_double,
    pub enabled: bool,
    pub visible: bool,
    pub width: uint32_t,
    pub height: uint32_t,
    pub hotspot_x: int32_t,
    pub hotspot_y: int32_t,
    pub link: wl_list,
    pub texture: *mut wlr_texture,
    pub surface: *mut wlr_surface,
    pub surface_commit: wl_listener,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_1,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_2,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
/* *
 * A compositor output region. This typically corresponds to a monitor that
 * displays part of the compositor space.
 *
 * The `frame` event will be emitted when it is a good time for the compositor
 * to submit a new frame.
 *
 * To render a new frame, compositors should call `wlr_output_attach_render`,
 * render and call `wlr_output_commit`. No rendering should happen outside a
 * `frame` event handler or before `wlr_output_attach_render`.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output {
    pub impl_0: *const wlr_output_impl,
    pub backend: *mut wlr_backend,
    pub display: *mut wl_display,
    pub global: *mut wl_global,
    pub resources: wl_list,
    pub name: [libc::c_char; 24],
    pub make: [libc::c_char; 56],
    pub model: [libc::c_char; 16],
    pub serial: [libc::c_char; 16],
    pub phys_width: int32_t,
    pub phys_height: int32_t,
    pub modes: wl_list,
    pub current_mode: *mut wlr_output_mode,
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub enabled: bool,
    pub scale: libc::c_float,
    pub subpixel: wl_output_subpixel,
    pub transform: wl_output_transform,
    pub needs_frame: bool,
    pub damage: pixman_region32_t,
    pub frame_pending: bool,
    pub transform_matrix: [libc::c_float; 9],
    pub pending: wlr_output_state,
    pub commit_seq: uint32_t,
    pub events: C2RustUnnamed_3,
    pub idle_frame: *mut wl_event_source,
    pub idle_done: *mut wl_event_source,
    pub attach_render_locks: libc::c_int,
    pub cursors: wl_list,
    pub hardware_cursor: *mut wlr_output_cursor,
    pub software_cursor_locks: libc::c_int,
    pub display_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub frame: wl_signal,
    pub needs_frame: wl_signal,
    pub precommit: wl_signal,
    pub commit: wl_signal,
    pub present: wl_signal,
    pub enable: wl_signal,
    pub mode: wl_signal,
    pub scale: wl_signal,
    pub transform: wl_signal,
    pub destroy: wl_signal,
}
/* *
 * Holds the double-buffered output state.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output_state {
    pub committed: uint32_t,
    pub damage: pixman_region32_t,
    pub buffer_type: wlr_output_state_buffer_type,
    pub buffer: *mut wlr_buffer,
    // if WLR_OUTPUT_STATE_BUFFER_SCANOUT
}
pub type wlr_output_state_buffer_type = libc::c_uint;
pub const WLR_OUTPUT_STATE_BUFFER_SCANOUT: wlr_output_state_buffer_type = 1;
pub const WLR_OUTPUT_STATE_BUFFER_RENDER: wlr_output_state_buffer_type = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
/* *
 * Contains state for a single client's bound wl_seat resource and can be used
 * to issue input events to that client. The lifetime of these objects is
 * managed by wlr_seat; some may be NULL.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_4,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_5,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
// XXX this will conflict with the actual touch cancel which is different so
	// we need to rename this
/* *
 * Passed to `wlr_seat_touch_start_grab()` to start a grab of the touch device.
 * The grabber is responsible for handling touch events for the seat.
 */
/* *
 * Passed to `wlr_seat_keyboard_start_grab()` to start a grab of the keyboard.
 * The grabber is responsible for handling keyboard events for the seat.
 */
/* *
 * Passed to `wlr_seat_pointer_start_grab()` to start a grab of the pointer. The
 * grabber is responsible for handling pointer events for the seat.
 */
// wlr_seat_pointer_focus_change_event
// TODO: May be useful to be able to simulate keyboard input events
// wlr_seat_keyboard_focus_change_event
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_6,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_7,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_8,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
pub type xdg_positioner_error = libc::c_uint;
/* *
	 * invalid input provided
	 */
pub const XDG_POSITIONER_ERROR_INVALID_INPUT: xdg_positioner_error = 0;
/* XDG_POSITIONER_ERROR_ENUM */
pub type xdg_positioner_anchor = libc::c_uint;
pub const XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT: xdg_positioner_anchor = 8;
pub const XDG_POSITIONER_ANCHOR_TOP_RIGHT: xdg_positioner_anchor = 7;
pub const XDG_POSITIONER_ANCHOR_BOTTOM_LEFT: xdg_positioner_anchor = 6;
pub const XDG_POSITIONER_ANCHOR_TOP_LEFT: xdg_positioner_anchor = 5;
pub const XDG_POSITIONER_ANCHOR_RIGHT: xdg_positioner_anchor = 4;
pub const XDG_POSITIONER_ANCHOR_LEFT: xdg_positioner_anchor = 3;
pub const XDG_POSITIONER_ANCHOR_BOTTOM: xdg_positioner_anchor = 2;
pub const XDG_POSITIONER_ANCHOR_TOP: xdg_positioner_anchor = 1;
pub const XDG_POSITIONER_ANCHOR_NONE: xdg_positioner_anchor = 0;
/* XDG_POSITIONER_ANCHOR_ENUM */
pub type xdg_positioner_gravity = libc::c_uint;
pub const XDG_POSITIONER_GRAVITY_BOTTOM_RIGHT: xdg_positioner_gravity = 8;
pub const XDG_POSITIONER_GRAVITY_TOP_RIGHT: xdg_positioner_gravity = 7;
pub const XDG_POSITIONER_GRAVITY_BOTTOM_LEFT: xdg_positioner_gravity = 6;
pub const XDG_POSITIONER_GRAVITY_TOP_LEFT: xdg_positioner_gravity = 5;
pub const XDG_POSITIONER_GRAVITY_RIGHT: xdg_positioner_gravity = 4;
pub const XDG_POSITIONER_GRAVITY_LEFT: xdg_positioner_gravity = 3;
pub const XDG_POSITIONER_GRAVITY_BOTTOM: xdg_positioner_gravity = 2;
pub const XDG_POSITIONER_GRAVITY_TOP: xdg_positioner_gravity = 1;
pub const XDG_POSITIONER_GRAVITY_NONE: xdg_positioner_gravity = 0;
/* XDG_POSITIONER_GRAVITY_ENUM */
/* *
 * @ingroup iface_xdg_positioner
 * vertically resize the surface
 *
 * Resize the surface vertically so that it is completely unconstrained.
 */
pub type xdg_positioner_constraint_adjustment = libc::c_uint;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_Y:
          xdg_positioner_constraint_adjustment =
    32;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_X:
          xdg_positioner_constraint_adjustment =
    16;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_Y:
          xdg_positioner_constraint_adjustment =
    8;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_X:
          xdg_positioner_constraint_adjustment =
    4;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_Y:
          xdg_positioner_constraint_adjustment =
    2;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_X:
          xdg_positioner_constraint_adjustment =
    1;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_NONE:
          xdg_positioner_constraint_adjustment =
    0;
/* XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_ENUM */
/* *
 * @ingroup iface_xdg_positioner
 * @struct xdg_positioner_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct xdg_positioner_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub set_size: Option<unsafe extern "C" fn(_: *mut wl_client,
                                              _: *mut wl_resource, _: int32_t,
                                              _: int32_t) -> ()>,
    pub set_anchor_rect: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                     _: *mut wl_resource,
                                                     _: int32_t, _: int32_t,
                                                     _: int32_t, _: int32_t)
                                    -> ()>,
    pub set_anchor: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                _: *mut wl_resource,
                                                _: uint32_t) -> ()>,
    pub set_gravity: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                 _: *mut wl_resource,
                                                 _: uint32_t) -> ()>,
    pub set_constraint_adjustment: Option<unsafe extern "C" fn(_:
                                                                   *mut wl_client,
                                                               _:
                                                                   *mut wl_resource,
                                                               _: uint32_t)
                                              -> ()>,
    pub set_offset: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                _: *mut wl_resource,
                                                _: int32_t, _: int32_t)
                               -> ()>,
}
/* *
 * @ingroup iface_xdg_positioner
 */
/* *
 * @ingroup iface_xdg_positioner
 */
/* *
 * @ingroup iface_xdg_positioner
 */
/* *
 * @ingroup iface_xdg_positioner
 */
/* *
 * @ingroup iface_xdg_positioner
 */
/* *
 * @ingroup iface_xdg_positioner
 */
/* *
 * @ingroup iface_xdg_positioner
 */
pub type xdg_surface_error = libc::c_uint;
pub const XDG_SURFACE_ERROR_UNCONFIGURED_BUFFER: xdg_surface_error = 3;
pub const XDG_SURFACE_ERROR_ALREADY_CONSTRUCTED: xdg_surface_error = 2;
pub const XDG_SURFACE_ERROR_NOT_CONSTRUCTED: xdg_surface_error = 1;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_shell {
    pub global: *mut wl_global,
    pub clients: wl_list,
    pub popup_grabs: wl_list,
    pub ping_timeout: uint32_t,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_9,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub new_surface: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_client {
    pub shell: *mut wlr_xdg_shell,
    pub resource: *mut wl_resource,
    pub client: *mut wl_client,
    pub surfaces: wl_list,
    pub link: wl_list,
    pub ping_serial: uint32_t,
    pub ping_timer: *mut wl_event_source,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_positioner {
    pub resource: *mut wl_resource,
    pub anchor_rect: wlr_box,
    pub anchor: xdg_positioner_anchor,
    pub gravity: xdg_positioner_gravity,
    pub constraint_adjustment: xdg_positioner_constraint_adjustment,
    pub size: C2RustUnnamed_11,
    pub offset: C2RustUnnamed_10,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub x: int32_t,
    pub y: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub width: int32_t,
    pub height: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_popup {
    pub base: *mut wlr_xdg_surface,
    pub link: wl_list,
    pub resource: *mut wl_resource,
    pub committed: bool,
    pub parent: *mut wlr_surface,
    pub seat: *mut wlr_seat,
    pub geometry: wlr_box,
    pub positioner: wlr_xdg_positioner,
    pub grab_link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_surface {
    pub client: *mut wlr_xdg_client,
    pub resource: *mut wl_resource,
    pub surface: *mut wlr_surface,
    pub link: wl_list,
    pub role: wlr_xdg_surface_role,
    pub c2rust_unnamed: C2RustUnnamed_13,
    pub popups: wl_list,
    pub added: bool,
    pub configured: bool,
    pub mapped: bool,
    pub configure_serial: uint32_t,
    pub configure_idle: *mut wl_event_source,
    pub configure_next_serial: uint32_t,
    pub configure_list: wl_list,
    pub has_next_geometry: bool,
    pub next_geometry: wlr_box,
    pub geometry: wlr_box,
    pub surface_destroy: wl_listener,
    pub surface_commit: wl_listener,
    pub events: C2RustUnnamed_12,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub destroy: wl_signal,
    pub ping_timeout: wl_signal,
    pub new_popup: wl_signal,
    pub map: wl_signal,
    pub unmap: wl_signal,
    pub configure: wl_signal,
    pub ack_configure: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr ( C )]
pub union C2RustUnnamed_13 {
    pub toplevel: *mut wlr_xdg_toplevel,
    pub popup: *mut wlr_xdg_popup,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_toplevel {
    pub resource: *mut wl_resource,
    pub base: *mut wlr_xdg_surface,
    pub added: bool,
    pub parent: *mut wlr_xdg_surface,
    pub parent_unmap: wl_listener,
    pub client_pending: wlr_xdg_toplevel_state,
    pub server_pending: wlr_xdg_toplevel_state,
    pub current: wlr_xdg_toplevel_state,
    pub title: *mut libc::c_char,
    pub app_id: *mut libc::c_char,
    pub events: C2RustUnnamed_14,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_14 {
    pub request_maximize: wl_signal,
    pub request_fullscreen: wl_signal,
    pub request_minimize: wl_signal,
    pub request_move: wl_signal,
    pub request_resize: wl_signal,
    pub request_show_window_menu: wl_signal,
    pub set_parent: wl_signal,
    pub set_title: wl_signal,
    pub set_app_id: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_toplevel_state {
    pub maximized: bool,
    pub fullscreen: bool,
    pub resizing: bool,
    pub activated: bool,
    pub tiled: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub max_width: uint32_t,
    pub max_height: uint32_t,
    pub min_width: uint32_t,
    pub min_height: uint32_t,
    pub fullscreen_output: *mut wlr_output,
    pub fullscreen_output_destroy: wl_listener,
}
pub type wlr_xdg_surface_role = libc::c_uint;
pub const WLR_XDG_SURFACE_ROLE_POPUP: wlr_xdg_surface_role = 2;
pub const WLR_XDG_SURFACE_ROLE_TOPLEVEL: wlr_xdg_surface_role = 1;
pub const WLR_XDG_SURFACE_ROLE_NONE: wlr_xdg_surface_role = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_positioner_resource {
    pub resource: *mut wl_resource,
    pub attrs: wlr_xdg_positioner,
}
#[no_mangle]
pub unsafe extern "C" fn get_xdg_positioner_from_resource(mut resource:
                                                              *mut wl_resource)
 -> *mut wlr_xdg_positioner_resource {
    if wl_resource_instance_of(resource, &xdg_positioner_interface,
                               &xdg_positioner_implementation as
                                   *const xdg_positioner_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &xdg_positioner_interface, &xdg_positioner_implementation)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/xdg_shell/wlr_xdg_positioner.c\x00" as
                          *const u8 as *const libc::c_char,
                      10i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 91],
                                                &[libc::c_char; 91]>(b"struct wlr_xdg_positioner_resource *get_xdg_positioner_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_xdg_positioner_resource;
}
unsafe extern "C" fn xdg_positioner_handle_set_size(mut client:
                                                        *mut wl_client,
                                                    mut resource:
                                                        *mut wl_resource,
                                                    mut width: int32_t,
                                                    mut height: int32_t) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        get_xdg_positioner_from_resource(resource);
    if width < 1i32 || height < 1i32 {
        wl_resource_post_error(resource,
                               XDG_POSITIONER_ERROR_INVALID_INPUT as
                                   libc::c_int as uint32_t,
                               b"width and height must be positive and non-zero\x00"
                                   as *const u8 as *const libc::c_char);
        return
    }
    (*positioner).attrs.size.width = width;
    (*positioner).attrs.size.height = height;
}
unsafe extern "C" fn xdg_positioner_handle_set_anchor_rect(mut client:
                                                               *mut wl_client,
                                                           mut resource:
                                                               *mut wl_resource,
                                                           mut x: int32_t,
                                                           mut y: int32_t,
                                                           mut width: int32_t,
                                                           mut height:
                                                               int32_t) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        get_xdg_positioner_from_resource(resource);
    if width < 0i32 || height < 0i32 {
        wl_resource_post_error(resource,
                               XDG_POSITIONER_ERROR_INVALID_INPUT as
                                   libc::c_int as uint32_t,
                               b"width and height must be positive\x00" as
                                   *const u8 as *const libc::c_char);
        return
    }
    (*positioner).attrs.anchor_rect.x = x;
    (*positioner).attrs.anchor_rect.y = y;
    (*positioner).attrs.anchor_rect.width = width;
    (*positioner).attrs.anchor_rect.height = height;
}
unsafe extern "C" fn xdg_positioner_handle_set_anchor(mut client:
                                                          *mut wl_client,
                                                      mut resource:
                                                          *mut wl_resource,
                                                      mut anchor: uint32_t) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        get_xdg_positioner_from_resource(resource);
    if anchor >
           XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT as libc::c_int as libc::c_uint {
        wl_resource_post_error(resource,
                               XDG_POSITIONER_ERROR_INVALID_INPUT as
                                   libc::c_int as uint32_t,
                               b"invalid anchor value\x00" as *const u8 as
                                   *const libc::c_char);
        return
    }
    (*positioner).attrs.anchor = anchor as xdg_positioner_anchor;
}
unsafe extern "C" fn xdg_positioner_handle_set_gravity(mut client:
                                                           *mut wl_client,
                                                       mut resource:
                                                           *mut wl_resource,
                                                       mut gravity:
                                                           uint32_t) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        get_xdg_positioner_from_resource(resource);
    if gravity >
           XDG_POSITIONER_GRAVITY_BOTTOM_RIGHT as libc::c_int as libc::c_uint
       {
        wl_resource_post_error(resource,
                               XDG_POSITIONER_ERROR_INVALID_INPUT as
                                   libc::c_int as uint32_t,
                               b"invalid gravity value\x00" as *const u8 as
                                   *const libc::c_char);
        return
    }
    (*positioner).attrs.gravity = gravity as xdg_positioner_gravity;
}
unsafe extern "C" fn xdg_positioner_handle_set_constraint_adjustment(mut client:
                                                                         *mut wl_client,
                                                                     mut resource:
                                                                         *mut wl_resource,
                                                                     mut constraint_adjustment:
                                                                         uint32_t) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        get_xdg_positioner_from_resource(resource);
    (*positioner).attrs.constraint_adjustment =
        constraint_adjustment as xdg_positioner_constraint_adjustment;
}
unsafe extern "C" fn xdg_positioner_handle_set_offset(mut client:
                                                          *mut wl_client,
                                                      mut resource:
                                                          *mut wl_resource,
                                                      mut x: int32_t,
                                                      mut y: int32_t) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        get_xdg_positioner_from_resource(resource);
    (*positioner).attrs.offset.x = x;
    (*positioner).attrs.offset.y = y;
}
unsafe extern "C" fn xdg_positioner_handle_destroy(mut client: *mut wl_client,
                                                   mut resource:
                                                       *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut xdg_positioner_implementation: xdg_positioner_interface =
    unsafe {
        {
            let mut init =
                xdg_positioner_interface{destroy:
                                             Some(xdg_positioner_handle_destroy
                                                      as
                                                      unsafe extern "C" fn(_:
                                                                               *mut wl_client,
                                                                           _:
                                                                               *mut wl_resource)
                                                          -> ()),
                                         set_size:
                                             Some(xdg_positioner_handle_set_size
                                                      as
                                                      unsafe extern "C" fn(_:
                                                                               *mut wl_client,
                                                                           _:
                                                                               *mut wl_resource,
                                                                           _:
                                                                               int32_t,
                                                                           _:
                                                                               int32_t)
                                                          -> ()),
                                         set_anchor_rect:
                                             Some(xdg_positioner_handle_set_anchor_rect
                                                      as
                                                      unsafe extern "C" fn(_:
                                                                               *mut wl_client,
                                                                           _:
                                                                               *mut wl_resource,
                                                                           _:
                                                                               int32_t,
                                                                           _:
                                                                               int32_t,
                                                                           _:
                                                                               int32_t,
                                                                           _:
                                                                               int32_t)
                                                          -> ()),
                                         set_anchor:
                                             Some(xdg_positioner_handle_set_anchor
                                                      as
                                                      unsafe extern "C" fn(_:
                                                                               *mut wl_client,
                                                                           _:
                                                                               *mut wl_resource,
                                                                           _:
                                                                               uint32_t)
                                                          -> ()),
                                         set_gravity:
                                             Some(xdg_positioner_handle_set_gravity
                                                      as
                                                      unsafe extern "C" fn(_:
                                                                               *mut wl_client,
                                                                           _:
                                                                               *mut wl_resource,
                                                                           _:
                                                                               uint32_t)
                                                          -> ()),
                                         set_constraint_adjustment:
                                             Some(xdg_positioner_handle_set_constraint_adjustment
                                                      as
                                                      unsafe extern "C" fn(_:
                                                                               *mut wl_client,
                                                                           _:
                                                                               *mut wl_resource,
                                                                           _:
                                                                               uint32_t)
                                                          -> ()),
                                         set_offset:
                                             Some(xdg_positioner_handle_set_offset
                                                      as
                                                      unsafe extern "C" fn(_:
                                                                               *mut wl_client,
                                                                           _:
                                                                               *mut wl_resource,
                                                                           _:
                                                                               int32_t,
                                                                           _:
                                                                               int32_t)
                                                          -> ()),};
            init
        }
    };
unsafe extern "C" fn xdg_positioner_handle_resource_destroy(mut resource:
                                                                *mut wl_resource) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        get_xdg_positioner_from_resource(resource);
    free(positioner as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn create_xdg_positioner(mut client:
                                                   *mut wlr_xdg_client,
                                               mut id: uint32_t) {
    let mut positioner: *mut wlr_xdg_positioner_resource =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_xdg_positioner_resource>() as
                   libc::c_ulong) as *mut wlr_xdg_positioner_resource;
    if positioner.is_null() {
        wl_client_post_no_memory((*client).client);
        return
    }
    (*positioner).resource =
        wl_resource_create((*client).client, &xdg_positioner_interface,
                           wl_resource_get_version((*client).resource), id);
    if (*positioner).resource.is_null() {
        free(positioner as *mut libc::c_void);
        wl_client_post_no_memory((*client).client);
        return
    }
    wl_resource_set_implementation((*positioner).resource,
                                   &xdg_positioner_implementation as
                                       *const xdg_positioner_interface as
                                       *const libc::c_void,
                                   positioner as *mut libc::c_void,
                                   Some(xdg_positioner_handle_resource_destroy
                                            as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
}
#[no_mangle]
pub unsafe extern "C" fn handle_xdg_surface_popup_committed(mut surface:
                                                                *mut wlr_xdg_surface) {
    if (*surface).role as libc::c_uint ==
           WLR_XDG_SURFACE_ROLE_POPUP as libc::c_int as libc::c_uint {
    } else {
        __assert_fail(b"surface->role == WLR_XDG_SURFACE_ROLE_POPUP\x00" as
                          *const u8 as *const libc::c_char,
                      b"../types/xdg_shell/wlr_xdg_positioner.c\x00" as
                          *const u8 as *const libc::c_char,
                      144i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 66],
                                                &[libc::c_char; 66]>(b"void handle_xdg_surface_popup_committed(struct wlr_xdg_surface *)\x00")).as_ptr());
    };
    if (*(*surface).c2rust_unnamed.popup).parent.is_null() {
        wl_resource_post_error((*surface).resource,
                               XDG_SURFACE_ERROR_NOT_CONSTRUCTED as
                                   libc::c_int as uint32_t,
                               b"xdg_popup has no parent\x00" as *const u8 as
                                   *const libc::c_char);
        return
    }
    if !(*(*surface).c2rust_unnamed.popup).committed {
        schedule_xdg_surface_configure(surface);
        (*(*surface).c2rust_unnamed.popup).committed = 1i32 != 0
    };
}
unsafe extern "C" fn positioner_anchor_has_edge(mut anchor:
                                                    xdg_positioner_anchor,
                                                mut edge:
                                                    xdg_positioner_anchor)
 -> bool {
    match edge as libc::c_uint {
        1 => {
            return anchor as libc::c_uint ==
                       XDG_POSITIONER_ANCHOR_TOP as libc::c_int as
                           libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_TOP_LEFT as libc::c_int as
                               libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_TOP_RIGHT as libc::c_int as
                               libc::c_uint
            // not reached
        }
        2 => {
            return anchor as libc::c_uint ==
                       XDG_POSITIONER_ANCHOR_BOTTOM as libc::c_int as
                           libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_BOTTOM_LEFT as libc::c_int as
                               libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT as libc::c_int
                               as libc::c_uint
        }
        3 => {
            return anchor as libc::c_uint ==
                       XDG_POSITIONER_ANCHOR_LEFT as libc::c_int as
                           libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_TOP_LEFT as libc::c_int as
                               libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_BOTTOM_LEFT as libc::c_int as
                               libc::c_uint
        }
        4 => {
            return anchor as libc::c_uint ==
                       XDG_POSITIONER_ANCHOR_RIGHT as libc::c_int as
                           libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_TOP_RIGHT as libc::c_int as
                               libc::c_uint ||
                       anchor as libc::c_uint ==
                           XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT as libc::c_int
                               as libc::c_uint
        }
        _ => {
            if 0i32 != 0 {
            } else {
                __assert_fail(b"false\x00" as *const u8 as
                                  *const libc::c_char,
                              b"../types/xdg_shell/wlr_xdg_positioner.c\x00"
                                  as *const u8 as *const libc::c_char,
                              179i32 as libc::c_uint,
                              (*::std::mem::transmute::<&[u8; 89],
                                                        &[libc::c_char; 89]>(b"_Bool positioner_anchor_has_edge(enum xdg_positioner_anchor, enum xdg_positioner_anchor)\x00")).as_ptr());
            };
        }
    }
    panic!("Reached end of non-void function without returning");
}
unsafe extern "C" fn positioner_gravity_has_edge(mut gravity:
                                                     xdg_positioner_gravity,
                                                 mut edge:
                                                     xdg_positioner_gravity)
 -> bool {
    // gravity and edge enums are the same
    return positioner_anchor_has_edge(gravity as xdg_positioner_anchor,
                                      edge as xdg_positioner_anchor);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_xdg_positioner_get_geometry(mut positioner:
                                                             *mut wlr_xdg_positioner)
 -> wlr_box {
    let mut geometry: wlr_box =
        {
            let mut init =
                wlr_box{x: (*positioner).offset.x,
                        y: (*positioner).offset.y,
                        width: (*positioner).size.width,
                        height: (*positioner).size.height,};
            init
        };
    if positioner_anchor_has_edge((*positioner).anchor,
                                  XDG_POSITIONER_ANCHOR_TOP) {
        geometry.y += (*positioner).anchor_rect.y
    } else if positioner_anchor_has_edge((*positioner).anchor,
                                         XDG_POSITIONER_ANCHOR_BOTTOM) {
        geometry.y +=
            (*positioner).anchor_rect.y + (*positioner).anchor_rect.height
    } else {
        geometry.y +=
            (*positioner).anchor_rect.y +
                (*positioner).anchor_rect.height / 2i32
    }
    if positioner_anchor_has_edge((*positioner).anchor,
                                  XDG_POSITIONER_ANCHOR_LEFT) {
        geometry.x += (*positioner).anchor_rect.x
    } else if positioner_anchor_has_edge((*positioner).anchor,
                                         XDG_POSITIONER_ANCHOR_RIGHT) {
        geometry.x +=
            (*positioner).anchor_rect.x + (*positioner).anchor_rect.width
    } else {
        geometry.x +=
            (*positioner).anchor_rect.x +
                (*positioner).anchor_rect.width / 2i32
    }
    if positioner_gravity_has_edge((*positioner).gravity,
                                   XDG_POSITIONER_GRAVITY_TOP) {
        geometry.y -= geometry.height
    } else if !positioner_gravity_has_edge((*positioner).gravity,
                                           XDG_POSITIONER_GRAVITY_BOTTOM) {
        geometry.y -= geometry.height / 2i32
    }
    if positioner_gravity_has_edge((*positioner).gravity,
                                   XDG_POSITIONER_GRAVITY_LEFT) {
        geometry.x -= geometry.width
    } else if !positioner_gravity_has_edge((*positioner).gravity,
                                           XDG_POSITIONER_GRAVITY_RIGHT) {
        geometry.x -= geometry.width / 2i32
    }
    if (*positioner).constraint_adjustment as libc::c_uint ==
           XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_NONE as libc::c_int as
               libc::c_uint {
        return geometry
    }
    return geometry;
}
unsafe extern "C" fn positioner_anchor_invert_x(mut anchor:
                                                    xdg_positioner_anchor)
 -> xdg_positioner_anchor {
    match anchor as libc::c_uint {
        3 => { return XDG_POSITIONER_ANCHOR_RIGHT }
        4 => { return XDG_POSITIONER_ANCHOR_LEFT }
        5 => { return XDG_POSITIONER_ANCHOR_TOP_RIGHT }
        7 => { return XDG_POSITIONER_ANCHOR_TOP_LEFT }
        6 => { return XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT }
        8 => { return XDG_POSITIONER_ANCHOR_BOTTOM_LEFT }
        _ => { return anchor }
    };
}
unsafe extern "C" fn positioner_gravity_invert_x(mut gravity:
                                                     xdg_positioner_gravity)
 -> xdg_positioner_gravity {
    // gravity and edge enums are the same
    return positioner_anchor_invert_x(gravity as xdg_positioner_anchor) as
               xdg_positioner_gravity;
}
unsafe extern "C" fn positioner_anchor_invert_y(mut anchor:
                                                    xdg_positioner_anchor)
 -> xdg_positioner_anchor {
    match anchor as libc::c_uint {
        1 => { return XDG_POSITIONER_ANCHOR_BOTTOM }
        2 => { return XDG_POSITIONER_ANCHOR_TOP }
        5 => { return XDG_POSITIONER_ANCHOR_BOTTOM_LEFT }
        6 => { return XDG_POSITIONER_ANCHOR_TOP_LEFT }
        8 => { return XDG_POSITIONER_ANCHOR_TOP_RIGHT }
        _ => { return anchor }
    };
}
unsafe extern "C" fn positioner_gravity_invert_y(mut gravity:
                                                     xdg_positioner_gravity)
 -> xdg_positioner_gravity {
    // gravity and edge enums are the same
    return positioner_anchor_invert_y(gravity as xdg_positioner_anchor) as
               xdg_positioner_gravity;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_positioner_invert_x(mut positioner:
                                                     *mut wlr_xdg_positioner) {
    (*positioner).anchor = positioner_anchor_invert_x((*positioner).anchor);
    (*positioner).gravity =
        positioner_gravity_invert_x((*positioner).gravity);
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
		 * The `new_surface` event signals that a client has requested to
		 * create a new shell surface. At this point, the surface is ready to
		 * be configured but is not mapped or ready receive input events. The
		 * surface will be ready to be managed on the `map` event.
		 */
// wlr_xdg_shell::clients
// Position of the popup relative to the upper left corner of the window
	// geometry of the parent surface
// wlr_xdg_popup_grab::popups
// each seat gets a popup grab
// wlr_xdg_shell::popup_grabs
// enum wlr_edges
// Since the fullscreen request may be made before the toplevel's surface
	// is mapped, this is used to store the requested fullscreen output (if
	// any) for wlr_xdg_toplevel::client_pending.
// wlr_xdg_surface::configure_list
/* *
 * An xdg-surface is a user interface element requiring management by the
 * compositor. An xdg-surface alone isn't useful, a role should be assigned to
 * it in order to map it.
 *
 * When a surface has a role and is ready to be displayed, the `map` event is
 * emitted. When a surface should no longer be displayed, the `unmap` event is
 * emitted. The `unmap` event is guaranteed to be emitted before the `destroy`
 * event if the view is destroyed when mapped.
 */
// wlr_xdg_client::surfaces
// wlr_xdg_popup::link
/* *
		 * The `map` event signals that the shell surface is ready to be
		 * managed by the compositor and rendered on the screen. At this point,
		 * the surface has configured its properties, has had the opportunity
		 * to bind to the seat to receive input events, and has a buffer that
		 * is ready to be rendered. You can now safely add this surface to a
		 * list of views.
		 */
/* *
		 * The `unmap` event signals that the surface is no longer in a state
		 * where it should be shown on the screen. This might happen if the
		 * surface no longer has a displayable buffer because either the
		 * surface has been hidden or is about to be destroyed.
		 */
// for protocol extensions
// wlr_xdg_surface_configure
// wlr_xdg_surface_configure
/* *
 * Send a ping to the surface. If the surface does not respond in a reasonable
 * amount of time, the ping_timeout event will be emitted.
 */
/* *
 * Request that this toplevel surface be the given size. Returns the associated
 * configure serial.
 */
/* *
 * Request that this toplevel surface show itself in an activated or deactivated
 * state. Returns the associated configure serial.
 */
/* *
 * Request that this toplevel surface consider itself maximized or not
 * maximized. Returns the associated configure serial.
 */
/* *
 * Request that this toplevel surface consider itself fullscreen or not
 * fullscreen. Returns the associated configure serial.
 */
/* *
 * Request that this toplevel surface consider itself to be resizing or not
 * resizing. Returns the associated configure serial.
 */
/* *
 * Request that this toplevel surface consider itself in a tiled layout and some
 * edges are adjacent to another part of the tiling grid. `tiled_edges` is a
 * bitfield of `enum wlr_edges`. Returns the associated configure serial.
 */
/* *
 * Request that this xdg toplevel closes.
 */
/* *
 * Request that this xdg popup closes.
 **/
/* *
 * Get the geometry for this positioner based on the anchor rect, gravity, and
 * size of this positioner.
 */
/* *
 * Get the anchor point for this popup in the toplevel parent's coordinate system.
 */
/* *
 * Convert the given coordinates in the popup coordinate system to the toplevel
 * surface coordinate system.
 */
/* *
 * Set the geometry of this popup to unconstrain it according to its
 * xdg-positioner rules. The box should be in the popup's root toplevel parent
 * surface coordinate system.
 */
/* *
  Invert the right/left anchor and gravity for this positioner. This can be
  used to "flip" the positioner around the anchor rect in the x direction.
 */
/* *
  Invert the top/bottom anchor and gravity for this positioner. This can be
  used to "flip" the positioner around the anchor rect in the y direction.
 */
#[no_mangle]
pub unsafe extern "C" fn wlr_positioner_invert_y(mut positioner:
                                                     *mut wlr_xdg_positioner) {
    (*positioner).anchor = positioner_anchor_invert_y((*positioner).anchor);
    (*positioner).gravity =
        positioner_gravity_invert_y((*positioner).gravity);
}
