use libc;
extern "C" {
    pub type wl_proxy;
    pub type wl_display;
    pub type wl_buffer;
    pub type wl_callback;
    pub type wl_compositor;
    pub type wl_keyboard;
    /* Generated by wayland-scanner 1.17.0 */
    /* *
 * @page page_pointer_gestures_unstable_v1 The pointer_gestures_unstable_v1 protocol
 * @section page_ifaces_pointer_gestures_unstable_v1 Interfaces
 * - @subpage page_iface_zwp_pointer_gestures_v1 - touchpad gestures
 * - @subpage page_iface_zwp_pointer_gesture_swipe_v1 - a swipe gesture object
 * - @subpage page_iface_zwp_pointer_gesture_pinch_v1 - a pinch gesture object
 */
    /* Generated by wayland-scanner 1.17.0 */
    /* *
 * @page page_relative_pointer_unstable_v1 The relative_pointer_unstable_v1 protocol
 * protocol for relative pointer motion events
 *
 * @section page_desc_relative_pointer_unstable_v1 Description
 *
 * This protocol specifies a set of interfaces used for making clients able to
 * receive relative pointer events not obstructed by barriers (such as the
 * monitor edge or other pointer barriers).
 *
 * To start receiving relative pointer events, a client must first bind the
 * global interface "wp_relative_pointer_manager" which, if a compositor
 * supports relative pointer motion events, is exposed by the registry. After
 * having created the relative pointer manager proxy object, the client uses
 * it to create the actual relative pointer object using the
 * "get_relative_pointer" request given a wl_pointer. The relative pointer
 * motion events will then, when applicable, be transmitted via the proxy of
 * the newly created relative pointer object. See the documentation of the
 * relative pointer interface for more details.
 *
 * Warning! The protocol described in this file is experimental and backward
 * incompatible changes may be made. Backward compatible changes may be added
 * together with the corresponding interface version bump. Backward
 * incompatible changes are done by bumping the version number in the protocol
 * and interface names and resetting the interface version. Once the protocol
 * is to be declared stable, the 'z' prefix and the version number in the
 * protocol and interface names are removed and the interface version number is
 * reset.
 *
 * @section page_ifaces_relative_pointer_unstable_v1 Interfaces
 * - @subpage page_iface_zwp_relative_pointer_manager_v1 - get relative pointer objects
 * - @subpage page_iface_zwp_relative_pointer_v1 - relative pointer object
 * @section page_copyright_relative_pointer_unstable_v1 Copyright
 * <pre>
 *
 * Copyright © 2014      Jonas Ådahl
 * Copyright © 2015      Red Hat Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
    pub type wl_pointer;
    pub type wl_registry;
    pub type wl_seat;
    pub type wl_surface;
    pub type wl_event_source;
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_group;
    pub type wlr_tablet_pad_impl;
    pub type wlr_tablet_impl;
    pub type wlr_switch_impl;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    pub type wlr_backend_impl;
    pub type wlr_renderer_impl;
    pub type wlr_texture_impl;
    pub type wlr_surface;
    pub type zwp_pointer_gesture_pinch_v1;
    pub type zwp_pointer_gesture_swipe_v1;
    pub type zwp_pointer_gestures_v1;
    pub type wl_egl_window;
    pub type zxdg_toplevel_decoration_v1;
    pub type xdg_toplevel;
    pub type xdg_surface;
    pub type zwp_tablet_manager_v2;
    pub type zwp_relative_pointer_manager_v1;
    pub type zwp_linux_dmabuf_v1;
    pub type wp_presentation;
    pub type zxdg_decoration_manager_v1;
    pub type xdg_wm_base;
    pub type zwp_relative_pointer_v1;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
     -> *mut libc::c_void;
    #[no_mangle]
    fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
    #[no_mangle]
    fn strerror(_: libc::c_int) -> *mut libc::c_char;
    #[no_mangle]
    fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> libc::c_int;
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_proxy_marshal_constructor(proxy: *mut wl_proxy, opcode: uint32_t,
                                    interface: *const wl_interface, _: ...)
     -> *mut wl_proxy;
    #[no_mangle]
    fn wl_proxy_destroy(proxy: *mut wl_proxy);
    #[no_mangle]
    fn wl_proxy_add_listener(proxy: *mut wl_proxy,
                             implementation:
                                 *mut Option<unsafe extern "C" fn() -> ()>,
                             data: *mut libc::c_void) -> libc::c_int;
    #[no_mangle]
    fn wl_proxy_get_user_data(proxy: *mut wl_proxy) -> *mut libc::c_void;
    #[no_mangle]
    static wl_pointer_interface: wl_interface;
    #[no_mangle]
    static wl_keyboard_interface: wl_interface;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    #[no_mangle]
    fn wlr_input_device_destroy(dev: *mut wlr_input_device);
    #[no_mangle]
    fn wlr_input_device_init(wlr_device: *mut wlr_input_device,
                             type_0: wlr_input_device_type,
                             impl_0: *const wlr_input_device_impl,
                             name: *const libc::c_char, vendor: libc::c_int,
                             product: libc::c_int);
    #[no_mangle]
    fn wlr_keyboard_init(keyboard: *mut wlr_keyboard,
                         impl_0: *const wlr_keyboard_impl);
    #[no_mangle]
    fn wlr_keyboard_notify_key(keyboard: *mut wlr_keyboard,
                               event: *mut wlr_event_keyboard_key);
    #[no_mangle]
    fn wlr_keyboard_notify_modifiers(keyboard: *mut wlr_keyboard,
                                     mods_depressed: uint32_t,
                                     mods_latched: uint32_t,
                                     mods_locked: uint32_t, group: uint32_t);
    #[no_mangle]
    fn wlr_pointer_init(pointer: *mut wlr_pointer,
                        impl_0: *const wlr_pointer_impl);
    #[no_mangle]
    fn __errno_location() -> *mut libc::c_int;
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    /* *
 * @page page_iface_zwp_pointer_gesture_swipe_v1 zwp_pointer_gesture_swipe_v1
 * @section page_iface_zwp_pointer_gesture_swipe_v1_desc Description
 *
 * A swipe gesture object notifies a client about a multi-finger swipe
 * gesture detected on an indirect input device such as a touchpad.
 * The gesture is usually initiated by multiple fingers moving in the
 * same direction but once initiated the direction may change.
 * The precise conditions of when such a gesture is detected are
 * implementation-dependent.
 *
 * A gesture consists of three stages: begin, update (optional) and end.
 * There cannot be multiple simultaneous pinch or swipe gestures on a
 * same pointer/seat, how compositors prevent these situations is
 * implementation-dependent.
 *
 * A gesture may be cancelled by the compositor or the hardware.
 * Clients should not consider performing permanent or irreversible
 * actions until the end of a gesture has been received.
 * @section page_iface_zwp_pointer_gesture_swipe_v1_api API
 * See @ref iface_zwp_pointer_gesture_swipe_v1.
 */
/* *
 * @defgroup iface_zwp_pointer_gesture_swipe_v1 The zwp_pointer_gesture_swipe_v1 interface
 *
 * A swipe gesture object notifies a client about a multi-finger swipe
 * gesture detected on an indirect input device such as a touchpad.
 * The gesture is usually initiated by multiple fingers moving in the
 * same direction but once initiated the direction may change.
 * The precise conditions of when such a gesture is detected are
 * implementation-dependent.
 *
 * A gesture consists of three stages: begin, update (optional) and end.
 * There cannot be multiple simultaneous pinch or swipe gestures on a
 * same pointer/seat, how compositors prevent these situations is
 * implementation-dependent.
 *
 * A gesture may be cancelled by the compositor or the hardware.
 * Clients should not consider performing permanent or irreversible
 * actions until the end of a gesture has been received.
 */
    #[no_mangle]
    static zwp_pointer_gesture_swipe_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_pointer_gesture_pinch_v1 zwp_pointer_gesture_pinch_v1
 * @section page_iface_zwp_pointer_gesture_pinch_v1_desc Description
 *
 * A pinch gesture object notifies a client about a multi-finger pinch
 * gesture detected on an indirect input device such as a touchpad.
 * The gesture is usually initiated by multiple fingers moving towards
 * each other or away from each other, or by two or more fingers rotating
 * around a logical center of gravity. The precise conditions of when
 * such a gesture is detected are implementation-dependent.
 *
 * A gesture consists of three stages: begin, update (optional) and end.
 * There cannot be multiple simultaneous pinch or swipe gestures on a
 * same pointer/seat, how compositors prevent these situations is
 * implementation-dependent.
 *
 * A gesture may be cancelled by the compositor or the hardware.
 * Clients should not consider performing permanent or irreversible
 * actions until the end of a gesture has been received.
 * @section page_iface_zwp_pointer_gesture_pinch_v1_api API
 * See @ref iface_zwp_pointer_gesture_pinch_v1.
 */
/* *
 * @defgroup iface_zwp_pointer_gesture_pinch_v1 The zwp_pointer_gesture_pinch_v1 interface
 *
 * A pinch gesture object notifies a client about a multi-finger pinch
 * gesture detected on an indirect input device such as a touchpad.
 * The gesture is usually initiated by multiple fingers moving towards
 * each other or away from each other, or by two or more fingers rotating
 * around a logical center of gravity. The precise conditions of when
 * such a gesture is detected are implementation-dependent.
 *
 * A gesture consists of three stages: begin, update (optional) and end.
 * There cannot be multiple simultaneous pinch or swipe gestures on a
 * same pointer/seat, how compositors prevent these situations is
 * implementation-dependent.
 *
 * A gesture may be cancelled by the compositor or the hardware.
 * Clients should not consider performing permanent or irreversible
 * actions until the end of a gesture has been received.
 */
    #[no_mangle]
    static zwp_pointer_gesture_pinch_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_relative_pointer_v1 zwp_relative_pointer_v1
 * @section page_iface_zwp_relative_pointer_v1_desc Description
 *
 * A wp_relative_pointer object is an extension to the wl_pointer interface
 * used for emitting relative pointer events. It shares the same focus as
 * wl_pointer objects of the same seat and will only emit events when it has
 * focus.
 * @section page_iface_zwp_relative_pointer_v1_api API
 * See @ref iface_zwp_relative_pointer_v1.
 */
/* *
 * @defgroup iface_zwp_relative_pointer_v1 The zwp_relative_pointer_v1 interface
 *
 * A wp_relative_pointer object is an extension to the wl_pointer interface
 * used for emitting relative pointer events. It shares the same focus as
 * wl_pointer objects of the same seat and will only emit events when it has
 * focus.
 */
    #[no_mangle]
    static zwp_relative_pointer_v1_interface: wl_interface;
    #[no_mangle]
    fn update_wl_output_cursor(output: *mut wlr_wl_output);
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
}
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __time_t = libc::c_long;
pub type __clockid_t = libc::c_int;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint16_t = __uint16_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type size_t = libc::c_ulong;

#[repr(C)]#[derive(Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type clockid_t = __clockid_t;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_array {
    pub size: size_t,
    pub alloc: size_t,
    pub data: *mut libc::c_void,
}
pub type wl_fixed_t = int32_t;

#[repr ( C )]#[derive(Copy, Clone)]
pub union C2RustUnnamed {
    pub d: libc::c_double,
    pub i: int64_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_seat_capability = libc::c_uint;
pub const WL_SEAT_CAPABILITY_TOUCH: wl_seat_capability = 4;
pub const WL_SEAT_CAPABILITY_KEYBOARD: wl_seat_capability = 2;
pub const WL_SEAT_CAPABILITY_POINTER: wl_seat_capability = 1;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_seat_listener {
    pub capabilities: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                  _: *mut wl_seat,
                                                  _: uint32_t) -> ()>,
    pub name: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut wl_seat,
                                          _: *const libc::c_char) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_pointer_listener {
    pub enter: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_pointer, _: uint32_t,
                                           _: *mut wl_surface, _: wl_fixed_t,
                                           _: wl_fixed_t) -> ()>,
    pub leave: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_pointer, _: uint32_t,
                                           _: *mut wl_surface) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_pointer, _: uint32_t,
                                            _: wl_fixed_t, _: wl_fixed_t)
                           -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_pointer, _: uint32_t,
                                            _: uint32_t, _: uint32_t,
                                            _: uint32_t) -> ()>,
    pub axis: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut wl_pointer, _: uint32_t,
                                          _: uint32_t, _: wl_fixed_t) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_pointer) -> ()>,
    pub axis_source: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: *mut wl_pointer,
                                                 _: uint32_t) -> ()>,
    pub axis_stop: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut wl_pointer,
                                               _: uint32_t, _: uint32_t)
                              -> ()>,
    pub axis_discrete: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                   _: *mut wl_pointer,
                                                   _: uint32_t, _: int32_t)
                                  -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_keyboard_listener {
    pub keymap: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_keyboard, _: uint32_t,
                                            _: int32_t, _: uint32_t) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_keyboard, _: uint32_t,
                                           _: *mut wl_surface,
                                           _: *mut wl_array) -> ()>,
    pub leave: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_keyboard, _: uint32_t,
                                           _: *mut wl_surface) -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                         _: *mut wl_keyboard, _: uint32_t,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut wl_keyboard,
                                               _: uint32_t, _: uint32_t,
                                               _: uint32_t, _: uint32_t,
                                               _: uint32_t) -> ()>,
    pub repeat_info: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: *mut wl_keyboard,
                                                 _: int32_t, _: int32_t)
                                -> ()>,
}
pub type wl_output_subpixel = libc::c_uint;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_BGR: wl_output_subpixel = 5;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_RGB: wl_output_subpixel = 4;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR: wl_output_subpixel = 3;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB: wl_output_subpixel = 2;
pub const WL_OUTPUT_SUBPIXEL_NONE: wl_output_subpixel = 1;
pub const WL_OUTPUT_SUBPIXEL_UNKNOWN: wl_output_subpixel = 0;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_input_device_type = libc::c_uint;
pub const WLR_INPUT_DEVICE_SWITCH: wlr_input_device_type = 5;
pub const WLR_INPUT_DEVICE_TABLET_PAD: wlr_input_device_type = 4;
pub const WLR_INPUT_DEVICE_TABLET_TOOL: wlr_input_device_type = 3;
pub const WLR_INPUT_DEVICE_TOUCH: wlr_input_device_type = 2;
pub const WLR_INPUT_DEVICE_POINTER: wlr_input_device_type = 1;
pub const WLR_INPUT_DEVICE_KEYBOARD: wlr_input_device_type = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard_impl {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_keyboard) -> ()>,
    pub led_update: Option<unsafe extern "C" fn(_: *mut wlr_keyboard,
                                                _: uint32_t) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut crate::src::types::wlr_keyboard_group::wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_1,
    pub events: C2RustUnnamed_0,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_0 {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_1 {
    pub rate: int32_t,
    pub delay: int32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
pub type wlr_key_state = libc::c_uint;
pub const WLR_KEY_PRESSED: wlr_key_state = 1;
pub const WLR_KEY_RELEASED: wlr_key_state = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_keyboard_key {
    pub time_msec: uint32_t,
    pub keycode: uint32_t,
    pub update_state: bool,
    pub state: wlr_key_state,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_pointer_impl {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_pointer) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_pointer {
    pub impl_0: *const wlr_pointer_impl,
    pub events: C2RustUnnamed_2,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_2 {
    pub motion: wl_signal,
    pub motion_absolute: wl_signal,
    pub button: wl_signal,
    pub axis: wl_signal,
    pub frame: wl_signal,
    pub swipe_begin: wl_signal,
    pub swipe_update: wl_signal,
    pub swipe_end: wl_signal,
    pub pinch_begin: wl_signal,
    pub pinch_update: wl_signal,
    pub pinch_end: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_motion {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub delta_x: libc::c_double,
    pub delta_y: libc::c_double,
    pub unaccel_dx: libc::c_double,
    pub unaccel_dy: libc::c_double,
}
/* Note: these are circular dependencies */
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_input_device {
    pub impl_0: *const wlr_input_device_impl,
    pub type_0: wlr_input_device_type,
    pub vendor: libc::c_uint,
    pub product: libc::c_uint,
    pub name: *mut libc::c_char,
    pub width_mm: libc::c_double,
    pub height_mm: libc::c_double,
    pub output_name: *mut libc::c_char,
    pub c2rust_unnamed: C2RustUnnamed_4,
    pub events: C2RustUnnamed_3,
    pub data: *mut libc::c_void,
    pub link: wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_3 {
    pub destroy: wl_signal,
}

#[repr ( C )]#[derive(Copy, Clone)]
pub union C2RustUnnamed_4 {
    pub _device: *mut libc::c_void,
    pub keyboard: *mut wlr_keyboard,
    pub pointer: *mut wlr_pointer,
    pub switch_device: *mut wlr_switch,
    pub touch: *mut wlr_touch,
    pub tablet: *mut wlr_tablet,
    pub tablet_pad: *mut wlr_tablet_pad,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_tablet_pad {
    pub impl_0: *mut crate::src::backend::headless::input_device::wlr_tablet_pad_impl,
    pub events: C2RustUnnamed_5,
    pub button_count: size_t,
    pub ring_count: size_t,
    pub strip_count: size_t,
    pub groups: wl_list,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_list {
    pub capacity: size_t,
    pub length: size_t,
    pub items: *mut *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_5 {
    pub button: wl_signal,
    pub ring: wl_signal,
    pub strip: wl_signal,
    pub attach_tablet: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_tablet {
    pub impl_0: *mut crate::src::backend::headless::input_device::wlr_tablet_impl,
    pub events: C2RustUnnamed_6,
    pub name: *mut libc::c_char,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_6 {
    pub axis: wl_signal,
    pub proximity: wl_signal,
    pub tip: wl_signal,
    pub button: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_touch {
    pub impl_0: *const wlr_touch_impl,
    pub events: C2RustUnnamed_7,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_7 {
    pub down: wl_signal,
    pub up: wl_signal,
    pub motion: wl_signal,
    pub cancel: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_touch_impl {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_touch) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_switch {
    pub impl_0: *mut crate::src::backend::headless::input_device::wlr_switch_impl,
    pub events: C2RustUnnamed_8,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_8 {
    pub toggle: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_input_device_impl {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_input_device) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_motion_absolute {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub x: libc::c_double,
    pub y: libc::c_double,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_button {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub button: uint32_t,
    pub state: wlr_button_state,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_axis {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub source: wlr_axis_source,
    pub orientation: wlr_axis_orientation,
    pub delta: libc::c_double,
    pub delta_discrete: int32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_swipe_begin {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub fingers: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_swipe_update {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub fingers: uint32_t,
    pub dx: libc::c_double,
    pub dy: libc::c_double,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_swipe_end {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub cancelled: bool,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_pinch_begin {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub fingers: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_pinch_update {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub fingers: uint32_t,
    pub dx: libc::c_double,
    pub dy: libc::c_double,
    pub scale: libc::c_double,
    pub rotation: libc::c_double,
}
// From 0..1
// Relative coordinates of the logical center of the gesture
	// compared to the previous event.
// Relative coordinates of the logical center of the gesture
	// compared to the previous event.
// Absolute scale compared to the begin event
// Relative angle in degrees clockwise compared to the previous event.

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_pointer_pinch_end {
    pub device: *mut wlr_input_device,
    pub time_msec: uint32_t,
    pub cancelled: bool,
}
pub type EGLDisplay = *mut libc::c_void;
pub type EGLConfig = *mut libc::c_void;
pub type EGLSurface = *mut libc::c_void;
pub type EGLContext = *mut libc::c_void;
pub type EGLenum = libc::c_uint;
/*
 * 32 bit regions
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_dmabuf_attributes {
    pub width: int32_t,
    pub height: int32_t,
    pub format: uint32_t,
    pub flags: uint32_t,
    pub modifier: uint64_t,
    pub n_planes: libc::c_int,
    pub offset: [uint32_t; 4],
    pub stride: [uint32_t; 4],
    pub fd: [libc::c_int; 4],
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_drm_format {
    pub format: uint32_t,
    pub len: size_t,
    pub cap: size_t,
    pub modifiers: [uint64_t; 0],
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_drm_format_set {
    pub len: size_t,
    pub cap: size_t,
    pub formats: *mut *mut wlr_drm_format,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_egl {
    pub platform: EGLenum,
    pub display: EGLDisplay,
    pub config: EGLConfig,
    pub context: EGLContext,
    pub exts_str: *const libc::c_char,
    pub exts: C2RustUnnamed_9,
    pub wl_display: *mut wl_display,
    pub dmabuf_formats: wlr_drm_format_set,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_9 {
    pub bind_wayland_display_wl: bool,
    pub buffer_age_ext: bool,
    pub image_base_khr: bool,
    pub image_dma_buf_export_mesa: bool,
    pub image_dmabuf_import_ext: bool,
    pub image_dmabuf_import_modifiers_ext: bool,
    pub swap_buffers_with_damage_ext: bool,
    pub swap_buffers_with_damage_khr: bool,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_backend {
    pub impl_0: *const crate::src::backend::backend::wlr_backend_impl,
    pub events: C2RustUnnamed_10,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_10 {
    pub destroy: wl_signal,
    pub new_input: wl_signal,
    pub new_output: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_renderer {
    pub impl_0: *const crate::src::render::gles2::renderer::wlr_renderer_impl,
    pub events: C2RustUnnamed_11,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_11 {
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_texture {
    pub impl_0: *const crate::src::render::gles2::renderer::wlr_texture_impl,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_mode {
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub preferred: bool,
    pub link: wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_cursor {
    pub output: *mut wlr_output,
    pub x: libc::c_double,
    pub y: libc::c_double,
    pub enabled: bool,
    pub visible: bool,
    pub width: uint32_t,
    pub height: uint32_t,
    pub hotspot_x: int32_t,
    pub hotspot_y: int32_t,
    pub link: wl_list,
    pub texture: *mut wlr_texture,
    pub surface: *mut crate::src::types::data_device::wlr_data_device::wlr_surface,
    pub surface_commit: wl_listener,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_12,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_12 {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output {
    pub impl_0: *const wlr_output_impl,
    pub backend: *mut wlr_backend,
    pub display: *mut wl_display,
    pub global: *mut wl_global,
    pub resources: wl_list,
    pub name: [libc::c_char; 24],
    pub make: [libc::c_char; 56],
    pub model: [libc::c_char; 16],
    pub serial: [libc::c_char; 16],
    pub phys_width: int32_t,
    pub phys_height: int32_t,
    pub modes: wl_list,
    pub current_mode: *mut wlr_output_mode,
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub enabled: bool,
    pub scale: libc::c_float,
    pub subpixel: wl_output_subpixel,
    pub transform: wl_output_transform,
    pub needs_frame: bool,
    pub damage: pixman_region32_t,
    pub frame_pending: bool,
    pub transform_matrix: [libc::c_float; 9],
    pub pending: wlr_output_state,
    pub commit_seq: uint32_t,
    pub events: C2RustUnnamed_13,
    pub idle_frame: *mut wl_event_source,
    pub idle_done: *mut wl_event_source,
    pub attach_render_locks: libc::c_int,
    pub cursors: wl_list,
    pub hardware_cursor: *mut wlr_output_cursor,
    pub software_cursor_locks: libc::c_int,
    pub display_destroy: wl_listener,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_13 {
    pub frame: wl_signal,
    pub needs_frame: wl_signal,
    pub precommit: wl_signal,
    pub commit: wl_signal,
    pub present: wl_signal,
    pub enable: wl_signal,
    pub mode: wl_signal,
    pub scale: wl_signal,
    pub transform: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_state {
    pub committed: uint32_t,
    pub damage: pixman_region32_t,
    pub buffer_type: wlr_output_state_buffer_type,
    pub buffer: *mut wlr_buffer,
}
pub type wlr_output_state_buffer_type = libc::c_uint;
pub const WLR_OUTPUT_STATE_BUFFER_SCANOUT: wlr_output_state_buffer_type = 1;
pub const WLR_OUTPUT_STATE_BUFFER_RENDER: wlr_output_state_buffer_type = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_impl {
    pub enable: Option<unsafe extern "C" fn(_: *mut wlr_output, _: bool)
                           -> bool>,
    pub set_mode: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                              _: *mut wlr_output_mode)
                             -> bool>,
    pub set_custom_mode: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                     _: int32_t, _: int32_t,
                                                     _: int32_t) -> bool>,
    pub set_cursor: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                _: *mut wlr_texture,
                                                _: int32_t,
                                                _: wl_output_transform,
                                                _: int32_t, _: int32_t,
                                                _: bool) -> bool>,
    pub move_cursor: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                 _: libc::c_int,
                                                 _: libc::c_int) -> bool>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_output) -> ()>,
    pub attach_render: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                   _: *mut libc::c_int)
                                  -> bool>,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_output) -> bool>,
    pub set_gamma: Option<unsafe extern "C" fn(_: *mut wlr_output, _: size_t,
                                               _: *const uint16_t,
                                               _: *const uint16_t,
                                               _: *const uint16_t) -> bool>,
    pub get_gamma_size: Option<unsafe extern "C" fn(_: *mut wlr_output)
                                   -> size_t>,
    pub export_dmabuf: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                   _:
                                                       *mut wlr_dmabuf_attributes)
                                  -> bool>,
    pub schedule_frame: Option<unsafe extern "C" fn(_: *mut wlr_output)
                                   -> bool>,
    pub attach_buffer: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                   _: *mut wlr_buffer)
                                  -> bool>,
}
/*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_wl_pointer {
    pub wlr_pointer: wlr_pointer,
    pub input_device: *mut wlr_wl_input_device,
    pub wl_pointer: *mut wl_pointer,
    pub gesture_swipe: *mut zwp_pointer_gesture_swipe_v1,
    pub gesture_pinch: *mut zwp_pointer_gesture_pinch_v1,
    pub relative_pointer: *mut zwp_relative_pointer_v1,
    pub axis_source: wlr_axis_source,
    pub axis_discrete: int32_t,
    pub output: *mut wlr_wl_output,
    pub output_destroy: wl_listener,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_wl_output {
    pub wlr_output: wlr_output,
    pub backend: *mut wlr_wl_backend,
    pub link: wl_list,
    pub surface: *mut wl_surface,
    pub frame_callback: *mut wl_callback,
    pub xdg_surface: *mut xdg_surface,
    pub xdg_toplevel: *mut xdg_toplevel,
    pub zxdg_toplevel_decoration_v1: *mut zxdg_toplevel_decoration_v1,
    pub egl_window: *mut wl_egl_window,
    pub egl_surface: EGLSurface,
    pub pending_wl_buffer: *mut wl_buffer,
    pub current_wl_buffer: *mut wl_buffer,
    pub current_buffer: *mut wlr_buffer,
    pub presentation_feedbacks: wl_list,
    pub enter_serial: uint32_t,
    pub cursor: C2RustUnnamed_14,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_14 {
    pub surface: *mut wl_surface,
    pub egl_window: *mut wl_egl_window,
    pub hotspot_x: int32_t,
    pub hotspot_y: int32_t,
    pub width: int32_t,
    pub height: int32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_wl_backend {
    pub backend: wlr_backend,
    pub started: bool,
    pub local_display: *mut wl_display,
    pub devices: wl_list,
    pub outputs: wl_list,
    pub egl: wlr_egl,
    pub renderer: *mut wlr_renderer,
    pub requested_outputs: size_t,
    pub last_output_num: size_t,
    pub local_display_destroy: wl_listener,
    pub remote_display: *mut wl_display,
    pub remote_display_src: *mut wl_event_source,
    pub registry: *mut wl_registry,
    pub compositor: *mut wl_compositor,
    pub xdg_wm_base: *mut xdg_wm_base,
    pub zxdg_decoration_manager_v1: *mut zxdg_decoration_manager_v1,
    pub zwp_pointer_gestures_v1: *mut zwp_pointer_gestures_v1,
    pub presentation: *mut wp_presentation,
    pub zwp_linux_dmabuf_v1: *mut zwp_linux_dmabuf_v1,
    pub zwp_relative_pointer_manager_v1: *mut zwp_relative_pointer_manager_v1,
    pub seat: *mut wl_seat,
    pub pointer: *mut wl_pointer,
    pub keyboard: *mut wl_keyboard,
    pub current_pointer: *mut wlr_wl_pointer,
    pub tablet_manager: *mut zwp_tablet_manager_v2,
    pub seat_name: *mut libc::c_char,
    pub linux_dmabuf_v1_formats: wlr_drm_format_set,
}
/* local state */
/* remote state */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_wl_input_device {
    pub wlr_input_device: wlr_input_device,
    pub fingers: uint32_t,
    pub backend: *mut wlr_wl_backend,
    pub resource: *mut libc::c_void,
}
/* *
 * @ingroup iface_zwp_pointer_gesture_swipe_v1
 * @struct zwp_pointer_gesture_swipe_v1_listener
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwp_pointer_gesture_swipe_v1_listener {
    pub begin: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _:
                                               *mut zwp_pointer_gesture_swipe_v1,
                                           _: uint32_t, _: uint32_t,
                                           _: *mut wl_surface, _: uint32_t)
                          -> ()>,
    pub update: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _:
                                                *mut zwp_pointer_gesture_swipe_v1,
                                            _: uint32_t, _: wl_fixed_t,
                                            _: wl_fixed_t) -> ()>,
    pub end: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                         _: *mut zwp_pointer_gesture_swipe_v1,
                                         _: uint32_t, _: uint32_t, _: int32_t)
                        -> ()>,
}
/* *
 * @ingroup iface_zwp_pointer_gesture_pinch_v1
 * @struct zwp_pointer_gesture_pinch_v1_listener
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwp_pointer_gesture_pinch_v1_listener {
    pub begin: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _:
                                               *mut zwp_pointer_gesture_pinch_v1,
                                           _: uint32_t, _: uint32_t,
                                           _: *mut wl_surface, _: uint32_t)
                          -> ()>,
    pub update: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _:
                                                *mut zwp_pointer_gesture_pinch_v1,
                                            _: uint32_t, _: wl_fixed_t,
                                            _: wl_fixed_t, _: wl_fixed_t,
                                            _: wl_fixed_t) -> ()>,
    pub end: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                         _: *mut zwp_pointer_gesture_pinch_v1,
                                         _: uint32_t, _: uint32_t, _: int32_t)
                        -> ()>,
}
/* *
 * @ingroup iface_zwp_relative_pointer_v1
 * @struct zwp_relative_pointer_v1_listener
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwp_relative_pointer_v1_listener {
    pub relative_motion: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                     _:
                                                         *mut zwp_relative_pointer_v1,
                                                     _: uint32_t, _: uint32_t,
                                                     _: wl_fixed_t,
                                                     _: wl_fixed_t,
                                                     _: wl_fixed_t,
                                                     _: wl_fixed_t) -> ()>,
}
#[inline]
unsafe extern "C" fn wl_fixed_to_double(mut f: wl_fixed_t) -> libc::c_double {
    let mut u: C2RustUnnamed = C2RustUnnamed{d: 0.,};
    u.i =
        ((1023i64 + 44i64 << 52i32) + (1i64 << 51i32) + f as libc::c_longlong)
            as int64_t;
    return u.d - (3i64 << 43i32) as libc::c_double;
}
#[inline]
unsafe extern "C" fn wl_surface_get_user_data(mut wl_surface: *mut wl_surface)
 -> *mut libc::c_void {
    return wl_proxy_get_user_data(wl_surface as *mut wl_proxy);
}
#[inline]
unsafe extern "C" fn wl_seat_get_pointer(mut wl_seat: *mut wl_seat)
 -> *mut wl_pointer {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(wl_seat as *mut wl_proxy,
                                     0i32 as uint32_t,
                                     &wl_pointer_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut wl_pointer;
}
#[inline]
unsafe extern "C" fn wl_seat_get_keyboard(mut wl_seat: *mut wl_seat)
 -> *mut wl_keyboard {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(wl_seat as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &wl_keyboard_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut wl_keyboard;
}
#[inline]
unsafe extern "C" fn wl_pointer_add_listener(mut wl_pointer: *mut wl_pointer,
                                             mut listener:
                                                 *const wl_pointer_listener,
                                             mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(wl_pointer as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
#[inline]
unsafe extern "C" fn wl_keyboard_add_listener(mut wl_keyboard:
                                                  *mut wl_keyboard,
                                              mut listener:
                                                  *const wl_keyboard_listener,
                                              mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(wl_keyboard as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
/* *
 * @ingroup iface_zwp_pointer_gestures_v1
 *
 * Create a swipe gesture object. See the
 * wl_pointer_gesture_swipe interface for details.
 */
#[inline]
unsafe extern "C" fn zwp_pointer_gestures_v1_get_swipe_gesture(mut zwp_pointer_gestures_v1:
                                                                   *mut zwp_pointer_gestures_v1,
                                                               mut pointer:
                                                                   *mut wl_pointer)
 -> *mut zwp_pointer_gesture_swipe_v1 {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(zwp_pointer_gestures_v1 as *mut wl_proxy,
                                     0i32 as uint32_t,
                                     &zwp_pointer_gesture_swipe_v1_interface
                                         as *const wl_interface,
                                     0 as *mut libc::c_void, pointer);
    return id as *mut zwp_pointer_gesture_swipe_v1;
}
/* *
 * @ingroup iface_zwp_pointer_gestures_v1
 *
 * Create a pinch gesture object. See the
 * wl_pointer_gesture_pinch interface for details.
 */
#[inline]
unsafe extern "C" fn zwp_pointer_gestures_v1_get_pinch_gesture(mut zwp_pointer_gestures_v1:
                                                                   *mut zwp_pointer_gestures_v1,
                                                               mut pointer:
                                                                   *mut wl_pointer)
 -> *mut zwp_pointer_gesture_pinch_v1 {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(zwp_pointer_gestures_v1 as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &zwp_pointer_gesture_pinch_v1_interface
                                         as *const wl_interface,
                                     0 as *mut libc::c_void, pointer);
    return id as *mut zwp_pointer_gesture_pinch_v1;
}
/* *
 * @ingroup iface_zwp_pointer_gesture_swipe_v1
 */
#[inline]
unsafe extern "C" fn zwp_pointer_gesture_swipe_v1_add_listener(mut zwp_pointer_gesture_swipe_v1:
                                                                   *mut zwp_pointer_gesture_swipe_v1,
                                                               mut listener:
                                                                   *const zwp_pointer_gesture_swipe_v1_listener,
                                                               mut data:
                                                                   *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(zwp_pointer_gesture_swipe_v1 as
                                     *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
/* *
 * @ingroup iface_zwp_pointer_gesture_pinch_v1
 */
#[inline]
unsafe extern "C" fn zwp_pointer_gesture_pinch_v1_add_listener(mut zwp_pointer_gesture_pinch_v1:
                                                                   *mut zwp_pointer_gesture_pinch_v1,
                                                               mut listener:
                                                                   *const zwp_pointer_gesture_pinch_v1_listener,
                                                               mut data:
                                                                   *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(zwp_pointer_gesture_pinch_v1 as
                                     *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
/* *
 * @ingroup iface_zwp_relative_pointer_manager_v1
 *
 * Create a relative pointer interface given a wl_pointer object. See the
 * wp_relative_pointer interface for more details.
 */
#[inline]
unsafe extern "C" fn zwp_relative_pointer_manager_v1_get_relative_pointer(mut zwp_relative_pointer_manager_v1:
                                                                              *mut zwp_relative_pointer_manager_v1,
                                                                          mut pointer:
                                                                              *mut wl_pointer)
 -> *mut zwp_relative_pointer_v1 {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(zwp_relative_pointer_manager_v1 as
                                         *mut wl_proxy, 1i32 as uint32_t,
                                     &zwp_relative_pointer_v1_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void, pointer);
    return id as *mut zwp_relative_pointer_v1;
}
/* *
 * @ingroup iface_zwp_relative_pointer_v1
 */
#[inline]
unsafe extern "C" fn zwp_relative_pointer_v1_add_listener(mut zwp_relative_pointer_v1:
                                                              *mut zwp_relative_pointer_v1,
                                                          mut listener:
                                                              *const zwp_relative_pointer_v1_listener,
                                                          mut data:
                                                              *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(zwp_relative_pointer_v1 as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
unsafe extern "C" fn output_get_pointer(mut output: *mut wlr_wl_output)
 -> *mut wlr_wl_pointer {
    let mut wlr_dev: *mut wlr_input_device = 0 as *mut wlr_input_device;
    wlr_dev =
        ((*(*output).backend).devices.next as *mut libc::c_char).offset(-88)
            as *mut wlr_input_device;
    while &mut (*wlr_dev).link as *mut wl_list !=
              &mut (*(*output).backend).devices as *mut wl_list {
        if !((*wlr_dev).type_0 as libc::c_uint !=
                 WLR_INPUT_DEVICE_POINTER as libc::c_int as libc::c_uint) {
            let mut pointer: *mut wlr_wl_pointer =
                pointer_get_wl((*wlr_dev).c2rust_unnamed.pointer);
            if (*pointer).output == output { return pointer }
        }
        wlr_dev =
            ((*wlr_dev).link.next as *mut libc::c_char).offset(-88) as
                *mut wlr_input_device
    }
    return 0 as *mut wlr_wl_pointer;
}
unsafe extern "C" fn pointer_handle_enter(mut data: *mut libc::c_void,
                                          mut wl_pointer: *mut wl_pointer,
                                          mut serial: uint32_t,
                                          mut surface: *mut wl_surface,
                                          mut sx: wl_fixed_t,
                                          mut sy: wl_fixed_t) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    if surface.is_null() { return }
    let mut output: *mut wlr_wl_output =
        wl_surface_get_user_data(surface) as *mut wlr_wl_output;
    if !output.is_null() {
    } else {
        __assert_fail(b"output\x00" as *const u8 as *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 47i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 110],
                                                &[libc::c_char; 110]>(b"void pointer_handle_enter(void *, struct wl_pointer *, uint32_t, struct wl_surface *, wl_fixed_t, wl_fixed_t)\x00")).as_ptr());
    };
    let mut pointer: *mut wlr_wl_pointer = output_get_pointer(output);
    (*output).enter_serial = serial;
    (*backend).current_pointer = pointer;
    update_wl_output_cursor(output);
}
unsafe extern "C" fn pointer_handle_leave(mut data: *mut libc::c_void,
                                          mut wl_pointer: *mut wl_pointer,
                                          mut serial: uint32_t,
                                          mut surface: *mut wl_surface) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    if surface.is_null() { return }
    let mut output: *mut wlr_wl_output =
        wl_surface_get_user_data(surface) as *mut wlr_wl_output;
    if !output.is_null() {
    } else {
        __assert_fail(b"output\x00" as *const u8 as *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 63i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 86],
                                                &[libc::c_char; 86]>(b"void pointer_handle_leave(void *, struct wl_pointer *, uint32_t, struct wl_surface *)\x00")).as_ptr());
    };
    (*output).enter_serial = 0i32 as uint32_t;
    if (*backend).current_pointer.is_null() ||
           (*(*backend).current_pointer).output != output {
        return
    }
    (*backend).current_pointer = 0 as *mut wlr_wl_pointer;
}
unsafe extern "C" fn pointer_handle_motion(mut data: *mut libc::c_void,
                                           mut wl_pointer: *mut wl_pointer,
                                           mut time: uint32_t,
                                           mut sx: wl_fixed_t,
                                           mut sy: wl_fixed_t) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    let mut pointer: *mut wlr_wl_pointer = (*backend).current_pointer;
    if pointer.is_null() { return }
    let mut wlr_output: *mut wlr_output =
        &mut (*(*pointer).output).wlr_output;
    let mut event: wlr_event_pointer_motion_absolute =
        {
            let mut init =
                wlr_event_pointer_motion_absolute{device:
                                                      &mut (*(*pointer).input_device).wlr_input_device,
                                                  time_msec: time,
                                                  x:
                                                      wl_fixed_to_double(sx) /
                                                          (*wlr_output).width
                                                              as
                                                              libc::c_double,
                                                  y:
                                                      wl_fixed_to_double(sy) /
                                                          (*wlr_output).height
                                                              as
                                                              libc::c_double,};
            init
        };
    wlr_signal_emit_safe(&mut (*pointer).wlr_pointer.events.motion_absolute,
                         &mut event as *mut wlr_event_pointer_motion_absolute
                             as *mut libc::c_void);
}
unsafe extern "C" fn pointer_handle_button(mut data: *mut libc::c_void,
                                           mut wl_pointer: *mut wl_pointer,
                                           mut serial: uint32_t,
                                           mut time: uint32_t,
                                           mut button: uint32_t,
                                           mut state: uint32_t) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    let mut pointer: *mut wlr_wl_pointer = (*backend).current_pointer;
    if pointer.is_null() { return }
    let mut event: wlr_event_pointer_button =
        {
            let mut init =
                wlr_event_pointer_button{device:
                                             &mut (*(*pointer).input_device).wlr_input_device,
                                         time_msec: time,
                                         button: button,
                                         state: state as wlr_button_state,};
            init
        };
    wlr_signal_emit_safe(&mut (*pointer).wlr_pointer.events.button,
                         &mut event as *mut wlr_event_pointer_button as
                             *mut libc::c_void);
}
unsafe extern "C" fn pointer_handle_axis(mut data: *mut libc::c_void,
                                         mut wl_pointer: *mut wl_pointer,
                                         mut time: uint32_t,
                                         mut axis: uint32_t,
                                         mut value: wl_fixed_t) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    let mut pointer: *mut wlr_wl_pointer = (*backend).current_pointer;
    if pointer.is_null() { return }
    let mut event: wlr_event_pointer_axis =
        {
            let mut init =
                wlr_event_pointer_axis{device:
                                           &mut (*(*pointer).input_device).wlr_input_device,
                                       time_msec: time,
                                       source: (*pointer).axis_source,
                                       orientation:
                                           axis as wlr_axis_orientation,
                                       delta: wl_fixed_to_double(value),
                                       delta_discrete:
                                           (*pointer).axis_discrete,};
            init
        };
    wlr_signal_emit_safe(&mut (*pointer).wlr_pointer.events.axis,
                         &mut event as *mut wlr_event_pointer_axis as
                             *mut libc::c_void);
    (*pointer).axis_discrete = 0i32;
}
unsafe extern "C" fn pointer_handle_frame(mut data: *mut libc::c_void,
                                          mut wl_pointer: *mut wl_pointer) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    let mut pointer: *mut wlr_wl_pointer = (*backend).current_pointer;
    if pointer.is_null() { return }
    wlr_signal_emit_safe(&mut (*pointer).wlr_pointer.events.frame,
                         &mut (*pointer).wlr_pointer as *mut wlr_pointer as
                             *mut libc::c_void);
}
unsafe extern "C" fn pointer_handle_axis_source(mut data: *mut libc::c_void,
                                                mut wl_pointer:
                                                    *mut wl_pointer,
                                                mut axis_source: uint32_t) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    let mut pointer: *mut wlr_wl_pointer = (*backend).current_pointer;
    if pointer.is_null() { return }
    (*pointer).axis_source = axis_source as wlr_axis_source;
}
unsafe extern "C" fn pointer_handle_axis_stop(mut data: *mut libc::c_void,
                                              mut wl_pointer: *mut wl_pointer,
                                              mut time: uint32_t,
                                              mut axis: uint32_t) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    let mut pointer: *mut wlr_wl_pointer = (*backend).current_pointer;
    if pointer.is_null() { return }
    let mut event: wlr_event_pointer_axis =
        {
            let mut init =
                wlr_event_pointer_axis{device:
                                           &mut (*(*pointer).input_device).wlr_input_device,
                                       time_msec: time,
                                       source: (*pointer).axis_source,
                                       orientation:
                                           axis as wlr_axis_orientation,
                                       delta: 0i32 as libc::c_double,
                                       delta_discrete: 0i32,};
            init
        };
    wlr_signal_emit_safe(&mut (*pointer).wlr_pointer.events.axis,
                         &mut event as *mut wlr_event_pointer_axis as
                             *mut libc::c_void);
}
unsafe extern "C" fn pointer_handle_axis_discrete(mut data: *mut libc::c_void,
                                                  mut wl_pointer:
                                                      *mut wl_pointer,
                                                  mut axis: uint32_t,
                                                  mut discrete: int32_t) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    let mut pointer: *mut wlr_wl_pointer = (*backend).current_pointer;
    if pointer.is_null() { return }
    (*pointer).axis_discrete = discrete;
}
static mut pointer_listener: wl_pointer_listener =
    {
    
        {
            let mut init =
                wl_pointer_listener{enter:
                                        Some(pointer_handle_enter as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          *mut wl_surface,
                                                                      _:
                                                                          wl_fixed_t,
                                                                      _:
                                                                          wl_fixed_t)
                                                     -> ()),
                                    leave:
                                        Some(pointer_handle_leave as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          *mut wl_surface)
                                                     -> ()),
                                    motion:
                                        Some(pointer_handle_motion as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          wl_fixed_t,
                                                                      _:
                                                                          wl_fixed_t)
                                                     -> ()),
                                    button:
                                        Some(pointer_handle_button as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t)
                                                     -> ()),
                                    axis:
                                        Some(pointer_handle_axis as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          wl_fixed_t)
                                                     -> ()),
                                    frame:
                                        Some(pointer_handle_frame as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer)
                                                     -> ()),
                                    axis_source:
                                        Some(pointer_handle_axis_source as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t)
                                                     -> ()),
                                    axis_stop:
                                        Some(pointer_handle_axis_stop as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t)
                                                     -> ()),
                                    axis_discrete:
                                        Some(pointer_handle_axis_discrete as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          int32_t)
                                                     -> ()),};
            init
        }
};
unsafe extern "C" fn keyboard_handle_keymap(mut data: *mut libc::c_void,
                                            mut wl_keyboard: *mut wl_keyboard,
                                            mut format: uint32_t,
                                            mut fd: int32_t,
                                            mut size: uint32_t) {
    // TODO: set keymap
}
unsafe extern "C" fn get_current_time_msec() -> uint32_t {
    let mut now: timespec = timespec{tv_sec: 0, tv_nsec: 0,};
    clock_gettime(1i32, &mut now);
    return (now.tv_nsec / 1000i32 as libc::c_long) as uint32_t;
}
unsafe extern "C" fn keyboard_handle_enter(mut data: *mut libc::c_void,
                                           mut wl_keyboard: *mut wl_keyboard,
                                           mut serial: uint32_t,
                                           mut surface: *mut wl_surface,
                                           mut keys: *mut wl_array) {
    let mut dev: *mut wlr_input_device = data as *mut wlr_input_device;
    let mut time: uint32_t = get_current_time_msec();
    let mut keycode_ptr: *mut uint32_t = 0 as *mut uint32_t;
    keycode_ptr = (*keys).data as *mut uint32_t;
    while (keycode_ptr as *const libc::c_char) <
              ((*keys).data as
                   *const libc::c_char).offset((*keys).size as isize) {
        let mut event: wlr_event_keyboard_key =
            {
                let mut init =
                    wlr_event_keyboard_key{time_msec: time,
                                           keycode: *keycode_ptr,
                                           update_state: 0i32 != 0,
                                           state: WLR_KEY_PRESSED,};
                init
            };
        wlr_keyboard_notify_key((*dev).c2rust_unnamed.keyboard, &mut event);
        keycode_ptr = keycode_ptr.offset(1)
    };
}
unsafe extern "C" fn keyboard_handle_leave(mut data: *mut libc::c_void,
                                           mut wl_keyboard: *mut wl_keyboard,
                                           mut serial: uint32_t,
                                           mut surface: *mut wl_surface) {
    let mut dev: *mut wlr_input_device = data as *mut wlr_input_device;
    let mut time: uint32_t = get_current_time_msec();
    let vla =
        (*(*dev).c2rust_unnamed.keyboard).num_keycodes.wrapping_add(1i32 as
                                                                        libc::c_ulong)
            as usize;
    let mut pressed: Vec<uint32_t> = ::std::vec::from_elem(0, vla);
    memcpy(pressed.as_mut_ptr() as *mut libc::c_void,
           (*(*dev).c2rust_unnamed.keyboard).keycodes.as_mut_ptr() as
               *const libc::c_void,
           (*(*dev).c2rust_unnamed.keyboard).num_keycodes.wrapping_mul(::std::mem::size_of::<uint32_t>()
                                                                           as
                                                                           libc::c_ulong));
    let mut i: size_t = 0i32 as size_t;
    while i <
              ((vla * ::std::mem::size_of::<uint32_t>()) as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<uint32_t>()
                                                   as libc::c_ulong) {
        let mut keycode: uint32_t = *pressed.as_mut_ptr().offset(i as isize);
        let mut event: wlr_event_keyboard_key =
            {
                let mut init =
                    wlr_event_keyboard_key{time_msec: time,
                                           keycode: keycode,
                                           update_state: 0i32 != 0,
                                           state: WLR_KEY_RELEASED,};
                init
            };
        wlr_keyboard_notify_key((*dev).c2rust_unnamed.keyboard, &mut event);
        i = i.wrapping_add(1)
    };
}
unsafe extern "C" fn keyboard_handle_key(mut data: *mut libc::c_void,
                                         mut wl_keyboard: *mut wl_keyboard,
                                         mut serial: uint32_t,
                                         mut time: uint32_t,
                                         mut key: uint32_t,
                                         mut state: uint32_t) {
    let mut dev: *mut wlr_input_device = data as *mut wlr_input_device;
    if !dev.is_null() && !(*dev).c2rust_unnamed.keyboard.is_null() {
    } else {
        __assert_fail(b"dev && dev->keyboard\x00" as *const u8 as
                          *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 249i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 95],
                                                &[libc::c_char; 95]>(b"void keyboard_handle_key(void *, struct wl_keyboard *, uint32_t, uint32_t, uint32_t, uint32_t)\x00")).as_ptr());
    };
    let mut wlr_event: wlr_event_keyboard_key =
        {
            let mut init =
                wlr_event_keyboard_key{time_msec: time,
                                       keycode: key,
                                       update_state: 0i32 != 0,
                                       state: state as wlr_key_state,};
            init
        };
    wlr_keyboard_notify_key((*dev).c2rust_unnamed.keyboard, &mut wlr_event);
}
unsafe extern "C" fn keyboard_handle_modifiers(mut data: *mut libc::c_void,
                                               mut wl_keyboard:
                                                   *mut wl_keyboard,
                                               mut serial: uint32_t,
                                               mut mods_depressed: uint32_t,
                                               mut mods_latched: uint32_t,
                                               mut mods_locked: uint32_t,
                                               mut group: uint32_t) {
    let mut dev: *mut wlr_input_device = data as *mut wlr_input_device;
    if !dev.is_null() && !(*dev).c2rust_unnamed.keyboard.is_null() {
    } else {
        __assert_fail(b"dev && dev->keyboard\x00" as *const u8 as
                          *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 264i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 111],
                                                &[libc::c_char; 111]>(b"void keyboard_handle_modifiers(void *, struct wl_keyboard *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)\x00")).as_ptr());
    };
    wlr_keyboard_notify_modifiers((*dev).c2rust_unnamed.keyboard,
                                  mods_depressed, mods_latched, mods_locked,
                                  group);
}
unsafe extern "C" fn keyboard_handle_repeat_info(mut data: *mut libc::c_void,
                                                 mut wl_keyboard:
                                                     *mut wl_keyboard,
                                                 mut rate: int32_t,
                                                 mut delay: int32_t) {
    // This space is intentionally left blank
}
static mut keyboard_listener: wl_keyboard_listener =
    {
    
        {
            let mut init =
                wl_keyboard_listener{keymap:
                                         Some(keyboard_handle_keymap as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           int32_t,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     enter:
                                         Some(keyboard_handle_enter as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           *mut wl_surface,
                                                                       _:
                                                                           *mut wl_array)
                                                      -> ()),
                                     leave:
                                         Some(keyboard_handle_leave as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           *mut wl_surface)
                                                      -> ()),
                                     key:
                                         Some(keyboard_handle_key as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     modifiers:
                                         Some(keyboard_handle_modifiers as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     repeat_info:
                                         Some(keyboard_handle_repeat_info as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           int32_t,
                                                                       _:
                                                                           int32_t)
                                                      -> ()),};
            init
        }
};
unsafe extern "C" fn get_wl_input_device_from_input_device(mut wlr_dev:
                                                               *mut wlr_input_device)
 -> *mut wlr_wl_input_device {
    if wlr_input_device_is_wl(wlr_dev) as libc::c_int != 0 {
    } else {
        __assert_fail(b"wlr_input_device_is_wl(wlr_dev)\x00" as *const u8 as
                          *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 285i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 93],
                                                &[libc::c_char; 93]>(b"struct wlr_wl_input_device *get_wl_input_device_from_input_device(struct wlr_input_device *)\x00")).as_ptr());
    };
    return wlr_dev as *mut wlr_wl_input_device;
}
unsafe extern "C" fn input_device_destroy(mut wlr_dev:
                                              *mut wlr_input_device) {
    let mut dev: *mut wlr_wl_input_device =
        get_wl_input_device_from_input_device(wlr_dev);
    if !(*dev).resource.is_null() {
        wl_proxy_destroy((*dev).resource as *mut wl_proxy);
    }
    wl_list_remove(&mut (*dev).wlr_input_device.link);
    free(dev as *mut libc::c_void);
}
static mut input_device_impl: wlr_input_device_impl =
    {
    
        {
            let mut init =
                wlr_input_device_impl{destroy:
                                          Some(input_device_destroy as
                                                   unsafe extern "C" fn(_:
                                                                            *mut wlr_input_device)
                                                       -> ()),};
            init
        }
};
#[no_mangle]
pub unsafe extern "C" fn wlr_input_device_is_wl(mut dev:
                                                    *mut wlr_input_device)
 -> bool {
    return (*dev).impl_0 ==
               &mut input_device_impl as *mut wlr_input_device_impl as
                   *const wlr_input_device_impl;
}
#[no_mangle]
pub unsafe extern "C" fn create_wl_input_device(mut backend:
                                                    *mut wlr_wl_backend,
                                                mut type_0:
                                                    wlr_input_device_type)
 -> *mut wlr_wl_input_device {
    let mut dev: *mut wlr_wl_input_device =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_wl_input_device>() as libc::c_ulong)
            as *mut wlr_wl_input_device;
    if dev.is_null() {
        _wlr_log(WLR_ERROR,
                 b"[%s:%d] Allocation failed: %s\x00" as *const u8 as
                     *const libc::c_char,
                 b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                     *const libc::c_char, 312i32,
                 strerror(*__errno_location()));
        return 0 as *mut wlr_wl_input_device
    }
    (*dev).backend = backend;
    let mut wlr_dev: *mut wlr_input_device = &mut (*dev).wlr_input_device;
    let mut vendor: libc::c_uint = 0i32 as libc::c_uint;
    let mut product: libc::c_uint = 0i32 as libc::c_uint;
    let mut name: *const libc::c_char =
        b"wayland\x00" as *const u8 as *const libc::c_char;
    wlr_input_device_init(wlr_dev, type_0, &mut input_device_impl, name,
                          vendor as libc::c_int, product as libc::c_int);
    wl_list_insert(&mut (*backend).devices, &mut (*wlr_dev).link);
    return dev;
}
#[no_mangle]
pub unsafe extern "C" fn pointer_get_wl(mut wlr_pointer: *mut wlr_pointer)
 -> *mut wlr_wl_pointer {
    if (*wlr_pointer).impl_0 ==
           &mut pointer_impl as *mut wlr_pointer_impl as
               *const wlr_pointer_impl {
    } else {
        __assert_fail(b"wlr_pointer->impl == &pointer_impl\x00" as *const u8
                          as *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 330i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 60],
                                                &[libc::c_char; 60]>(b"struct wlr_wl_pointer *pointer_get_wl(struct wlr_pointer *)\x00")).as_ptr());
    };
    return wlr_pointer as *mut wlr_wl_pointer;
}
unsafe extern "C" fn pointer_destroy(mut wlr_pointer: *mut wlr_pointer) {
    let mut pointer: *mut wlr_wl_pointer = pointer_get_wl(wlr_pointer);
    if (*(*(*pointer).output).backend).current_pointer == pointer {
        (*(*(*pointer).output).backend).current_pointer =
            0 as *mut wlr_wl_pointer
    }
    wl_list_remove(&mut (*pointer).output_destroy.link);
    free(pointer as *mut libc::c_void);
}
static mut pointer_impl: wlr_pointer_impl =
    {
    
        {
            let mut init =
                wlr_pointer_impl{destroy:
                                     Some(pointer_destroy as
                                              unsafe extern "C" fn(_:
                                                                       *mut wlr_pointer)
                                                  -> ()),};
            init
        }
};
unsafe extern "C" fn gesture_swipe_begin(mut data: *mut libc::c_void,
                                         mut zwp_pointer_gesture_swipe_v1:
                                             *mut zwp_pointer_gesture_swipe_v1,
                                         mut serial: uint32_t,
                                         mut time: uint32_t,
                                         mut surface: *mut wl_surface,
                                         mut fingers: uint32_t) {
    let mut input_device: *mut wlr_wl_input_device =
        data as *mut wlr_wl_input_device;
    let mut wlr_dev: *mut wlr_input_device =
        &mut (*input_device).wlr_input_device;
    let mut wlr_event: wlr_event_pointer_swipe_begin =
        {
            let mut init =
                wlr_event_pointer_swipe_begin{device: wlr_dev,
                                              time_msec: time,
                                              fingers: fingers,};
            init
        };
    (*input_device).fingers = fingers;
    wlr_signal_emit_safe(&mut (*(*wlr_dev).c2rust_unnamed.pointer).events.swipe_begin,
                         &mut wlr_event as *mut wlr_event_pointer_swipe_begin
                             as *mut libc::c_void);
}
unsafe extern "C" fn gesture_swipe_update(mut data: *mut libc::c_void,
                                          mut zwp_pointer_gesture_swipe_v1:
                                              *mut zwp_pointer_gesture_swipe_v1,
                                          mut time: uint32_t,
                                          mut dx: wl_fixed_t,
                                          mut dy: wl_fixed_t) {
    let mut input_device: *mut wlr_wl_input_device =
        data as *mut wlr_wl_input_device;
    let mut wlr_dev: *mut wlr_input_device =
        &mut (*input_device).wlr_input_device;
    let mut wlr_event: wlr_event_pointer_swipe_update =
        {
            let mut init =
                wlr_event_pointer_swipe_update{device: wlr_dev,
                                               time_msec: time,
                                               fingers:
                                                   (*input_device).fingers,
                                               dx: wl_fixed_to_double(dx),
                                               dy: wl_fixed_to_double(dy),};
            init
        };
    wlr_signal_emit_safe(&mut (*(*wlr_dev).c2rust_unnamed.pointer).events.swipe_update,
                         &mut wlr_event as *mut wlr_event_pointer_swipe_update
                             as *mut libc::c_void);
}
unsafe extern "C" fn gesture_swipe_end(mut data: *mut libc::c_void,
                                       mut zwp_pointer_gesture_swipe_v1:
                                           *mut zwp_pointer_gesture_swipe_v1,
                                       mut serial: uint32_t,
                                       mut time: uint32_t,
                                       mut cancelled: int32_t) {
    let mut input_device: *mut wlr_wl_input_device =
        data as *mut wlr_wl_input_device;
    let mut wlr_dev: *mut wlr_input_device =
        &mut (*input_device).wlr_input_device;
    let mut wlr_event: wlr_event_pointer_swipe_end =
        {
            let mut init =
                wlr_event_pointer_swipe_end{device: wlr_dev,
                                            time_msec: time,
                                            cancelled: cancelled != 0,};
            init
        };
    wlr_signal_emit_safe(&mut (*(*wlr_dev).c2rust_unnamed.pointer).events.swipe_end,
                         &mut wlr_event as *mut wlr_event_pointer_swipe_end as
                             *mut libc::c_void);
}
static mut gesture_swipe_impl: zwp_pointer_gesture_swipe_v1_listener =
    {
    
        {
            let mut init =
                zwp_pointer_gesture_swipe_v1_listener{begin:
                                                          Some(gesture_swipe_begin
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut libc::c_void,
                                                                                        _:
                                                                                            *mut zwp_pointer_gesture_swipe_v1,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            *mut wl_surface,
                                                                                        _:
                                                                                            uint32_t)
                                                                       -> ()),
                                                      update:
                                                          Some(gesture_swipe_update
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut libc::c_void,
                                                                                        _:
                                                                                            *mut zwp_pointer_gesture_swipe_v1,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            wl_fixed_t,
                                                                                        _:
                                                                                            wl_fixed_t)
                                                                       -> ()),
                                                      end:
                                                          Some(gesture_swipe_end
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut libc::c_void,
                                                                                        _:
                                                                                            *mut zwp_pointer_gesture_swipe_v1,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            int32_t)
                                                                       ->
                                                                           ()),};
            init
        }
};
unsafe extern "C" fn gesture_pinch_begin(mut data: *mut libc::c_void,
                                         mut zwp_pointer_gesture_pinch_v1:
                                             *mut zwp_pointer_gesture_pinch_v1,
                                         mut serial: uint32_t,
                                         mut time: uint32_t,
                                         mut surface: *mut wl_surface,
                                         mut fingers: uint32_t) {
    let mut input_device: *mut wlr_wl_input_device =
        data as *mut wlr_wl_input_device;
    let mut wlr_dev: *mut wlr_input_device =
        &mut (*input_device).wlr_input_device;
    let mut wlr_event: wlr_event_pointer_pinch_begin =
        {
            let mut init =
                wlr_event_pointer_pinch_begin{device: wlr_dev,
                                              time_msec: time,
                                              fingers: fingers,};
            init
        };
    (*input_device).fingers = fingers;
    wlr_signal_emit_safe(&mut (*(*wlr_dev).c2rust_unnamed.pointer).events.pinch_begin,
                         &mut wlr_event as *mut wlr_event_pointer_pinch_begin
                             as *mut libc::c_void);
}
unsafe extern "C" fn gesture_pinch_update(mut data: *mut libc::c_void,
                                          mut zwp_pointer_gesture_pinch_v1:
                                              *mut zwp_pointer_gesture_pinch_v1,
                                          mut time: uint32_t,
                                          mut dx: wl_fixed_t,
                                          mut dy: wl_fixed_t,
                                          mut scale: wl_fixed_t,
                                          mut rotation: wl_fixed_t) {
    let mut input_device: *mut wlr_wl_input_device =
        data as *mut wlr_wl_input_device;
    let mut wlr_dev: *mut wlr_input_device =
        &mut (*input_device).wlr_input_device;
    let mut wlr_event: wlr_event_pointer_pinch_update =
        {
            let mut init =
                wlr_event_pointer_pinch_update{device: wlr_dev,
                                               time_msec: time,
                                               fingers:
                                                   (*input_device).fingers,
                                               dx: wl_fixed_to_double(dx),
                                               dy: wl_fixed_to_double(dy),
                                               scale:
                                                   wl_fixed_to_double(scale),
                                               rotation:
                                                   wl_fixed_to_double(rotation),};
            init
        };
    wlr_signal_emit_safe(&mut (*(*wlr_dev).c2rust_unnamed.pointer).events.pinch_update,
                         &mut wlr_event as *mut wlr_event_pointer_pinch_update
                             as *mut libc::c_void);
}
unsafe extern "C" fn gesture_pinch_end(mut data: *mut libc::c_void,
                                       mut zwp_pointer_gesture_pinch_v1:
                                           *mut zwp_pointer_gesture_pinch_v1,
                                       mut serial: uint32_t,
                                       mut time: uint32_t,
                                       mut cancelled: int32_t) {
    let mut input_device: *mut wlr_wl_input_device =
        data as *mut wlr_wl_input_device;
    let mut wlr_dev: *mut wlr_input_device =
        &mut (*input_device).wlr_input_device;
    let mut wlr_event: wlr_event_pointer_pinch_end =
        {
            let mut init =
                wlr_event_pointer_pinch_end{device: wlr_dev,
                                            time_msec: time,
                                            cancelled: cancelled != 0,};
            init
        };
    wlr_signal_emit_safe(&mut (*(*wlr_dev).c2rust_unnamed.pointer).events.pinch_end,
                         &mut wlr_event as *mut wlr_event_pointer_pinch_end as
                             *mut libc::c_void);
}
static mut gesture_pinch_impl: zwp_pointer_gesture_pinch_v1_listener =
    {
    
        {
            let mut init =
                zwp_pointer_gesture_pinch_v1_listener{begin:
                                                          Some(gesture_pinch_begin
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut libc::c_void,
                                                                                        _:
                                                                                            *mut zwp_pointer_gesture_pinch_v1,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            *mut wl_surface,
                                                                                        _:
                                                                                            uint32_t)
                                                                       -> ()),
                                                      update:
                                                          Some(gesture_pinch_update
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut libc::c_void,
                                                                                        _:
                                                                                            *mut zwp_pointer_gesture_pinch_v1,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            wl_fixed_t,
                                                                                        _:
                                                                                            wl_fixed_t,
                                                                                        _:
                                                                                            wl_fixed_t,
                                                                                        _:
                                                                                            wl_fixed_t)
                                                                       -> ()),
                                                      end:
                                                          Some(gesture_pinch_end
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut libc::c_void,
                                                                                        _:
                                                                                            *mut zwp_pointer_gesture_pinch_v1,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            uint32_t,
                                                                                        _:
                                                                                            int32_t)
                                                                       ->
                                                                           ()),};
            init
        }
};
unsafe extern "C" fn relative_pointer_handle_relative_motion(mut data:
                                                                 *mut libc::c_void,
                                                             mut relative_pointer:
                                                                 *mut zwp_relative_pointer_v1,
                                                             mut utime_hi:
                                                                 uint32_t,
                                                             mut utime_lo:
                                                                 uint32_t,
                                                             mut dx:
                                                                 wl_fixed_t,
                                                             mut dy:
                                                                 wl_fixed_t,
                                                             mut dx_unaccel:
                                                                 wl_fixed_t,
                                                             mut dy_unaccel:
                                                                 wl_fixed_t) {
    let mut input_device: *mut wlr_wl_input_device =
        data as *mut wlr_wl_input_device;
    let mut wlr_dev: *mut wlr_input_device =
        &mut (*input_device).wlr_input_device;
    let mut time_usec: uint64_t =
        (utime_hi as uint64_t) << 32i32 | utime_lo as libc::c_ulong;
    let mut wlr_event: wlr_event_pointer_motion =
        {
            let mut init =
                wlr_event_pointer_motion{device: wlr_dev,
                                         time_msec:
                                             time_usec.wrapping_div(1000i32 as
                                                                        libc::c_ulong)
                                                 as uint32_t,
                                         delta_x: wl_fixed_to_double(dx),
                                         delta_y: wl_fixed_to_double(dy),
                                         unaccel_dx:
                                             wl_fixed_to_double(dx_unaccel),
                                         unaccel_dy:
                                             wl_fixed_to_double(dy_unaccel),};
            init
        };
    wlr_signal_emit_safe(&mut (*(*wlr_dev).c2rust_unnamed.pointer).events.motion,
                         &mut wlr_event as *mut wlr_event_pointer_motion as
                             *mut libc::c_void);
}
static mut relative_pointer_listener: zwp_relative_pointer_v1_listener =
    {
    
        {
            let mut init =
                zwp_relative_pointer_v1_listener{relative_motion:
                                                     Some(relative_pointer_handle_relative_motion
                                                              as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut libc::c_void,
                                                                                   _:
                                                                                       *mut zwp_relative_pointer_v1,
                                                                                   _:
                                                                                       uint32_t,
                                                                                   _:
                                                                                       uint32_t,
                                                                                   _:
                                                                                       wl_fixed_t,
                                                                                   _:
                                                                                       wl_fixed_t,
                                                                                   _:
                                                                                       wl_fixed_t,
                                                                                   _:
                                                                                       wl_fixed_t)
                                                                  -> ()),};
            init
        }
};
unsafe extern "C" fn pointer_handle_output_destroy(mut listener:
                                                       *mut wl_listener,
                                                   mut data:
                                                       *mut libc::c_void) {
    let mut pointer: *mut wlr_wl_pointer =
        (listener as *mut libc::c_char).offset(-248) as *mut wlr_wl_pointer;
    wlr_input_device_destroy(&mut (*(*pointer).input_device).wlr_input_device);
}
#[no_mangle]
pub unsafe extern "C" fn create_wl_pointer(mut wl_pointer: *mut wl_pointer,
                                           mut output: *mut wlr_wl_output) {
    let mut backend: *mut wlr_wl_backend = (*output).backend;
    let mut wlr_dev: *mut wlr_input_device = 0 as *mut wlr_input_device;
    wlr_dev =
        ((*(*output).backend).devices.next as *mut libc::c_char).offset(-88)
            as *mut wlr_input_device;
    while &mut (*wlr_dev).link as *mut wl_list !=
              &mut (*(*output).backend).devices as *mut wl_list {
        if !((*wlr_dev).type_0 as libc::c_uint !=
                 WLR_INPUT_DEVICE_POINTER as libc::c_int as libc::c_uint) {
            let mut pointer: *mut wlr_wl_pointer =
                pointer_get_wl((*wlr_dev).c2rust_unnamed.pointer);
            if (*pointer).output == output { return }
        }
        wlr_dev =
            ((*wlr_dev).link.next as *mut libc::c_char).offset(-88) as
                *mut wlr_input_device
    }
    let mut pointer_0: *mut wlr_wl_pointer =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_wl_pointer>() as libc::c_ulong) as
            *mut wlr_wl_pointer;
    if pointer_0.is_null() {
        _wlr_log(WLR_ERROR,
                 b"[%s:%d] Allocation failed\x00" as *const u8 as
                     *const libc::c_char,
                 b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                     *const libc::c_char, 498i32);
        return
    }
    (*pointer_0).wl_pointer = wl_pointer;
    (*pointer_0).output = output;
    wl_signal_add(&mut (*output).wlr_output.events.destroy,
                  &mut (*pointer_0).output_destroy);
    (*pointer_0).output_destroy.notify =
        Some(pointer_handle_output_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    let mut dev: *mut wlr_wl_input_device =
        create_wl_input_device(backend, WLR_INPUT_DEVICE_POINTER);
    if dev.is_null() {
        free(pointer_0 as *mut libc::c_void);
        _wlr_log(WLR_ERROR,
                 b"[%s:%d] Allocation failed\x00" as *const u8 as
                     *const libc::c_char,
                 b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                     *const libc::c_char, 511i32);
        return
    }
    (*pointer_0).input_device = dev;
    wlr_dev = &mut (*dev).wlr_input_device;
    (*wlr_dev).c2rust_unnamed.pointer = &mut (*pointer_0).wlr_pointer;
    (*wlr_dev).output_name = strdup((*output).wlr_output.name.as_mut_ptr());
    wlr_pointer_init((*wlr_dev).c2rust_unnamed.pointer, &mut pointer_impl);
    if !(*backend).zwp_pointer_gestures_v1.is_null() {
        (*pointer_0).gesture_swipe =
            zwp_pointer_gestures_v1_get_swipe_gesture((*backend).zwp_pointer_gestures_v1,
                                                      wl_pointer);
        zwp_pointer_gesture_swipe_v1_add_listener((*pointer_0).gesture_swipe,
                                                  &mut gesture_swipe_impl,
                                                  dev as *mut libc::c_void);
        (*pointer_0).gesture_pinch =
            zwp_pointer_gestures_v1_get_pinch_gesture((*backend).zwp_pointer_gestures_v1,
                                                      wl_pointer);
        zwp_pointer_gesture_pinch_v1_add_listener((*pointer_0).gesture_pinch,
                                                  &mut gesture_pinch_impl,
                                                  dev as *mut libc::c_void);
    }
    if !(*backend).zwp_relative_pointer_manager_v1.is_null() {
        (*pointer_0).relative_pointer =
            zwp_relative_pointer_manager_v1_get_relative_pointer((*backend).zwp_relative_pointer_manager_v1,
                                                                 wl_pointer);
        zwp_relative_pointer_v1_add_listener((*pointer_0).relative_pointer,
                                             &relative_pointer_listener,
                                             dev as *mut libc::c_void);
    }
    wlr_signal_emit_safe(&mut (*backend).backend.events.new_input,
                         wlr_dev as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn create_wl_keyboard(mut wl_keyboard: *mut wl_keyboard,
                                            mut wl: *mut wlr_wl_backend) {
    let mut dev: *mut wlr_wl_input_device =
        create_wl_input_device(wl, WLR_INPUT_DEVICE_KEYBOARD);
    if dev.is_null() { return }
    let mut wlr_dev: *mut wlr_input_device = &mut (*dev).wlr_input_device;
    (*wlr_dev).c2rust_unnamed.keyboard =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_keyboard>() as libc::c_ulong) as
            *mut wlr_keyboard;
    if (*wlr_dev).c2rust_unnamed.keyboard.is_null() {
        _wlr_log(WLR_ERROR,
                 b"[%s:%d] Allocation failed: %s\x00" as *const u8 as
                     *const libc::c_char,
                 b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                     *const libc::c_char, 552i32,
                 strerror(*__errno_location()));
        free(dev as *mut libc::c_void);
        return
    }
    wlr_keyboard_init((*wlr_dev).c2rust_unnamed.keyboard,
                      0 as *const wlr_keyboard_impl);
    wl_keyboard_add_listener(wl_keyboard, &mut keyboard_listener,
                             wlr_dev as *mut libc::c_void);
    (*dev).resource = wl_keyboard as *mut libc::c_void;
    wlr_signal_emit_safe(&mut (*wl).backend.events.new_input,
                         wlr_dev as *mut libc::c_void);
}
unsafe extern "C" fn seat_handle_capabilities(mut data: *mut libc::c_void,
                                              mut wl_seat: *mut wl_seat,
                                              mut caps: wl_seat_capability) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    if (*backend).seat == wl_seat {
    } else {
        __assert_fail(b"backend->seat == wl_seat\x00" as *const u8 as
                          *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 566i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 81],
                                                &[libc::c_char; 81]>(b"void seat_handle_capabilities(void *, struct wl_seat *, enum wl_seat_capability)\x00")).as_ptr());
    };
    if caps as libc::c_uint &
           WL_SEAT_CAPABILITY_POINTER as libc::c_int as libc::c_uint != 0 {
        _wlr_log(WLR_DEBUG,
                 b"[%s:%d] seat %p offered pointer\x00" as *const u8 as
                     *const libc::c_char,
                 b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                     *const libc::c_char, 569i32,
                 wl_seat as *mut libc::c_void);
        let mut wl_pointer: *mut wl_pointer = wl_seat_get_pointer(wl_seat);
        (*backend).pointer = wl_pointer;
        let mut output: *mut wlr_wl_output = 0 as *mut wlr_wl_output;
        output =
            ((*backend).outputs.next as *mut libc::c_char).offset(-600) as
                *mut wlr_wl_output;
        while &mut (*output).link as *mut wl_list !=
                  &mut (*backend).outputs as *mut wl_list {
            create_wl_pointer(wl_pointer, output);
            output =
                ((*output).link.next as *mut libc::c_char).offset(-600) as
                    *mut wlr_wl_output
        }
        wl_pointer_add_listener(wl_pointer, &pointer_listener,
                                backend as *mut libc::c_void);
    }
    if caps as libc::c_uint &
           WL_SEAT_CAPABILITY_KEYBOARD as libc::c_int as libc::c_uint != 0 {
        _wlr_log(WLR_DEBUG,
                 b"[%s:%d] seat %p offered keyboard\x00" as *const u8 as
                     *const libc::c_char,
                 b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                     *const libc::c_char, 582i32,
                 wl_seat as *mut libc::c_void);
        let mut wl_keyboard: *mut wl_keyboard = wl_seat_get_keyboard(wl_seat);
        (*backend).keyboard = wl_keyboard;
        if (*backend).started { create_wl_keyboard(wl_keyboard, backend); }
    };
}
unsafe extern "C" fn seat_handle_name(mut data: *mut libc::c_void,
                                      mut wl_seat: *mut wl_seat,
                                      mut name: *const libc::c_char) {
    let mut backend: *mut wlr_wl_backend = data as *mut wlr_wl_backend;
    if (*backend).seat == wl_seat {
    } else {
        __assert_fail(b"backend->seat == wl_seat\x00" as *const u8 as
                          *const libc::c_char,
                      b"../backend/wayland/wl_seat.c\x00" as *const u8 as
                          *const libc::c_char, 596i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 62],
                                                &[libc::c_char; 62]>(b"void seat_handle_name(void *, struct wl_seat *, const char *)\x00")).as_ptr());
    };
    // Do we need to check if seatName was previously set for name change?
    free((*backend).seat_name as *mut libc::c_void);
    (*backend).seat_name = strdup(name);
}
#[no_mangle]
pub static mut seat_listener: wl_seat_listener =
    unsafe {
        {
            let mut init =
                wl_seat_listener{capabilities:
                                     ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                             *mut libc::c_void,
                                                                                         _:
                                                                                             *mut wl_seat,
                                                                                         _:
                                                                                             wl_seat_capability)
                                                                        ->
                                                                            ()>,
                                                             Option<unsafe extern "C" fn(_:
                                                                                             *mut libc::c_void,
                                                                                         _:
                                                                                             *mut wl_seat,
                                                                                         _:
                                                                                             uint32_t)
                                                                        ->
                                                                            ()>>(Some(seat_handle_capabilities
                                                                                          as
                                                                                          unsafe extern "C" fn(_:
                                                                                                                   *mut libc::c_void,
                                                                                                               _:
                                                                                                                   *mut wl_seat,
                                                                                                               _:
                                                                                                                   wl_seat_capability)
                                                                                              ->
                                                                                                  ())),
                                 name:
                                     Some(seat_handle_name as
                                              unsafe extern "C" fn(_:
                                                                       *mut libc::c_void,
                                                                   _:
                                                                       *mut wl_seat,
                                                                   _:
                                                                       *const libc::c_char)
                                                  -> ()),};
            init
        }
    };
/* *
 * Creates a new wlr_wl_backend. This backend will be created with no outputs;
 * you must use wlr_wl_output_create to add them.
 *
 * The `remote` argument is the name of the host compositor wayland socket. Set
 * to NULL for the default behaviour (WAYLAND_DISPLAY env variable or wayland-0
 * default)
 */
/* *
 * Returns the remote wl_display used by the Wayland backend.
 */
/* *
 * Adds a new output to this backend. You may remove outputs by destroying them.
 * Note that if called before initializing the backend, this will return NULL
 * and your outputs will be created during initialization (and given to you via
 * the output_add signal).
 */
/* *
 * True if the given backend is a wlr_wl_backend.
 */
/* *
 * True if the given input device is a wlr_wl_input_device.
 */
/* *
 * True if the given output is a wlr_wl_output.
 */
/* *
 * Sets the title of a wlr_output which is a Wayland window.
 */
/* *
 * Returns the remote wl_surface used by the Wayland output.
 */
/* *
 * Returns the remote wl_seat for a Wayland input device.
 */
#[no_mangle]
pub unsafe extern "C" fn wlr_wl_input_device_get_seat(mut wlr_dev:
                                                          *mut wlr_input_device)
 -> *mut wl_seat {
    let mut dev: *mut wlr_wl_input_device =
        get_wl_input_device_from_input_device(wlr_dev);
    return (*(*dev).backend).seat;
}
