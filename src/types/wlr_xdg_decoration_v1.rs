use libc;
extern "C" {
    pub type wl_event_source;
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_backend;
    pub type wlr_output_impl;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wlr_xdg_surface_schedule_configure(surface: *mut wlr_xdg_surface)
     -> uint32_t;
    #[no_mangle]
    fn wlr_xdg_surface_from_toplevel_resource(resource: *mut wl_resource)
     -> *mut wlr_xdg_surface;
    #[no_mangle]
    fn wlr_surface_has_buffer(surface: *mut wlr_surface) -> bool;
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_resource_post_error(resource: *mut wl_resource, code: uint32_t,
                              msg: *const libc::c_char, _: ...);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    /*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
    // Will log all messages less than or equal to `verbosity`
// If `callback` is NULL, wlr will use its default logger.
// The function can be called multiple times to update the verbosity or
// callback function.
    // Returns the log verbosity provided to wlr_log_init
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
    /* *
 * @page page_iface_zxdg_decoration_manager_v1 zxdg_decoration_manager_v1
 * @section page_iface_zxdg_decoration_manager_v1_desc Description
 *
 * This interface allows a compositor to announce support for server-side
 * decorations.
 *
 * A window decoration is a set of window controls as deemed appropriate by
 * the party managing them, such as user interface components used to move,
 * resize and change a window's state.
 *
 * A client can use this protocol to request being decorated by a supporting
 * compositor.
 *
 * If compositor and client do not negotiate the use of a server-side
 * decoration using this protocol, clients continue to self-decorate as they
 * see fit.
 *
 * Warning! The protocol described in this file is experimental and
 * backward incompatible changes may be made. Backward compatible changes
 * may be added together with the corresponding interface version bump.
 * Backward incompatible changes are done by bumping the version number in
 * the protocol and interface names and resetting the interface version.
 * Once the protocol is to be declared stable, the 'z' prefix and the
 * version number in the protocol and interface names are removed and the
 * interface version number is reset.
 * @section page_iface_zxdg_decoration_manager_v1_api API
 * See @ref iface_zxdg_decoration_manager_v1.
 */
/* *
 * @defgroup iface_zxdg_decoration_manager_v1 The zxdg_decoration_manager_v1 interface
 *
 * This interface allows a compositor to announce support for server-side
 * decorations.
 *
 * A window decoration is a set of window controls as deemed appropriate by
 * the party managing them, such as user interface components used to move,
 * resize and change a window's state.
 *
 * A client can use this protocol to request being decorated by a supporting
 * compositor.
 *
 * If compositor and client do not negotiate the use of a server-side
 * decoration using this protocol, clients continue to self-decorate as they
 * see fit.
 *
 * Warning! The protocol described in this file is experimental and
 * backward incompatible changes may be made. Backward compatible changes
 * may be added together with the corresponding interface version bump.
 * Backward incompatible changes are done by bumping the version number in
 * the protocol and interface names and resetting the interface version.
 * Once the protocol is to be declared stable, the 'z' prefix and the
 * version number in the protocol and interface names are removed and the
 * interface version number is reset.
 */
    #[no_mangle]
    static zxdg_decoration_manager_v1_interface: wl_interface;
    /* *
 * @page page_iface_zxdg_toplevel_decoration_v1 zxdg_toplevel_decoration_v1
 * @section page_iface_zxdg_toplevel_decoration_v1_desc Description
 *
 * The decoration object allows the compositor to toggle server-side window
 * decorations for a toplevel surface. The client can request to switch to
 * another mode.
 *
 * The xdg_toplevel_decoration object must be destroyed before its
 * xdg_toplevel.
 * @section page_iface_zxdg_toplevel_decoration_v1_api API
 * See @ref iface_zxdg_toplevel_decoration_v1.
 */
/* *
 * @defgroup iface_zxdg_toplevel_decoration_v1 The zxdg_toplevel_decoration_v1 interface
 *
 * The decoration object allows the compositor to toggle server-side window
 * decorations for a toplevel surface. The client can request to switch to
 * another mode.
 *
 * The xdg_toplevel_decoration object must be destroyed before its
 * xdg_toplevel.
 */
    #[no_mangle]
    static zxdg_toplevel_decoration_v1_interface: wl_interface;
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
pub type wl_output_subpixel = libc::c_uint;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_BGR: wl_output_subpixel = 5;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_RGB: wl_output_subpixel = 4;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR: wl_output_subpixel = 3;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB: wl_output_subpixel = 2;
pub const WL_OUTPUT_SUBPIXEL_NONE: wl_output_subpixel = 1;
pub const WL_OUTPUT_SUBPIXEL_UNKNOWN: wl_output_subpixel = 0;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_box {
    pub x: libc::c_int,
    pub y: libc::c_int,
    pub width: libc::c_int,
    pub height: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_0,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output_mode {
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub preferred: bool,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output_cursor {
    pub output: *mut wlr_output,
    pub x: libc::c_double,
    pub y: libc::c_double,
    pub enabled: bool,
    pub visible: bool,
    pub width: uint32_t,
    pub height: uint32_t,
    pub hotspot_x: int32_t,
    pub hotspot_y: int32_t,
    pub link: wl_list,
    pub texture: *mut wlr_texture,
    pub surface: *mut wlr_surface,
    pub surface_commit: wl_listener,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_1,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// mHz
// only when using a software cursor without a surface
// only when using a cursor surface
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_2,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output {
    pub impl_0: *const wlr_output_impl,
    pub backend: *mut wlr_backend,
    pub display: *mut wl_display,
    pub global: *mut wl_global,
    pub resources: wl_list,
    pub name: [libc::c_char; 24],
    pub make: [libc::c_char; 56],
    pub model: [libc::c_char; 16],
    pub serial: [libc::c_char; 16],
    pub phys_width: int32_t,
    pub phys_height: int32_t,
    pub modes: wl_list,
    pub current_mode: *mut wlr_output_mode,
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub enabled: bool,
    pub scale: libc::c_float,
    pub subpixel: wl_output_subpixel,
    pub transform: wl_output_transform,
    pub needs_frame: bool,
    pub damage: pixman_region32_t,
    pub frame_pending: bool,
    pub transform_matrix: [libc::c_float; 9],
    pub pending: wlr_output_state,
    pub commit_seq: uint32_t,
    pub events: C2RustUnnamed_3,
    pub idle_frame: *mut wl_event_source,
    pub idle_done: *mut wl_event_source,
    pub attach_render_locks: libc::c_int,
    pub cursors: wl_list,
    pub hardware_cursor: *mut wlr_output_cursor,
    pub software_cursor_locks: libc::c_int,
    pub display_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub frame: wl_signal,
    pub needs_frame: wl_signal,
    pub precommit: wl_signal,
    pub commit: wl_signal,
    pub present: wl_signal,
    pub enable: wl_signal,
    pub mode: wl_signal,
    pub scale: wl_signal,
    pub transform: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_output_state {
    pub committed: uint32_t,
    pub damage: pixman_region32_t,
    pub buffer_type: wlr_output_state_buffer_type,
    pub buffer: *mut wlr_buffer,
}
pub type wlr_output_state_buffer_type = libc::c_uint;
pub const WLR_OUTPUT_STATE_BUFFER_SCANOUT: wlr_output_state_buffer_type = 1;
pub const WLR_OUTPUT_STATE_BUFFER_RENDER: wlr_output_state_buffer_type = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_4,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_5,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_6,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_7,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_8,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
pub type xdg_positioner_anchor = libc::c_uint;
pub const XDG_POSITIONER_ANCHOR_BOTTOM_RIGHT: xdg_positioner_anchor = 8;
pub const XDG_POSITIONER_ANCHOR_TOP_RIGHT: xdg_positioner_anchor = 7;
pub const XDG_POSITIONER_ANCHOR_BOTTOM_LEFT: xdg_positioner_anchor = 6;
pub const XDG_POSITIONER_ANCHOR_TOP_LEFT: xdg_positioner_anchor = 5;
pub const XDG_POSITIONER_ANCHOR_RIGHT: xdg_positioner_anchor = 4;
pub const XDG_POSITIONER_ANCHOR_LEFT: xdg_positioner_anchor = 3;
pub const XDG_POSITIONER_ANCHOR_BOTTOM: xdg_positioner_anchor = 2;
pub const XDG_POSITIONER_ANCHOR_TOP: xdg_positioner_anchor = 1;
pub const XDG_POSITIONER_ANCHOR_NONE: xdg_positioner_anchor = 0;
pub type xdg_positioner_gravity = libc::c_uint;
pub const XDG_POSITIONER_GRAVITY_BOTTOM_RIGHT: xdg_positioner_gravity = 8;
pub const XDG_POSITIONER_GRAVITY_TOP_RIGHT: xdg_positioner_gravity = 7;
pub const XDG_POSITIONER_GRAVITY_BOTTOM_LEFT: xdg_positioner_gravity = 6;
pub const XDG_POSITIONER_GRAVITY_TOP_LEFT: xdg_positioner_gravity = 5;
pub const XDG_POSITIONER_GRAVITY_RIGHT: xdg_positioner_gravity = 4;
pub const XDG_POSITIONER_GRAVITY_LEFT: xdg_positioner_gravity = 3;
pub const XDG_POSITIONER_GRAVITY_BOTTOM: xdg_positioner_gravity = 2;
pub const XDG_POSITIONER_GRAVITY_TOP: xdg_positioner_gravity = 1;
pub const XDG_POSITIONER_GRAVITY_NONE: xdg_positioner_gravity = 0;
pub type xdg_positioner_constraint_adjustment = libc::c_uint;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_Y:
          xdg_positioner_constraint_adjustment =
    32;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_RESIZE_X:
          xdg_positioner_constraint_adjustment =
    16;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_Y:
          xdg_positioner_constraint_adjustment =
    8;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_FLIP_X:
          xdg_positioner_constraint_adjustment =
    4;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_Y:
          xdg_positioner_constraint_adjustment =
    2;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_SLIDE_X:
          xdg_positioner_constraint_adjustment =
    1;
pub const XDG_POSITIONER_CONSTRAINT_ADJUSTMENT_NONE:
          xdg_positioner_constraint_adjustment =
    0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_shell {
    pub global: *mut wl_global,
    pub clients: wl_list,
    pub popup_grabs: wl_list,
    pub ping_timeout: uint32_t,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_9,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub new_surface: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_client {
    pub shell: *mut wlr_xdg_shell,
    pub resource: *mut wl_resource,
    pub client: *mut wl_client,
    pub surfaces: wl_list,
    pub link: wl_list,
    pub ping_serial: uint32_t,
    pub ping_timer: *mut wl_event_source,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_positioner {
    pub resource: *mut wl_resource,
    pub anchor_rect: wlr_box,
    pub anchor: xdg_positioner_anchor,
    pub gravity: xdg_positioner_gravity,
    pub constraint_adjustment: xdg_positioner_constraint_adjustment,
    pub size: C2RustUnnamed_11,
    pub offset: C2RustUnnamed_10,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub x: int32_t,
    pub y: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub width: int32_t,
    pub height: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_popup {
    pub base: *mut wlr_xdg_surface,
    pub link: wl_list,
    pub resource: *mut wl_resource,
    pub committed: bool,
    pub parent: *mut wlr_surface,
    pub seat: *mut wlr_seat,
    pub geometry: wlr_box,
    pub positioner: wlr_xdg_positioner,
    pub grab_link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_surface {
    pub client: *mut wlr_xdg_client,
    pub resource: *mut wl_resource,
    pub surface: *mut wlr_surface,
    pub link: wl_list,
    pub role: wlr_xdg_surface_role,
    pub c2rust_unnamed: C2RustUnnamed_13,
    pub popups: wl_list,
    pub added: bool,
    pub configured: bool,
    pub mapped: bool,
    pub configure_serial: uint32_t,
    pub configure_idle: *mut wl_event_source,
    pub configure_next_serial: uint32_t,
    pub configure_list: wl_list,
    pub has_next_geometry: bool,
    pub next_geometry: wlr_box,
    pub geometry: wlr_box,
    pub surface_destroy: wl_listener,
    pub surface_commit: wl_listener,
    pub events: C2RustUnnamed_12,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub destroy: wl_signal,
    pub ping_timeout: wl_signal,
    pub new_popup: wl_signal,
    pub map: wl_signal,
    pub unmap: wl_signal,
    pub configure: wl_signal,
    pub ack_configure: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr ( C )]
pub union C2RustUnnamed_13 {
    pub toplevel: *mut wlr_xdg_toplevel,
    pub popup: *mut wlr_xdg_popup,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_toplevel {
    pub resource: *mut wl_resource,
    pub base: *mut wlr_xdg_surface,
    pub added: bool,
    pub parent: *mut wlr_xdg_surface,
    pub parent_unmap: wl_listener,
    pub client_pending: wlr_xdg_toplevel_state,
    pub server_pending: wlr_xdg_toplevel_state,
    pub current: wlr_xdg_toplevel_state,
    pub title: *mut libc::c_char,
    pub app_id: *mut libc::c_char,
    pub events: C2RustUnnamed_14,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_14 {
    pub request_maximize: wl_signal,
    pub request_fullscreen: wl_signal,
    pub request_minimize: wl_signal,
    pub request_move: wl_signal,
    pub request_resize: wl_signal,
    pub request_show_window_menu: wl_signal,
    pub set_parent: wl_signal,
    pub set_title: wl_signal,
    pub set_app_id: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_toplevel_state {
    pub maximized: bool,
    pub fullscreen: bool,
    pub resizing: bool,
    pub activated: bool,
    pub tiled: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub max_width: uint32_t,
    pub max_height: uint32_t,
    pub min_width: uint32_t,
    pub min_height: uint32_t,
    pub fullscreen_output: *mut wlr_output,
    pub fullscreen_output_destroy: wl_listener,
}
pub type wlr_xdg_surface_role = libc::c_uint;
pub const WLR_XDG_SURFACE_ROLE_POPUP: wlr_xdg_surface_role = 2;
pub const WLR_XDG_SURFACE_ROLE_TOPLEVEL: wlr_xdg_surface_role = 1;
pub const WLR_XDG_SURFACE_ROLE_NONE: wlr_xdg_surface_role = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_surface_configure {
    pub surface: *mut wlr_xdg_surface,
    pub link: wl_list,
    pub serial: uint32_t,
    pub toplevel_state: *mut wlr_xdg_toplevel_state,
}
pub type wlr_xdg_toplevel_decoration_v1_mode = libc::c_uint;
pub const WLR_XDG_TOPLEVEL_DECORATION_V1_MODE_SERVER_SIDE:
          wlr_xdg_toplevel_decoration_v1_mode =
    2;
pub const WLR_XDG_TOPLEVEL_DECORATION_V1_MODE_CLIENT_SIDE:
          wlr_xdg_toplevel_decoration_v1_mode =
    1;
pub const WLR_XDG_TOPLEVEL_DECORATION_V1_MODE_NONE:
          wlr_xdg_toplevel_decoration_v1_mode =
    0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_decoration_manager_v1 {
    pub global: *mut wl_global,
    pub decorations: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_15,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_15 {
    pub new_toplevel_decoration: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_toplevel_decoration_v1_configure {
    pub link: wl_list,
    pub surface_configure: *mut wlr_xdg_surface_configure,
    pub mode: wlr_xdg_toplevel_decoration_v1_mode,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_xdg_toplevel_decoration_v1 {
    pub resource: *mut wl_resource,
    pub surface: *mut wlr_xdg_surface,
    pub manager: *mut wlr_xdg_decoration_manager_v1,
    pub link: wl_list,
    pub added: bool,
    pub current_mode: wlr_xdg_toplevel_decoration_v1_mode,
    pub client_pending_mode: wlr_xdg_toplevel_decoration_v1_mode,
    pub server_pending_mode: wlr_xdg_toplevel_decoration_v1_mode,
    pub configure_list: wl_list,
    pub events: C2RustUnnamed_16,
    pub surface_destroy: wl_listener,
    pub surface_configure: wl_listener,
    pub surface_ack_configure: wl_listener,
    pub surface_commit: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_16 {
    pub destroy: wl_signal,
    pub request_mode: wl_signal,
}
/* *
 * @ingroup iface_zxdg_decoration_manager_v1
 * @struct zxdg_decoration_manager_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zxdg_decoration_manager_v1_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub get_toplevel_decoration: Option<unsafe extern "C" fn(_:
                                                                 *mut wl_client,
                                                             _:
                                                                 *mut wl_resource,
                                                             _: uint32_t,
                                                             _:
                                                                 *mut wl_resource)
                                            -> ()>,
}
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
/* ZXDG_TOPLEVEL_DECORATION_V1_MODE_ENUM */
/* *
 * @ingroup iface_zxdg_toplevel_decoration_v1
 * @struct zxdg_toplevel_decoration_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zxdg_toplevel_decoration_v1_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub set_mode: Option<unsafe extern "C" fn(_: *mut wl_client,
                                              _: *mut wl_resource,
                                              _: uint32_t) -> ()>,
    pub unset_mode: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                _: *mut wl_resource) -> ()>,
}
/* ZXDG_TOPLEVEL_DECORATION_V1_ERROR_ENUM */
/* *
 * @ingroup iface_zxdg_toplevel_decoration_v1
 * window decoration modes
 *
 * These values describe window decoration modes.
 */
pub type zxdg_toplevel_decoration_v1_mode = libc::c_uint;
/* *
	 * server-side window decoration
	 */
pub const ZXDG_TOPLEVEL_DECORATION_V1_MODE_SERVER_SIDE:
          zxdg_toplevel_decoration_v1_mode =
    2;
/* *
	 * no server-side window decoration
	 */
pub const ZXDG_TOPLEVEL_DECORATION_V1_MODE_CLIENT_SIDE:
          zxdg_toplevel_decoration_v1_mode =
    1;
/* *
	 * xdg_toplevel has a buffer attached before configure
	 */
pub const ZXDG_TOPLEVEL_DECORATION_V1_ERROR_UNCONFIGURED_BUFFER:
          zxdg_toplevel_decoration_v1_error =
    0;
/* *
 * @ingroup iface_zxdg_decoration_manager_v1
 */
/* *
 * @ingroup iface_zxdg_decoration_manager_v1
 */
pub type zxdg_toplevel_decoration_v1_error = libc::c_uint;
/* *
	 * xdg_toplevel destroyed before the decoration object
	 */
pub const ZXDG_TOPLEVEL_DECORATION_V1_ERROR_ORPHANED:
          zxdg_toplevel_decoration_v1_error =
    2;
/* *
	 * xdg_toplevel already has a decoration object
	 */
pub const ZXDG_TOPLEVEL_DECORATION_V1_ERROR_ALREADY_CONSTRUCTED:
          zxdg_toplevel_decoration_v1_error =
    1;
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
/* *
 * @ingroup iface_zxdg_toplevel_decoration_v1
 */
/* *
 * @ingroup iface_zxdg_toplevel_decoration_v1
 */
/* *
 * @ingroup iface_zxdg_toplevel_decoration_v1
 */
/* *
 * @ingroup iface_zxdg_toplevel_decoration_v1
 */
/* *
 * @ingroup iface_zxdg_toplevel_decoration_v1
 * Sends an configure event to the client owning the resource.
 * @param resource_ The client's resource
 * @param mode the decoration mode
 */
#[inline]
unsafe extern "C" fn zxdg_toplevel_decoration_v1_send_configure(mut resource_:
                                                                    *mut wl_resource,
                                                                mut mode:
                                                                    uint32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, mode);
}
unsafe extern "C" fn toplevel_decoration_from_resource(mut resource:
                                                           *mut wl_resource)
 -> *mut wlr_xdg_toplevel_decoration_v1 {
    if wl_resource_instance_of(resource,
                               &zxdg_toplevel_decoration_v1_interface,
                               &toplevel_decoration_impl as
                                   *const zxdg_toplevel_decoration_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zxdg_toplevel_decoration_v1_interface, &toplevel_decoration_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_xdg_decoration_v1.c\x00" as *const u8 as
                          *const libc::c_char, 17i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 95],
                                                &[libc::c_char; 95]>(b"struct wlr_xdg_toplevel_decoration_v1 *toplevel_decoration_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_xdg_toplevel_decoration_v1;
}
unsafe extern "C" fn toplevel_decoration_handle_destroy(mut client:
                                                            *mut wl_client,
                                                        mut resource:
                                                            *mut wl_resource) {
    wl_resource_destroy(resource);
}
unsafe extern "C" fn toplevel_decoration_handle_set_mode(mut client:
                                                             *mut wl_client,
                                                         mut resource:
                                                             *mut wl_resource,
                                                         mut mode:
                                                             zxdg_toplevel_decoration_v1_mode) {
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        toplevel_decoration_from_resource(resource);
    (*decoration).client_pending_mode =
        mode as wlr_xdg_toplevel_decoration_v1_mode;
    wlr_signal_emit_safe(&mut (*decoration).events.request_mode,
                         decoration as *mut libc::c_void);
}
unsafe extern "C" fn toplevel_decoration_handle_unset_mode(mut client:
                                                               *mut wl_client,
                                                           mut resource:
                                                               *mut wl_resource) {
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        toplevel_decoration_from_resource(resource);
    (*decoration).client_pending_mode =
        WLR_XDG_TOPLEVEL_DECORATION_V1_MODE_NONE;
    wlr_signal_emit_safe(&mut (*decoration).events.request_mode,
                         decoration as *mut libc::c_void);
}
static mut toplevel_decoration_impl: zxdg_toplevel_decoration_v1_interface =
    unsafe {
        {
            let mut init =
                zxdg_toplevel_decoration_v1_interface{destroy:
                                                          Some(toplevel_decoration_handle_destroy
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut wl_client,
                                                                                        _:
                                                                                            *mut wl_resource)
                                                                       -> ()),
                                                      set_mode:
                                                          ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                  *mut wl_client,
                                                                                                              _:
                                                                                                                  *mut wl_resource,
                                                                                                              _:
                                                                                                                  zxdg_toplevel_decoration_v1_mode)
                                                                                             ->
                                                                                                 ()>,
                                                                                  Option<unsafe extern "C" fn(_:
                                                                                                                  *mut wl_client,
                                                                                                              _:
                                                                                                                  *mut wl_resource,
                                                                                                              _:
                                                                                                                  uint32_t)
                                                                                             ->
                                                                                                 ()>>(Some(toplevel_decoration_handle_set_mode
                                                                                                               as
                                                                                                               unsafe extern "C" fn(_:
                                                                                                                                        *mut wl_client,
                                                                                                                                    _:
                                                                                                                                        *mut wl_resource,
                                                                                                                                    _:
                                                                                                                                        zxdg_toplevel_decoration_v1_mode)
                                                                                                                   ->
                                                                                                                       ())),
                                                      unset_mode:
                                                          Some(toplevel_decoration_handle_unset_mode
                                                                   as
                                                                   unsafe extern "C" fn(_:
                                                                                            *mut wl_client,
                                                                                        _:
                                                                                            *mut wl_resource)
                                                                       ->
                                                                           ()),};
            init
        }
    };
#[no_mangle]
pub unsafe extern "C" fn wlr_xdg_toplevel_decoration_v1_set_mode(mut decoration:
                                                                     *mut wlr_xdg_toplevel_decoration_v1,
                                                                 mut mode:
                                                                     wlr_xdg_toplevel_decoration_v1_mode)
 -> uint32_t {
    if mode as libc::c_uint !=
           WLR_XDG_TOPLEVEL_DECORATION_V1_MODE_NONE as libc::c_int as
               libc::c_uint {
    } else {
        __assert_fail(b"mode != WLR_XDG_TOPLEVEL_DECORATION_V1_MODE_NONE\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_xdg_decoration_v1.c\x00" as *const u8 as
                          *const libc::c_char, 56i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 132],
                                                &[libc::c_char; 132]>(b"uint32_t wlr_xdg_toplevel_decoration_v1_set_mode(struct wlr_xdg_toplevel_decoration_v1 *, enum wlr_xdg_toplevel_decoration_v1_mode)\x00")).as_ptr());
    };
    (*decoration).server_pending_mode = mode;
    return wlr_xdg_surface_schedule_configure((*decoration).surface);
}
unsafe extern "C" fn toplevel_decoration_handle_resource_destroy(mut resource:
                                                                     *mut wl_resource) {
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        toplevel_decoration_from_resource(resource);
    wlr_signal_emit_safe(&mut (*decoration).events.destroy,
                         decoration as *mut libc::c_void);
    wl_list_remove(&mut (*decoration).surface_commit.link);
    wl_list_remove(&mut (*decoration).surface_destroy.link);
    wl_list_remove(&mut (*decoration).surface_configure.link);
    wl_list_remove(&mut (*decoration).surface_ack_configure.link);
    let mut configure: *mut wlr_xdg_toplevel_decoration_v1_configure =
        0 as *mut wlr_xdg_toplevel_decoration_v1_configure;
    let mut tmp: *mut wlr_xdg_toplevel_decoration_v1_configure =
        0 as *mut wlr_xdg_toplevel_decoration_v1_configure;
    configure =
        ((*decoration).configure_list.next as *mut libc::c_char).offset(-0) as
            *mut wlr_xdg_toplevel_decoration_v1_configure;
    tmp =
        ((*configure).link.next as *mut libc::c_char).offset(-0) as
            *mut wlr_xdg_toplevel_decoration_v1_configure;
    while &mut (*configure).link as *mut wl_list !=
              &mut (*decoration).configure_list as *mut wl_list {
        free(configure as *mut libc::c_void);
        configure = tmp;
        tmp =
            ((*configure).link.next as *mut libc::c_char).offset(-0) as
                *mut wlr_xdg_toplevel_decoration_v1_configure
    }
    wl_list_remove(&mut (*decoration).link);
    free(decoration as *mut libc::c_void);
}
unsafe extern "C" fn toplevel_decoration_handle_surface_destroy(mut listener:
                                                                    *mut wl_listener,
                                                                mut data:
                                                                    *mut libc::c_void) {
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        (listener as *mut libc::c_char).offset(-104) as
            *mut wlr_xdg_toplevel_decoration_v1;
    wl_resource_destroy((*decoration).resource);
}
unsafe extern "C" fn toplevel_decoration_handle_surface_configure(mut listener:
                                                                      *mut wl_listener,
                                                                  mut data:
                                                                      *mut libc::c_void) {
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        (listener as *mut libc::c_char).offset(-128) as
            *mut wlr_xdg_toplevel_decoration_v1;
    let mut surface_configure: *mut wlr_xdg_surface_configure =
        data as *mut wlr_xdg_surface_configure;
    if (*decoration).current_mode as libc::c_uint ==
           (*decoration).server_pending_mode as libc::c_uint {
        return
    }
    let mut configure: *mut wlr_xdg_toplevel_decoration_v1_configure =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_xdg_toplevel_decoration_v1_configure>()
                   as libc::c_ulong) as
            *mut wlr_xdg_toplevel_decoration_v1_configure;
    if configure.is_null() { return }
    (*configure).surface_configure = surface_configure;
    (*configure).mode = (*decoration).server_pending_mode;
    wl_list_insert((*decoration).configure_list.prev, &mut (*configure).link);
    zxdg_toplevel_decoration_v1_send_configure((*decoration).resource,
                                               (*configure).mode as uint32_t);
}
unsafe extern "C" fn toplevel_decoration_handle_surface_ack_configure(mut listener:
                                                                          *mut wl_listener,
                                                                      mut data:
                                                                          *mut libc::c_void) {
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        (listener as *mut libc::c_char).offset(-152) as
            *mut wlr_xdg_toplevel_decoration_v1;
    let mut surface_configure: *mut wlr_xdg_surface_configure =
        data as *mut wlr_xdg_surface_configure;
    let mut found: bool = 0i32 != 0;
    let mut configure: *mut wlr_xdg_toplevel_decoration_v1_configure =
        0 as *mut wlr_xdg_toplevel_decoration_v1_configure;
    configure =
        ((*decoration).configure_list.next as *mut libc::c_char).offset(-0) as
            *mut wlr_xdg_toplevel_decoration_v1_configure;
    while &mut (*configure).link as *mut wl_list !=
              &mut (*decoration).configure_list as *mut wl_list {
        if (*configure).surface_configure == surface_configure {
            found = 1i32 != 0;
            break ;
        } else {
            configure =
                ((*configure).link.next as *mut libc::c_char).offset(-0) as
                    *mut wlr_xdg_toplevel_decoration_v1_configure
        }
    }
    if !found { return }
    (*decoration).current_mode = (*configure).mode;
    wl_list_remove(&mut (*configure).link);
    free(configure as *mut libc::c_void);
}
unsafe extern "C" fn toplevel_decoration_handle_surface_commit(mut listener:
                                                                   *mut wl_listener,
                                                               mut data:
                                                                   *mut libc::c_void) {
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        (listener as *mut libc::c_char).offset(-176) as
            *mut wlr_xdg_toplevel_decoration_v1;
    let mut manager: *mut wlr_xdg_decoration_manager_v1 =
        (*decoration).manager;
    if (*(*decoration).surface).added {
        wl_list_remove(&mut (*decoration).surface_commit.link);
        wl_list_init(&mut (*decoration).surface_commit.link);
        (*decoration).added = 1i32 != 0;
        wlr_signal_emit_safe(&mut (*manager).events.new_toplevel_decoration,
                             decoration as *mut libc::c_void);
    };
}
unsafe extern "C" fn decoration_manager_from_resource(mut resource:
                                                          *mut wl_resource)
 -> *mut wlr_xdg_decoration_manager_v1 {
    if wl_resource_instance_of(resource,
                               &zxdg_decoration_manager_v1_interface,
                               &decoration_manager_impl as
                                   *const zxdg_decoration_manager_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zxdg_decoration_manager_v1_interface, &decoration_manager_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_xdg_decoration_v1.c\x00" as *const u8 as
                          *const libc::c_char, 155i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 93],
                                                &[libc::c_char; 93]>(b"struct wlr_xdg_decoration_manager_v1 *decoration_manager_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_xdg_decoration_manager_v1;
}
unsafe extern "C" fn decoration_manager_handle_destroy(mut client:
                                                           *mut wl_client,
                                                       mut manager_resource:
                                                           *mut wl_resource) {
    wl_resource_destroy(manager_resource);
}
unsafe extern "C" fn decoration_manager_handle_get_toplevel_decoration(mut client:
                                                                           *mut wl_client,
                                                                       mut manager_resource:
                                                                           *mut wl_resource,
                                                                       mut id:
                                                                           uint32_t,
                                                                       mut toplevel_resource:
                                                                           *mut wl_resource) {
    let mut manager: *mut wlr_xdg_decoration_manager_v1 =
        decoration_manager_from_resource(manager_resource);
    let mut surface: *mut wlr_xdg_surface =
        wlr_xdg_surface_from_toplevel_resource(toplevel_resource);
    if (*surface).role as libc::c_uint ==
           WLR_XDG_SURFACE_ROLE_TOPLEVEL as libc::c_int as libc::c_uint {
    } else {
        __assert_fail(b"surface->role == WLR_XDG_SURFACE_ROLE_TOPLEVEL\x00" as
                          *const u8 as *const libc::c_char,
                      b"../types/wlr_xdg_decoration_v1.c\x00" as *const u8 as
                          *const libc::c_char, 171i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 129],
                                                &[libc::c_char; 129]>(b"void decoration_manager_handle_get_toplevel_decoration(struct wl_client *, struct wl_resource *, uint32_t, struct wl_resource *)\x00")).as_ptr());
    };
    if wlr_surface_has_buffer((*surface).surface) {
        wl_resource_post_error(manager_resource,
                               ZXDG_TOPLEVEL_DECORATION_V1_ERROR_UNCONFIGURED_BUFFER
                                   as libc::c_int as uint32_t,
                               b"xdg_toplevel_decoration must not have a buffer at creation\x00"
                                   as *const u8 as *const libc::c_char);
        return
    }
    let mut decoration: *mut wlr_xdg_toplevel_decoration_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_xdg_toplevel_decoration_v1>() as
                   libc::c_ulong) as *mut wlr_xdg_toplevel_decoration_v1;
    if decoration.is_null() { wl_client_post_no_memory(client); return }
    (*decoration).manager = manager;
    (*decoration).surface = surface;
    let mut version: uint32_t =
        wl_resource_get_version(manager_resource) as uint32_t;
    (*decoration).resource =
        wl_resource_create(client, &zxdg_toplevel_decoration_v1_interface,
                           version as libc::c_int, id);
    if (*decoration).resource.is_null() {
        free(decoration as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    wl_resource_set_implementation((*decoration).resource,
                                   &toplevel_decoration_impl as
                                       *const zxdg_toplevel_decoration_v1_interface
                                       as *const libc::c_void,
                                   decoration as *mut libc::c_void,
                                   Some(toplevel_decoration_handle_resource_destroy
                                            as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] new xdg_toplevel_decoration %p (res %p)\x00" as
                 *const u8 as *const libc::c_char,
             b"../types/wlr_xdg_decoration_v1.c\x00" as *const u8 as
                 *const libc::c_char, 202i32, decoration,
             (*decoration).resource);
    wl_list_init(&mut (*decoration).configure_list);
    wl_signal_init(&mut (*decoration).events.destroy);
    wl_signal_init(&mut (*decoration).events.request_mode);
    wl_signal_add(&mut (*surface).events.destroy,
                  &mut (*decoration).surface_destroy);
    (*decoration).surface_destroy.notify =
        Some(toplevel_decoration_handle_surface_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*surface).events.configure,
                  &mut (*decoration).surface_configure);
    (*decoration).surface_configure.notify =
        Some(toplevel_decoration_handle_surface_configure as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*surface).events.ack_configure,
                  &mut (*decoration).surface_ack_configure);
    (*decoration).surface_ack_configure.notify =
        Some(toplevel_decoration_handle_surface_ack_configure as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_list_init(&mut (*decoration).surface_commit.link);
    wl_list_insert(&mut (*manager).decorations, &mut (*decoration).link);
    if (*surface).added {
        (*decoration).added = 1i32 != 0;
        wlr_signal_emit_safe(&mut (*manager).events.new_toplevel_decoration,
                             decoration as *mut libc::c_void);
    } else {
        wl_list_remove(&mut (*decoration).surface_commit.link);
        wl_signal_add(&mut (*(*surface).surface).events.commit,
                      &mut (*decoration).surface_commit);
        (*decoration).surface_commit.notify =
            Some(toplevel_decoration_handle_surface_commit as
                     unsafe extern "C" fn(_: *mut wl_listener,
                                          _: *mut libc::c_void) -> ())
    };
}
static mut decoration_manager_impl: zxdg_decoration_manager_v1_interface =
    unsafe {
        {
            let mut init =
                zxdg_decoration_manager_v1_interface{destroy:
                                                         Some(decoration_manager_handle_destroy
                                                                  as
                                                                  unsafe extern "C" fn(_:
                                                                                           *mut wl_client,
                                                                                       _:
                                                                                           *mut wl_resource)
                                                                      -> ()),
                                                     get_toplevel_decoration:
                                                         Some(decoration_manager_handle_get_toplevel_decoration
                                                                  as
                                                                  unsafe extern "C" fn(_:
                                                                                           *mut wl_client,
                                                                                       _:
                                                                                           *mut wl_resource,
                                                                                       _:
                                                                                           uint32_t,
                                                                                       _:
                                                                                           *mut wl_resource)
                                                                      ->
                                                                          ()),};
            init
        }
    };
unsafe extern "C" fn decoration_manager_bind(mut client: *mut wl_client,
                                             mut data: *mut libc::c_void,
                                             mut version: uint32_t,
                                             mut id: uint32_t) {
    let mut manager: *mut wlr_xdg_decoration_manager_v1 =
        data as *mut wlr_xdg_decoration_manager_v1;
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &zxdg_decoration_manager_v1_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(client); return }
    wl_resource_set_implementation(resource,
                                   &decoration_manager_impl as
                                       *const zxdg_decoration_manager_v1_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void, None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_xdg_decoration_manager_v1 =
        (listener as *mut libc::c_char).offset(-24) as
            *mut wlr_xdg_decoration_manager_v1;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
// wlr_xdg_toplevel_decoration::link
// struct wlr_xdg_toplevel_decoration *
// wlr_xdg_toplevel_decoration::configure_list
// wlr_xdg_decoration_manager_v1::link
// wlr_xdg_toplevel_decoration_v1_configure::link
#[no_mangle]
pub unsafe extern "C" fn wlr_xdg_decoration_manager_v1_create(mut display:
                                                                  *mut wl_display)
 -> *mut wlr_xdg_decoration_manager_v1 {
    let mut manager: *mut wlr_xdg_decoration_manager_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_xdg_decoration_manager_v1>() as
                   libc::c_ulong) as *mut wlr_xdg_decoration_manager_v1;
    if manager.is_null() { return 0 as *mut wlr_xdg_decoration_manager_v1 }
    (*manager).global =
        wl_global_create(display, &zxdg_decoration_manager_v1_interface, 1i32,
                         manager as *mut libc::c_void,
                         Some(decoration_manager_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_xdg_decoration_manager_v1
    }
    wl_list_init(&mut (*manager).decorations);
    wl_signal_init(&mut (*manager).events.new_toplevel_decoration);
    wl_signal_init(&mut (*manager).events.destroy);
    (*manager).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*manager).display_destroy);
    return manager;
}
