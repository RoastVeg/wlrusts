use libc;
extern "C" {
    pub type wl_event_loop;
    pub type wl_event_source;
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_backend;
    pub type wlr_output_impl;
    pub type xkb_state;
    pub type xkb_keymap;
    pub type wlr_keyboard_group;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    pub type wlr_keyboard_impl;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_array_init(array: *mut wl_array);
    #[no_mangle]
    fn wl_array_release(array: *mut wl_array);
    #[no_mangle]
    fn wl_array_add(array: *mut wl_array, size: size_t) -> *mut libc::c_void;
    #[no_mangle]
    fn wlr_output_from_resource(resource: *mut wl_resource)
     -> *mut wlr_output;
    #[no_mangle]
    fn wl_event_source_remove(source: *mut wl_event_source) -> libc::c_int;
    #[no_mangle]
    fn wl_event_loop_add_idle(loop_0: *mut wl_event_loop,
                              func: wl_event_loop_idle_func_t,
                              data: *mut libc::c_void)
     -> *mut wl_event_source;
    #[no_mangle]
    fn wl_display_get_event_loop(display: *mut wl_display)
     -> *mut wl_event_loop;
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_post_no_memory(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_post_error(resource: *mut wl_resource, code: uint32_t,
                              msg: *const libc::c_char, _: ...);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_link(resource: *mut wl_resource) -> *mut wl_list;
    #[no_mangle]
    fn wl_resource_from_link(resource: *mut wl_list) -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_get_client(resource: *mut wl_resource) -> *mut wl_client;
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn wlr_surface_from_resource(resource: *mut wl_resource)
     -> *mut wlr_surface;
    /* *
 * Get a seat client from a seat resource. Returns NULL if inert.
 */
    #[no_mangle]
    fn wlr_seat_client_from_resource(resource: *mut wl_resource)
     -> *mut wlr_seat_client;
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
    /* *
 * @page page_iface_zwlr_foreign_toplevel_manager_v1 zwlr_foreign_toplevel_manager_v1
 * @section page_iface_zwlr_foreign_toplevel_manager_v1_desc Description
 *
 * The purpose of this protocol is to enable the creation of taskbars
 * and docks by providing them with a list of opened applications and
 * letting them request certain actions on them, like maximizing, etc.
 *
 * After a client binds the zwlr_foreign_toplevel_manager_v1, each opened
 * toplevel window will be sent via the toplevel event
 * @section page_iface_zwlr_foreign_toplevel_manager_v1_api API
 * See @ref iface_zwlr_foreign_toplevel_manager_v1.
 */
/* *
 * @defgroup iface_zwlr_foreign_toplevel_manager_v1 The zwlr_foreign_toplevel_manager_v1 interface
 *
 * The purpose of this protocol is to enable the creation of taskbars
 * and docks by providing them with a list of opened applications and
 * letting them request certain actions on them, like maximizing, etc.
 *
 * After a client binds the zwlr_foreign_toplevel_manager_v1, each opened
 * toplevel window will be sent via the toplevel event
 */
    #[no_mangle]
    static zwlr_foreign_toplevel_manager_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwlr_foreign_toplevel_handle_v1 zwlr_foreign_toplevel_handle_v1
 * @section page_iface_zwlr_foreign_toplevel_handle_v1_desc Description
 *
 * A zwlr_foreign_toplevel_handle_v1 object represents an opened toplevel
 * window. Each app may have multiple opened toplevels.
 *
 * Each toplevel has a list of outputs it is visible on, conveyed to the
 * client with the output_enter and output_leave events.
 * @section page_iface_zwlr_foreign_toplevel_handle_v1_api API
 * See @ref iface_zwlr_foreign_toplevel_handle_v1.
 */
/* *
 * @defgroup iface_zwlr_foreign_toplevel_handle_v1 The zwlr_foreign_toplevel_handle_v1 interface
 *
 * A zwlr_foreign_toplevel_handle_v1 object represents an opened toplevel
 * window. Each app may have multiple opened toplevels.
 *
 * Each toplevel has a list of outputs it is visible on, conveyed to the
 * client with the output_enter and output_leave events.
 */
    #[no_mangle]
    static zwlr_foreign_toplevel_handle_v1_interface: wl_interface;
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_array {
    pub size: size_t,
    pub alloc: size_t,
    pub data: *mut libc::c_void,
}
pub type wl_event_loop_idle_func_t
    =
    Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;

#[repr(C)]#[derive(Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type wl_output_subpixel = libc::c_uint;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_BGR: wl_output_subpixel = 5;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_RGB: wl_output_subpixel = 4;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR: wl_output_subpixel = 3;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB: wl_output_subpixel = 2;
pub const WL_OUTPUT_SUBPIXEL_NONE: wl_output_subpixel = 1;
pub const WL_OUTPUT_SUBPIXEL_UNKNOWN: wl_output_subpixel = 0;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut crate::src::backend::drm::atomic::wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_mode {
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub preferred: bool,
    pub link: wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_cursor {
    pub output: *mut wlr_output,
    pub x: libc::c_double,
    pub y: libc::c_double,
    pub enabled: bool,
    pub visible: bool,
    pub width: uint32_t,
    pub height: uint32_t,
    pub hotspot_x: int32_t,
    pub hotspot_y: int32_t,
    pub link: wl_list,
    pub texture: *mut crate::src::backend::drm::atomic::wlr_texture,
    pub surface: *mut wlr_surface,
    pub surface_commit: wl_listener,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut crate::src::backend::drm::atomic::wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_0,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_0 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output {
    pub impl_0: *const crate::src::backend::drm::backend::wlr_output_impl,
    pub backend: *mut crate::src::backend::backend::wlr_backend,
    pub display: *mut wl_display,
    pub global: *mut wl_global,
    pub resources: wl_list,
    pub name: [libc::c_char; 24],
    pub make: [libc::c_char; 56],
    pub model: [libc::c_char; 16],
    pub serial: [libc::c_char; 16],
    pub phys_width: int32_t,
    pub phys_height: int32_t,
    pub modes: wl_list,
    pub current_mode: *mut wlr_output_mode,
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub enabled: bool,
    pub scale: libc::c_float,
    pub subpixel: wl_output_subpixel,
    pub transform: wl_output_transform,
    pub needs_frame: bool,
    pub damage: pixman_region32_t,
    pub frame_pending: bool,
    pub transform_matrix: [libc::c_float; 9],
    pub pending: wlr_output_state,
    pub commit_seq: uint32_t,
    pub events: C2RustUnnamed_1,
    pub idle_frame: *mut wl_event_source,
    pub idle_done: *mut wl_event_source,
    pub attach_render_locks: libc::c_int,
    pub cursors: wl_list,
    pub hardware_cursor: *mut wlr_output_cursor,
    pub software_cursor_locks: libc::c_int,
    pub display_destroy: wl_listener,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_1 {
    pub frame: wl_signal,
    pub needs_frame: wl_signal,
    pub precommit: wl_signal,
    pub commit: wl_signal,
    pub present: wl_signal,
    pub enable: wl_signal,
    pub mode: wl_signal,
    pub scale: wl_signal,
    pub transform: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_state {
    pub committed: uint32_t,
    pub damage: pixman_region32_t,
    pub buffer_type: wlr_output_state_buffer_type,
    pub buffer: *mut wlr_buffer,
}
pub type wlr_output_state_buffer_type = libc::c_uint;
pub const WLR_OUTPUT_STATE_BUFFER_SCANOUT: wlr_output_state_buffer_type = 1;
pub const WLR_OUTPUT_STATE_BUFFER_RENDER: wlr_output_state_buffer_type = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_manager_v1 {
    pub event_loop: *mut wl_event_loop,
    pub global: *mut wl_global,
    pub resources: wl_list,
    pub toplevels: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_2,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_2 {
    pub destroy: wl_signal,
}
pub type wlr_foreign_toplevel_handle_v1_state = libc::c_uint;
pub const WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN:
          wlr_foreign_toplevel_handle_v1_state =
    8;
pub const WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED:
          wlr_foreign_toplevel_handle_v1_state =
    4;
pub const WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED:
          wlr_foreign_toplevel_handle_v1_state =
    2;
pub const WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED:
          wlr_foreign_toplevel_handle_v1_state =
    1;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_handle_v1_output {
    pub link: wl_list,
    pub output_destroy: wl_listener,
    pub output: *mut wlr_output,
    pub toplevel: *mut wlr_foreign_toplevel_handle_v1,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_handle_v1 {
    pub manager: *mut wlr_foreign_toplevel_manager_v1,
    pub resources: wl_list,
    pub link: wl_list,
    pub idle_source: *mut wl_event_source,
    pub title: *mut libc::c_char,
    pub app_id: *mut libc::c_char,
    pub outputs: wl_list,
    pub state: uint32_t,
    pub events: C2RustUnnamed_3,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_3 {
    pub request_maximize: wl_signal,
    pub request_minimize: wl_signal,
    pub request_activate: wl_signal,
    pub request_fullscreen: wl_signal,
    pub request_close: wl_signal,
    pub set_rectangle: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_handle_v1_maximized_event {
    pub toplevel: *mut wlr_foreign_toplevel_handle_v1,
    pub maximized: bool,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_handle_v1_minimized_event {
    pub toplevel: *mut wlr_foreign_toplevel_handle_v1,
    pub minimized: bool,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_handle_v1_activated_event {
    pub toplevel: *mut wlr_foreign_toplevel_handle_v1,
    pub seat: *mut wlr_seat,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut crate::src::types::data_device::wlr_data_device::wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut crate::src::types::wlr_data_control_v1::wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut crate::src::types::data_device::wlr_data_device::wlr_drag,
    pub drag_source: *mut crate::src::types::data_device::wlr_data_device::wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_4,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_4 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_5,
    pub link: wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_5 {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_6,
    pub serials: wlr_serial_ringset,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_6 {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_7,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_7 {
    pub focus_change: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
pub type xkb_mod_mask_t = uint32_t;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard {
    pub impl_0: *const crate::src::backend::headless::input_device::wlr_keyboard_impl,
    pub group: *mut crate::src::types::wlr_keyboard_group::wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_9,
    pub events: C2RustUnnamed_8,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_8 {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_9 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type xkb_mod_index_t = uint32_t;
pub type xkb_led_index_t = uint32_t;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_10,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_10 {
    pub focus_change: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
// From 0..1
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_handle_v1_fullscreen_event {
    pub toplevel: *mut wlr_foreign_toplevel_handle_v1,
    pub fullscreen: bool,
    pub output: *mut wlr_output,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// wl_resource_get_link
// wlr_foreign_toplevel_handle_v1::link
// wlr_foreign_toplevel_handle_v1::outputs
// wlr_foreign_toplevel_v1_output
// wlr_foreign_toplevel_v1_state
// wlr_foreign_toplevel_handle_v1_maximized_event
//wlr_foreign_toplevel_handle_v1_minimized_event
//wlr_foreign_toplevel_handle_v1_activated_event
//wlr_foreign_toplevel_handle_v1_fullscreen_event
//wlr_foreign_toplevel_handle_v1_set_rectangle_event

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_foreign_toplevel_handle_v1_set_rectangle_event {
    pub toplevel: *mut wlr_foreign_toplevel_handle_v1,
    pub surface: *mut wlr_surface,
    pub x: int32_t,
    pub y: int32_t,
    pub width: int32_t,
    pub height: int32_t,
}
/* ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_ERROR_ENUM */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * @struct zwlr_foreign_toplevel_handle_v1_interface
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwlr_foreign_toplevel_handle_v1_interface {
    pub set_maximized: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                   _: *mut wl_resource)
                                  -> ()>,
    pub unset_maximized: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                     _: *mut wl_resource)
                                    -> ()>,
    pub set_minimized: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                   _: *mut wl_resource)
                                  -> ()>,
    pub unset_minimized: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                     _: *mut wl_resource)
                                    -> ()>,
    pub activate: Option<unsafe extern "C" fn(_: *mut wl_client,
                                              _: *mut wl_resource,
                                              _: *mut wl_resource) -> ()>,
    pub close: Option<unsafe extern "C" fn(_: *mut wl_client,
                                           _: *mut wl_resource) -> ()>,
    pub set_rectangle: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                   _: *mut wl_resource,
                                                   _: *mut wl_resource,
                                                   _: int32_t, _: int32_t,
                                                   _: int32_t, _: int32_t)
                                  -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub set_fullscreen: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                    _: *mut wl_resource,
                                                    _: *mut wl_resource)
                                   -> ()>,
    pub unset_fullscreen: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                      _: *mut wl_resource)
                                     -> ()>,
}
/* *
	 * the provided rectangle is invalid
	 */
pub const ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_ERROR_INVALID_RECTANGLE:
          zwlr_foreign_toplevel_handle_v1_error =
    0;
/* *
	 * the toplevel is fullscreen
	 * @since 2
	 */
pub const ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN:
          zwlr_foreign_toplevel_handle_v1_state =
    3;
/* *
	 * the toplevel is active
	 */
pub const ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED:
          zwlr_foreign_toplevel_handle_v1_state =
    2;
/* *
	 * the toplevel is minimized
	 */
pub const ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED:
          zwlr_foreign_toplevel_handle_v1_state =
    1;
/* *
	 * the toplevel is maximized
	 */
pub const ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED:
          zwlr_foreign_toplevel_handle_v1_state =
    0;
/* *
 * @ingroup iface_zwlr_foreign_toplevel_manager_v1
 * @struct zwlr_foreign_toplevel_manager_v1_interface
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwlr_foreign_toplevel_manager_v1_interface {
    pub stop: Option<unsafe extern "C" fn(_: *mut wl_client,
                                          _: *mut wl_resource) -> ()>,
}
/*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * types of states on the toplevel
 *
 * The different states that a toplevel can have. These have the same meaning
 * as the states with the same names defined in xdg-toplevel
 */
pub type zwlr_foreign_toplevel_handle_v1_state = libc::c_uint;
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ENUM */
pub type zwlr_foreign_toplevel_handle_v1_error = libc::c_uint;
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_manager_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_manager_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_manager_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_manager_v1
 * Sends an toplevel event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_manager_v1_send_toplevel(mut resource_:
                                                                        *mut wl_resource,
                                                                    mut toplevel:
                                                                        *mut wl_resource) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, toplevel);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_manager_v1
 * Sends an finished event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_manager_v1_send_finished(mut resource_:
                                                                        *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 */
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * Sends an title event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_handle_v1_send_title(mut resource_:
                                                                    *mut wl_resource,
                                                                mut title:
                                                                    *const libc::c_char) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, title);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * Sends an app_id event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_handle_v1_send_app_id(mut resource_:
                                                                     *mut wl_resource,
                                                                 mut app_id:
                                                                     *const libc::c_char) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, app_id);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * Sends an output_enter event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_handle_v1_send_output_enter(mut resource_:
                                                                           *mut wl_resource,
                                                                       mut output:
                                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 2i32 as uint32_t, output);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * Sends an output_leave event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_handle_v1_send_output_leave(mut resource_:
                                                                           *mut wl_resource,
                                                                       mut output:
                                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 3i32 as uint32_t, output);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * Sends an state event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_handle_v1_send_state(mut resource_:
                                                                    *mut wl_resource,
                                                                mut state:
                                                                    *mut wl_array) {
    wl_resource_post_event(resource_, 4i32 as uint32_t, state);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * Sends an done event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_handle_v1_send_done(mut resource_:
                                                                   *mut wl_resource) {
    wl_resource_post_event(resource_, 5i32 as uint32_t);
}
/* *
 * @ingroup iface_zwlr_foreign_toplevel_handle_v1
 * Sends an closed event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_foreign_toplevel_handle_v1_send_closed(mut resource_:
                                                                     *mut wl_resource) {
    wl_resource_post_event(resource_, 6i32 as uint32_t);
}
unsafe extern "C" fn toplevel_handle_from_resource(mut resource:
                                                       *mut wl_resource)
 -> *mut wlr_foreign_toplevel_handle_v1 {
    if wl_resource_instance_of(resource,
                               &zwlr_foreign_toplevel_handle_v1_interface,
                               &toplevel_handle_impl as
                                   *const zwlr_foreign_toplevel_handle_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwlr_foreign_toplevel_handle_v1_interface, &toplevel_handle_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_foreign_toplevel_management_v1.c\x00" as
                          *const u8 as *const libc::c_char,
                      20i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 91],
                                                &[libc::c_char; 91]>(b"struct wlr_foreign_toplevel_handle_v1 *toplevel_handle_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_foreign_toplevel_handle_v1;
}
unsafe extern "C" fn toplevel_handle_send_maximized_event(mut resource:
                                                              *mut wl_resource,
                                                          mut state: bool) {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        toplevel_handle_from_resource(resource);
    if toplevel.is_null() { return }
    let mut event: wlr_foreign_toplevel_handle_v1_maximized_event =
        {
            let mut init =
                wlr_foreign_toplevel_handle_v1_maximized_event{toplevel:
                                                                   toplevel,
                                                               maximized:
                                                                   state,};
            init
        };
    wlr_signal_emit_safe(&mut (*toplevel).events.request_maximize,
                         &mut event as
                             *mut wlr_foreign_toplevel_handle_v1_maximized_event
                             as *mut libc::c_void);
}
unsafe extern "C" fn foreign_toplevel_handle_set_maximized(mut client:
                                                               *mut wl_client,
                                                           mut resource:
                                                               *mut wl_resource) {
    toplevel_handle_send_maximized_event(resource, 1i32 != 0);
}
unsafe extern "C" fn foreign_toplevel_handle_unset_maximized(mut client:
                                                                 *mut wl_client,
                                                             mut resource:
                                                                 *mut wl_resource) {
    toplevel_handle_send_maximized_event(resource, 0i32 != 0);
}
unsafe extern "C" fn toplevel_send_minimized_event(mut resource:
                                                       *mut wl_resource,
                                                   mut state: bool) {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        toplevel_handle_from_resource(resource);
    if toplevel.is_null() { return }
    let mut event: wlr_foreign_toplevel_handle_v1_minimized_event =
        {
            let mut init =
                wlr_foreign_toplevel_handle_v1_minimized_event{toplevel:
                                                                   toplevel,
                                                               minimized:
                                                                   state,};
            init
        };
    wlr_signal_emit_safe(&mut (*toplevel).events.request_minimize,
                         &mut event as
                             *mut wlr_foreign_toplevel_handle_v1_minimized_event
                             as *mut libc::c_void);
}
unsafe extern "C" fn foreign_toplevel_handle_set_minimized(mut client:
                                                               *mut wl_client,
                                                           mut resource:
                                                               *mut wl_resource) {
    toplevel_send_minimized_event(resource, 1i32 != 0);
}
unsafe extern "C" fn foreign_toplevel_handle_unset_minimized(mut client:
                                                                 *mut wl_client,
                                                             mut resource:
                                                                 *mut wl_resource) {
    toplevel_send_minimized_event(resource, 0i32 != 0);
}
unsafe extern "C" fn toplevel_send_fullscreen_event(mut resource:
                                                        *mut wl_resource,
                                                    mut state: bool,
                                                    mut output_resource:
                                                        *mut wl_resource) {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        toplevel_handle_from_resource(resource);
    if toplevel.is_null() { return }
    let mut output: *mut wlr_output = 0 as *mut wlr_output;
    if !output_resource.is_null() {
        output = wlr_output_from_resource(output_resource)
    }
    let mut event: wlr_foreign_toplevel_handle_v1_fullscreen_event =
        {
            let mut init =
                wlr_foreign_toplevel_handle_v1_fullscreen_event{toplevel:
                                                                    toplevel,
                                                                fullscreen:
                                                                    state,
                                                                output:
                                                                    output,};
            init
        };
    wlr_signal_emit_safe(&mut (*toplevel).events.request_fullscreen,
                         &mut event as
                             *mut wlr_foreign_toplevel_handle_v1_fullscreen_event
                             as *mut libc::c_void);
}
unsafe extern "C" fn foreign_toplevel_handle_set_fullscreen(mut client:
                                                                *mut wl_client,
                                                            mut resource:
                                                                *mut wl_resource,
                                                            mut output:
                                                                *mut wl_resource) {
    toplevel_send_fullscreen_event(resource, 1i32 != 0, output);
}
unsafe extern "C" fn foreign_toplevel_handle_unset_fullscreen(mut client:
                                                                  *mut wl_client,
                                                              mut resource:
                                                                  *mut wl_resource) {
    toplevel_send_fullscreen_event(resource, 0i32 != 0,
                                   0 as *mut wl_resource);
}
unsafe extern "C" fn foreign_toplevel_handle_activate(mut client:
                                                          *mut wl_client,
                                                      mut resource:
                                                          *mut wl_resource,
                                                      mut seat:
                                                          *mut wl_resource) {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        toplevel_handle_from_resource(resource);
    if toplevel.is_null() { return }
    let mut seat_client: *mut wlr_seat_client =
        wlr_seat_client_from_resource(seat);
    let mut event: wlr_foreign_toplevel_handle_v1_activated_event =
        {
            let mut init =
                wlr_foreign_toplevel_handle_v1_activated_event{toplevel:
                                                                   toplevel,
                                                               seat:
                                                                   (*seat_client).seat,};
            init
        };
    wlr_signal_emit_safe(&mut (*toplevel).events.request_activate,
                         &mut event as
                             *mut wlr_foreign_toplevel_handle_v1_activated_event
                             as *mut libc::c_void);
}
unsafe extern "C" fn foreign_toplevel_handle_close(mut client: *mut wl_client,
                                                   mut resource:
                                                       *mut wl_resource) {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        toplevel_handle_from_resource(resource);
    if toplevel.is_null() { return }
    wlr_signal_emit_safe(&mut (*toplevel).events.request_close,
                         toplevel as *mut libc::c_void);
}
unsafe extern "C" fn foreign_toplevel_handle_set_rectangle(mut client:
                                                               *mut wl_client,
                                                           mut resource:
                                                               *mut wl_resource,
                                                           mut surface:
                                                               *mut wl_resource,
                                                           mut x: int32_t,
                                                           mut y: int32_t,
                                                           mut width: int32_t,
                                                           mut height:
                                                               int32_t) {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        toplevel_handle_from_resource(resource);
    if toplevel.is_null() { return }
    if width < 0i32 || height < 0i32 {
        wl_resource_post_error(resource,
                               ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_ERROR_INVALID_RECTANGLE
                                   as libc::c_int as uint32_t,
                               b"invalid rectangle passed to set_rectangle: width/height < 0\x00"
                                   as *const u8 as *const libc::c_char);
        return
    }
    let mut event: wlr_foreign_toplevel_handle_v1_set_rectangle_event =
        {
            let mut init =
                wlr_foreign_toplevel_handle_v1_set_rectangle_event{toplevel:
                                                                       toplevel,
                                                                   surface:
                                                                       wlr_surface_from_resource(surface),
                                                                   x: x,
                                                                   y: y,
                                                                   width:
                                                                       width,
                                                                   height:
                                                                       height,};
            init
        };
    wlr_signal_emit_safe(&mut (*toplevel).events.set_rectangle,
                         &mut event as
                             *mut wlr_foreign_toplevel_handle_v1_set_rectangle_event
                             as *mut libc::c_void);
}
unsafe extern "C" fn foreign_toplevel_handle_destroy(mut client:
                                                         *mut wl_client,
                                                     mut resource:
                                                         *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut toplevel_handle_impl: zwlr_foreign_toplevel_handle_v1_interface =
    {
    
        {
            let mut init =
                zwlr_foreign_toplevel_handle_v1_interface{set_maximized:
                                                              Some(foreign_toplevel_handle_set_maximized
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          unset_maximized:
                                                              Some(foreign_toplevel_handle_unset_maximized
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          set_minimized:
                                                              Some(foreign_toplevel_handle_set_minimized
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          unset_minimized:
                                                              Some(foreign_toplevel_handle_unset_minimized
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          activate:
                                                              Some(foreign_toplevel_handle_activate
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          close:
                                                              Some(foreign_toplevel_handle_close
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          set_rectangle:
                                                              Some(foreign_toplevel_handle_set_rectangle
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                int32_t,
                                                                                            _:
                                                                                                int32_t,
                                                                                            _:
                                                                                                int32_t,
                                                                                            _:
                                                                                                int32_t)
                                                                           ->
                                                                               ()),
                                                          destroy:
                                                              Some(foreign_toplevel_handle_destroy
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          set_fullscreen:
                                                              Some(foreign_toplevel_handle_set_fullscreen
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          unset_fullscreen:
                                                              Some(foreign_toplevel_handle_unset_fullscreen
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),};
            init
        }
};
unsafe extern "C" fn toplevel_idle_send_done(mut data: *mut libc::c_void) {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        data as *mut wlr_foreign_toplevel_handle_v1;
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*toplevel).resources.next);
    while wl_resource_get_link(resource) !=
              &mut (*toplevel).resources as *mut wl_list {
        zwlr_foreign_toplevel_handle_v1_send_done(resource);
        resource =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    (*toplevel).idle_source = 0 as *mut wl_event_source;
}
unsafe extern "C" fn toplevel_update_idle_source(mut toplevel:
                                                     *mut wlr_foreign_toplevel_handle_v1) {
    if !(*toplevel).idle_source.is_null() { return }
    (*toplevel).idle_source =
        wl_event_loop_add_idle((*(*toplevel).manager).event_loop,
                               Some(toplevel_idle_send_done as
                                        unsafe extern "C" fn(_:
                                                                 *mut libc::c_void)
                                            -> ()),
                               toplevel as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_set_title(mut toplevel:
                                                                      *mut wlr_foreign_toplevel_handle_v1,
                                                                  mut title:
                                                                      *const libc::c_char) {
    free((*toplevel).title as *mut libc::c_void);
    (*toplevel).title = strdup(title);
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*toplevel).resources.next);
    while wl_resource_get_link(resource) !=
              &mut (*toplevel).resources as *mut wl_list {
        zwlr_foreign_toplevel_handle_v1_send_title(resource, title);
        resource =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    toplevel_update_idle_source(toplevel);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_set_app_id(mut toplevel:
                                                                       *mut wlr_foreign_toplevel_handle_v1,
                                                                   mut app_id:
                                                                       *const libc::c_char) {
    free((*toplevel).app_id as *mut libc::c_void);
    (*toplevel).app_id = strdup(app_id);
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*toplevel).resources.next);
    while wl_resource_get_link(resource) !=
              &mut (*toplevel).resources as *mut wl_list {
        zwlr_foreign_toplevel_handle_v1_send_app_id(resource, app_id);
        resource =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    toplevel_update_idle_source(toplevel);
}
unsafe extern "C" fn send_output_to_resource(mut resource: *mut wl_resource,
                                             mut output: *mut wlr_output,
                                             mut enter: bool) {
    let mut client: *mut wl_client = wl_resource_get_client(resource);
    let mut output_resource: *mut wl_resource = 0 as *mut wl_resource;
    output_resource = 0 as *mut wl_resource;
    output_resource = wl_resource_from_link((*output).resources.next);
    while wl_resource_get_link(output_resource) !=
              &mut (*output).resources as *mut wl_list {
        if wl_resource_get_client(output_resource) == client {
            if enter {
                zwlr_foreign_toplevel_handle_v1_send_output_enter(resource,
                                                                  output_resource);
            } else {
                zwlr_foreign_toplevel_handle_v1_send_output_leave(resource,
                                                                  output_resource);
            }
        }
        output_resource =
            wl_resource_from_link((*wl_resource_get_link(output_resource)).next)
    };
}
unsafe extern "C" fn toplevel_send_output(mut toplevel:
                                              *mut wlr_foreign_toplevel_handle_v1,
                                          mut output: *mut wlr_output,
                                          mut enter: bool) {
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*toplevel).resources.next);
    while wl_resource_get_link(resource) !=
              &mut (*toplevel).resources as *mut wl_list {
        send_output_to_resource(resource, output, enter);
        resource =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    toplevel_update_idle_source(toplevel);
}
unsafe extern "C" fn toplevel_handle_output_destroy(mut listener:
                                                        *mut wl_listener,
                                                    mut data:
                                                        *mut libc::c_void) {
    let mut toplevel_output: *mut wlr_foreign_toplevel_handle_v1_output =
        (listener as *mut libc::c_char).offset(-16) as
            *mut wlr_foreign_toplevel_handle_v1_output;
    wlr_foreign_toplevel_handle_v1_output_leave((*toplevel_output).toplevel,
                                                (*toplevel_output).output);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_output_enter(mut toplevel:
                                                                         *mut wlr_foreign_toplevel_handle_v1,
                                                                     mut output:
                                                                         *mut wlr_output) {
    let mut toplevel_output: *mut wlr_foreign_toplevel_handle_v1_output =
        0 as *mut wlr_foreign_toplevel_handle_v1_output;
    toplevel_output =
        ((*toplevel).outputs.next as *mut libc::c_char).offset(-0) as
            *mut wlr_foreign_toplevel_handle_v1_output;
    while &mut (*toplevel_output).link as *mut wl_list !=
              &mut (*toplevel).outputs as *mut wl_list {
        if (*toplevel_output).output == output {
            return
            // we have already sent output_enter event
        }
        toplevel_output =
            ((*toplevel_output).link.next as *mut libc::c_char).offset(-0) as
                *mut wlr_foreign_toplevel_handle_v1_output
    }
    toplevel_output =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_foreign_toplevel_handle_v1_output>()
                   as libc::c_ulong) as
            *mut wlr_foreign_toplevel_handle_v1_output;
    if toplevel_output.is_null() {
        _wlr_log(WLR_ERROR,
                 b"[%s:%d] failed to allocate memory for toplevel output\x00"
                     as *const u8 as *const libc::c_char,
                 b"../types/wlr_foreign_toplevel_management_v1.c\x00" as
                     *const u8 as *const libc::c_char, 269i32);
        return
    }
    (*toplevel_output).output = output;
    (*toplevel_output).toplevel = toplevel;
    wl_list_insert(&mut (*toplevel).outputs, &mut (*toplevel_output).link);
    (*toplevel_output).output_destroy.notify =
        Some(toplevel_handle_output_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*output).events.destroy,
                  &mut (*toplevel_output).output_destroy);
    toplevel_send_output(toplevel, output, 1i32 != 0);
}
unsafe extern "C" fn toplevel_output_destroy(mut toplevel_output:
                                                 *mut wlr_foreign_toplevel_handle_v1_output) {
    wl_list_remove(&mut (*toplevel_output).link);
    wl_list_remove(&mut (*toplevel_output).output_destroy.link);
    free(toplevel_output as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_output_leave(mut toplevel:
                                                                         *mut wlr_foreign_toplevel_handle_v1,
                                                                     mut output:
                                                                         *mut wlr_output) {
    let mut toplevel_output_iterator:
            *mut wlr_foreign_toplevel_handle_v1_output =
        0 as *mut wlr_foreign_toplevel_handle_v1_output;
    let mut toplevel_output: *mut wlr_foreign_toplevel_handle_v1_output =
        0 as *mut wlr_foreign_toplevel_handle_v1_output;
    toplevel_output_iterator =
        ((*toplevel).outputs.next as *mut libc::c_char).offset(-0) as
            *mut wlr_foreign_toplevel_handle_v1_output;
    while &mut (*toplevel_output_iterator).link as *mut wl_list !=
              &mut (*toplevel).outputs as *mut wl_list {
        if (*toplevel_output_iterator).output == output {
            toplevel_output = toplevel_output_iterator;
            break ;
        } else {
            toplevel_output_iterator =
                ((*toplevel_output_iterator).link.next as
                     *mut libc::c_char).offset(-0) as
                    *mut wlr_foreign_toplevel_handle_v1_output
        }
    }
    if !toplevel_output.is_null() {
        toplevel_send_output(toplevel, output, 0i32 != 0);
        toplevel_output_destroy(toplevel_output);
    };
}
unsafe extern "C" fn fill_array_from_toplevel_state(mut array: *mut wl_array,
                                                    mut state: uint32_t)
 -> bool {
    if state &
           WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED as libc::c_int as
               libc::c_uint != 0 {
        let mut index: *mut uint32_t =
            wl_array_add(array,
                         ::std::mem::size_of::<uint32_t>() as libc::c_ulong)
                as *mut uint32_t;
        if index.is_null() { return 0i32 != 0 }
        *index =
            ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED as libc::c_int as
                uint32_t
    }
    if state &
           WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED as libc::c_int as
               libc::c_uint != 0 {
        let mut index_0: *mut uint32_t =
            wl_array_add(array,
                         ::std::mem::size_of::<uint32_t>() as libc::c_ulong)
                as *mut uint32_t;
        if index_0.is_null() { return 0i32 != 0 }
        *index_0 =
            ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED as libc::c_int as
                uint32_t
    }
    if state &
           WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED as libc::c_int as
               libc::c_uint != 0 {
        let mut index_1: *mut uint32_t =
            wl_array_add(array,
                         ::std::mem::size_of::<uint32_t>() as libc::c_ulong)
                as *mut uint32_t;
        if index_1.is_null() { return 0i32 != 0 }
        *index_1 =
            ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED as libc::c_int as
                uint32_t
    }
    if state &
           WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN as libc::c_int as
               libc::c_uint != 0 {
        let mut index_2: *mut uint32_t =
            wl_array_add(array,
                         ::std::mem::size_of::<uint32_t>() as libc::c_ulong)
                as *mut uint32_t;
        if index_2.is_null() { return 0i32 != 0 }
        *index_2 =
            ZWLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN as libc::c_int as
                uint32_t
    }
    return 1i32 != 0;
}
unsafe extern "C" fn toplevel_send_state(mut toplevel:
                                             *mut wlr_foreign_toplevel_handle_v1) {
    let mut states: wl_array =
        wl_array{size: 0, alloc: 0, data: 0 as *mut libc::c_void,};
    wl_array_init(&mut states);
    let mut r: bool =
        fill_array_from_toplevel_state(&mut states, (*toplevel).state);
    if !r {
        let mut resource: *mut wl_resource = 0 as *mut wl_resource;
        resource = 0 as *mut wl_resource;
        resource = wl_resource_from_link((*toplevel).resources.next);
        while wl_resource_get_link(resource) !=
                  &mut (*toplevel).resources as *mut wl_list {
            wl_resource_post_no_memory(resource);
            resource =
                wl_resource_from_link((*wl_resource_get_link(resource)).next)
        }
        wl_array_release(&mut states);
        return
    }
    let mut resource_0: *mut wl_resource = 0 as *mut wl_resource;
    resource_0 = 0 as *mut wl_resource;
    resource_0 = wl_resource_from_link((*toplevel).resources.next);
    while wl_resource_get_link(resource_0) !=
              &mut (*toplevel).resources as *mut wl_list {
        zwlr_foreign_toplevel_handle_v1_send_state(resource_0, &mut states);
        resource_0 =
            wl_resource_from_link((*wl_resource_get_link(resource_0)).next)
    }
    wl_array_release(&mut states);
    toplevel_update_idle_source(toplevel);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_set_maximized(mut toplevel:
                                                                          *mut wlr_foreign_toplevel_handle_v1,
                                                                      mut maximized:
                                                                          bool) {
    if maximized {
        (*toplevel).state |=
            WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED as libc::c_int as
                libc::c_uint
    } else {
        (*toplevel).state &=
            !(WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MAXIMIZED as libc::c_int)
                as libc::c_uint
    }
    toplevel_send_state(toplevel);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_set_minimized(mut toplevel:
                                                                          *mut wlr_foreign_toplevel_handle_v1,
                                                                      mut minimized:
                                                                          bool) {
    if minimized {
        (*toplevel).state |=
            WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED as libc::c_int as
                libc::c_uint
    } else {
        (*toplevel).state &=
            !(WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_MINIMIZED as libc::c_int)
                as libc::c_uint
    }
    toplevel_send_state(toplevel);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_set_activated(mut toplevel:
                                                                          *mut wlr_foreign_toplevel_handle_v1,
                                                                      mut activated:
                                                                          bool) {
    if activated {
        (*toplevel).state |=
            WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED as libc::c_int as
                libc::c_uint
    } else {
        (*toplevel).state &=
            !(WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_ACTIVATED as libc::c_int)
                as libc::c_uint
    }
    toplevel_send_state(toplevel);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_set_fullscreen(mut toplevel:
                                                                           *mut wlr_foreign_toplevel_handle_v1,
                                                                       mut fullscreen:
                                                                           bool) {
    if fullscreen {
        (*toplevel).state |=
            WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN as libc::c_int as
                libc::c_uint
    } else {
        (*toplevel).state &=
            !(WLR_FOREIGN_TOPLEVEL_HANDLE_V1_STATE_FULLSCREEN as libc::c_int)
                as libc::c_uint
    }
    toplevel_send_state(toplevel);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_destroy(mut toplevel:
                                                                    *mut wlr_foreign_toplevel_handle_v1) {
    if toplevel.is_null() { return }
    wlr_signal_emit_safe(&mut (*toplevel).events.destroy,
                         toplevel as *mut libc::c_void);
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    let mut tmp: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    tmp = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*toplevel).resources.next);
    tmp = wl_resource_from_link((*(*toplevel).resources.next).next);
    while wl_resource_get_link(resource) !=
              &mut (*toplevel).resources as *mut wl_list {
        zwlr_foreign_toplevel_handle_v1_send_closed(resource);
        wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
        wl_list_remove(wl_resource_get_link(resource));
        wl_list_init(wl_resource_get_link(resource));
        resource = tmp;
        tmp = wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    let mut toplevel_output: *mut wlr_foreign_toplevel_handle_v1_output =
        0 as *mut wlr_foreign_toplevel_handle_v1_output;
    let mut tmp2: *mut wlr_foreign_toplevel_handle_v1_output =
        0 as *mut wlr_foreign_toplevel_handle_v1_output;
    toplevel_output =
        ((*toplevel).outputs.next as *mut libc::c_char).offset(-0) as
            *mut wlr_foreign_toplevel_handle_v1_output;
    tmp2 =
        ((*toplevel_output).link.next as *mut libc::c_char).offset(-0) as
            *mut wlr_foreign_toplevel_handle_v1_output;
    while &mut (*toplevel_output).link as *mut wl_list !=
              &mut (*toplevel).outputs as *mut wl_list {
        toplevel_output_destroy(toplevel_output);
        toplevel_output = tmp2;
        tmp2 =
            ((*toplevel_output).link.next as *mut libc::c_char).offset(-0) as
                *mut wlr_foreign_toplevel_handle_v1_output
    }
    if !(*toplevel).idle_source.is_null() {
        wl_event_source_remove((*toplevel).idle_source);
    }
    wl_list_remove(&mut (*toplevel).link);
    free((*toplevel).title as *mut libc::c_void);
    free((*toplevel).app_id as *mut libc::c_void);
    free(toplevel as *mut libc::c_void);
}
unsafe extern "C" fn foreign_toplevel_resource_destroy(mut resource:
                                                           *mut wl_resource) {
    wl_list_remove(wl_resource_get_link(resource));
}
unsafe extern "C" fn create_toplevel_resource_for_resource(mut toplevel:
                                                               *mut wlr_foreign_toplevel_handle_v1,
                                                           mut manager_resource:
                                                               *mut wl_resource)
 -> *mut wl_resource {
    let mut client: *mut wl_client = wl_resource_get_client(manager_resource);
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &zwlr_foreign_toplevel_handle_v1_interface,
                           wl_resource_get_version(manager_resource),
                           0i32 as uint32_t);
    if resource.is_null() {
        wl_client_post_no_memory(client);
        return 0 as *mut wl_resource
    }
    wl_resource_set_implementation(resource,
                                   &toplevel_handle_impl as
                                       *const zwlr_foreign_toplevel_handle_v1_interface
                                       as *const libc::c_void,
                                   toplevel as *mut libc::c_void,
                                   Some(foreign_toplevel_resource_destroy as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    wl_list_insert(&mut (*toplevel).resources,
                   wl_resource_get_link(resource));
    zwlr_foreign_toplevel_manager_v1_send_toplevel(manager_resource,
                                                   resource);
    return resource;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_handle_v1_create(mut manager:
                                                                   *mut wlr_foreign_toplevel_manager_v1)
 -> *mut wlr_foreign_toplevel_handle_v1 {
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_foreign_toplevel_handle_v1>() as
                   libc::c_ulong) as *mut wlr_foreign_toplevel_handle_v1;
    if toplevel.is_null() { return 0 as *mut wlr_foreign_toplevel_handle_v1 }
    wl_list_insert(&mut (*manager).toplevels, &mut (*toplevel).link);
    (*toplevel).manager = manager;
    wl_list_init(&mut (*toplevel).resources);
    wl_list_init(&mut (*toplevel).outputs);
    wl_signal_init(&mut (*toplevel).events.request_maximize);
    wl_signal_init(&mut (*toplevel).events.request_minimize);
    wl_signal_init(&mut (*toplevel).events.request_activate);
    wl_signal_init(&mut (*toplevel).events.request_fullscreen);
    wl_signal_init(&mut (*toplevel).events.request_close);
    wl_signal_init(&mut (*toplevel).events.set_rectangle);
    wl_signal_init(&mut (*toplevel).events.destroy);
    let mut manager_resource: *mut wl_resource = 0 as *mut wl_resource;
    let mut tmp: *mut wl_resource = 0 as *mut wl_resource;
    manager_resource = 0 as *mut wl_resource;
    tmp = 0 as *mut wl_resource;
    manager_resource = wl_resource_from_link((*manager).resources.next);
    tmp = wl_resource_from_link((*(*manager).resources.next).next);
    while wl_resource_get_link(manager_resource) !=
              &mut (*manager).resources as *mut wl_list {
        create_toplevel_resource_for_resource(toplevel, manager_resource);
        manager_resource = tmp;
        tmp =
            wl_resource_from_link((*wl_resource_get_link(manager_resource)).next)
    }
    return toplevel;
}
unsafe extern "C" fn foreign_toplevel_manager_handle_stop(mut client:
                                                              *mut wl_client,
                                                          mut resource:
                                                              *mut wl_resource) {
    if wl_resource_instance_of(resource,
                               &zwlr_foreign_toplevel_manager_v1_interface,
                               &foreign_toplevel_manager_impl as
                                   *const zwlr_foreign_toplevel_manager_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwlr_foreign_toplevel_manager_v1_interface, &foreign_toplevel_manager_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_foreign_toplevel_management_v1.c\x00" as
                          *const u8 as *const libc::c_char,
                      502i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 84],
                                                &[libc::c_char; 84]>(b"void foreign_toplevel_manager_handle_stop(struct wl_client *, struct wl_resource *)\x00")).as_ptr());
    };
    zwlr_foreign_toplevel_manager_v1_send_finished(resource);
    wl_resource_destroy(resource);
}
static mut foreign_toplevel_manager_impl:
       zwlr_foreign_toplevel_manager_v1_interface =
    {
    
        {
            let mut init =
                zwlr_foreign_toplevel_manager_v1_interface{stop:
                                                               Some(foreign_toplevel_manager_handle_stop
                                                                        as
                                                                        unsafe extern "C" fn(_:
                                                                                                 *mut wl_client,
                                                                                             _:
                                                                                                 *mut wl_resource)
                                                                            ->
                                                                                ()),};
            init
        }
};
unsafe extern "C" fn foreign_toplevel_manager_resource_destroy(mut resource:
                                                                   *mut wl_resource) {
    wl_list_remove(wl_resource_get_link(resource));
}
unsafe extern "C" fn toplevel_send_details_to_toplevel_resource(mut toplevel:
                                                                    *mut wlr_foreign_toplevel_handle_v1,
                                                                mut resource:
                                                                    *mut wl_resource) {
    if !(*toplevel).title.is_null() {
        zwlr_foreign_toplevel_handle_v1_send_title(resource,
                                                   (*toplevel).title);
    }
    if !(*toplevel).app_id.is_null() {
        zwlr_foreign_toplevel_handle_v1_send_app_id(resource,
                                                    (*toplevel).app_id);
    }
    let mut output: *mut wlr_foreign_toplevel_handle_v1_output =
        0 as *mut wlr_foreign_toplevel_handle_v1_output;
    output =
        ((*toplevel).outputs.next as *mut libc::c_char).offset(-0) as
            *mut wlr_foreign_toplevel_handle_v1_output;
    while &mut (*output).link as *mut wl_list !=
              &mut (*toplevel).outputs as *mut wl_list {
        send_output_to_resource(resource, (*output).output, 1i32 != 0);
        output =
            ((*output).link.next as *mut libc::c_char).offset(-0) as
                *mut wlr_foreign_toplevel_handle_v1_output
    }
    let mut states: wl_array =
        wl_array{size: 0, alloc: 0, data: 0 as *mut libc::c_void,};
    wl_array_init(&mut states);
    let mut r: bool =
        fill_array_from_toplevel_state(&mut states, (*toplevel).state);
    if !r {
        wl_resource_post_no_memory(resource);
        wl_array_release(&mut states);
        return
    }
    zwlr_foreign_toplevel_handle_v1_send_state(resource, &mut states);
    wl_array_release(&mut states);
    zwlr_foreign_toplevel_handle_v1_send_done(resource);
}
unsafe extern "C" fn foreign_toplevel_manager_bind(mut client: *mut wl_client,
                                                   mut data:
                                                       *mut libc::c_void,
                                                   mut version: uint32_t,
                                                   mut id: uint32_t) {
    let mut manager: *mut wlr_foreign_toplevel_manager_v1 =
        data as *mut wlr_foreign_toplevel_manager_v1;
    let mut resource: *mut wl_resource =
        wl_resource_create(client,
                           &zwlr_foreign_toplevel_manager_v1_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(client); return }
    wl_resource_set_implementation(resource,
                                   &foreign_toplevel_manager_impl as
                                       *const zwlr_foreign_toplevel_manager_v1_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void,
                                   Some(foreign_toplevel_manager_resource_destroy
                                            as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    wl_list_insert(&mut (*manager).resources, wl_resource_get_link(resource));
    let mut toplevel: *mut wlr_foreign_toplevel_handle_v1 =
        0 as *mut wlr_foreign_toplevel_handle_v1;
    let mut tmp: *mut wlr_foreign_toplevel_handle_v1 =
        0 as *mut wlr_foreign_toplevel_handle_v1;
    toplevel =
        ((*manager).toplevels.next as *mut libc::c_char).offset(-24) as
            *mut wlr_foreign_toplevel_handle_v1;
    tmp =
        ((*toplevel).link.next as *mut libc::c_char).offset(-24) as
            *mut wlr_foreign_toplevel_handle_v1;
    while &mut (*toplevel).link as *mut wl_list !=
              &mut (*manager).toplevels as *mut wl_list {
        let mut toplevel_resource: *mut wl_resource =
            create_toplevel_resource_for_resource(toplevel, resource);
        toplevel_send_details_to_toplevel_resource(toplevel,
                                                   toplevel_resource);
        toplevel = tmp;
        tmp =
            ((*toplevel).link.next as *mut libc::c_char).offset(-24) as
                *mut wlr_foreign_toplevel_handle_v1
    };
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_foreign_toplevel_manager_v1 =
        (listener as *mut libc::c_char).offset(-48) as
            *mut wlr_foreign_toplevel_manager_v1;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_foreign_toplevel_manager_v1_create(mut display:
                                                                    *mut wl_display)
 -> *mut wlr_foreign_toplevel_manager_v1 {
    let mut manager: *mut wlr_foreign_toplevel_manager_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_foreign_toplevel_manager_v1>() as
                   libc::c_ulong) as *mut wlr_foreign_toplevel_manager_v1;
    if manager.is_null() { return 0 as *mut wlr_foreign_toplevel_manager_v1 }
    (*manager).event_loop = wl_display_get_event_loop(display);
    (*manager).global =
        wl_global_create(display, &zwlr_foreign_toplevel_manager_v1_interface,
                         2i32, manager as *mut libc::c_void,
                         Some(foreign_toplevel_manager_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_foreign_toplevel_manager_v1
    }
    wl_signal_init(&mut (*manager).events.destroy);
    wl_list_init(&mut (*manager).resources);
    wl_list_init(&mut (*manager).toplevels);
    (*manager).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*manager).display_destroy);
    return manager;
}
