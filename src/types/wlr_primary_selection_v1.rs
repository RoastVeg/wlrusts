use libc;
extern "C" {
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_data_source;
    pub type wlr_drag;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    #[no_mangle]
    fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
    #[no_mangle]
    fn close(__fd: libc::c_int) -> libc::c_int;
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_resource_post_no_memory(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_link(resource: *mut wl_resource) -> *mut wl_list;
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_array_add(array: *mut wl_array, size: size_t) -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_from_link(resource: *mut wl_list) -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_get_client(resource: *mut wl_resource) -> *mut wl_client;
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn wlr_seat_client_from_resource(resource: *mut wl_resource)
     -> *mut wlr_seat_client;
    #[no_mangle]
    fn wlr_seat_client_for_wl_client(wlr_seat: *mut wlr_seat,
                                     wl_client: *mut wl_client)
     -> *mut wlr_seat_client;
    #[no_mangle]
    fn wlr_primary_selection_source_init(source:
                                             *mut wlr_primary_selection_source,
                                         impl_0:
                                             *const wlr_primary_selection_source_impl);
    #[no_mangle]
    fn wlr_primary_selection_source_destroy(source:
                                                *mut wlr_primary_selection_source);
    #[no_mangle]
    fn wlr_primary_selection_source_send(source:
                                             *mut wlr_primary_selection_source,
                                         mime_type: *const libc::c_char,
                                         fd: libc::c_int);
    /* *
 * Request setting the primary selection. If `client` is not null, then the
 * serial will be checked against the set of serials sent to the client on that
 * seat.
 */
    #[no_mangle]
    fn wlr_seat_request_set_primary_selection(seat: *mut wlr_seat,
                                              client: *mut wlr_seat_client,
                                              source:
                                                  *mut wlr_primary_selection_source,
                                              serial: uint32_t);
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    /* *
 * @page page_iface_zwp_primary_selection_device_manager_v1 zwp_primary_selection_device_manager_v1
 * @section page_iface_zwp_primary_selection_device_manager_v1_desc Description
 *
 * The primary selection device manager is a singleton global object that
 * provides access to the primary selection. It allows to create
 * wp_primary_selection_source objects, as well as retrieving the per-seat
 * wp_primary_selection_device objects.
 * @section page_iface_zwp_primary_selection_device_manager_v1_api API
 * See @ref iface_zwp_primary_selection_device_manager_v1.
 */
/* *
 * @defgroup iface_zwp_primary_selection_device_manager_v1 The zwp_primary_selection_device_manager_v1 interface
 *
 * The primary selection device manager is a singleton global object that
 * provides access to the primary selection. It allows to create
 * wp_primary_selection_source objects, as well as retrieving the per-seat
 * wp_primary_selection_device objects.
 */
    #[no_mangle]
    static zwp_primary_selection_device_manager_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_primary_selection_device_v1 zwp_primary_selection_device_v1
 * @section page_iface_zwp_primary_selection_device_v1_api API
 * See @ref iface_zwp_primary_selection_device_v1.
 */
/* *
 * @defgroup iface_zwp_primary_selection_device_v1 The zwp_primary_selection_device_v1 interface
 */
    #[no_mangle]
    static zwp_primary_selection_device_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_primary_selection_offer_v1 zwp_primary_selection_offer_v1
 * @section page_iface_zwp_primary_selection_offer_v1_desc Description
 *
 * A wp_primary_selection_offer represents an offer to transfer the contents
 * of the primary selection clipboard to the client. Similar to
 * wl_data_offer, the offer also describes the mime types that the data can
 * be converted to and provides the mechanisms for transferring the data
 * directly to the client.
 * @section page_iface_zwp_primary_selection_offer_v1_api API
 * See @ref iface_zwp_primary_selection_offer_v1.
 */
/* *
 * @defgroup iface_zwp_primary_selection_offer_v1 The zwp_primary_selection_offer_v1 interface
 *
 * A wp_primary_selection_offer represents an offer to transfer the contents
 * of the primary selection clipboard to the client. Similar to
 * wl_data_offer, the offer also describes the mime types that the data can
 * be converted to and provides the mechanisms for transferring the data
 * directly to the client.
 */
    #[no_mangle]
    static zwp_primary_selection_offer_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_primary_selection_source_v1 zwp_primary_selection_source_v1
 * @section page_iface_zwp_primary_selection_source_v1_desc Description
 *
 * The source side of a wp_primary_selection_offer, it provides a way to
 * describe the offered data and respond to requests to transfer the
 * requested contents of the primary selection clipboard.
 * @section page_iface_zwp_primary_selection_source_v1_api API
 * See @ref iface_zwp_primary_selection_source_v1.
 */
/* *
 * @defgroup iface_zwp_primary_selection_source_v1 The zwp_primary_selection_source_v1 interface
 *
 * The source side of a wp_primary_selection_offer, it provides a way to
 * describe the offered data and respond to requests to transfer the
 * requested contents of the primary selection clipboard.
 */
    #[no_mangle]
    static zwp_primary_selection_source_v1_interface: wl_interface;
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
}
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
pub type size_t = libc::c_ulong;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_array {
    pub size: size_t,
    pub alloc: size_t,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_0,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
/*
 * 32 bit regions
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_1,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_2,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_3,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_4,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_5,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_6,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_primary_selection_source {
    pub impl_0: *const wlr_primary_selection_source_impl,
    pub mime_types: wl_array,
    pub events: C2RustUnnamed_7,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_primary_selection_source_impl {
    pub send: Option<unsafe extern "C" fn(_:
                                              *mut wlr_primary_selection_source,
                                          _: *const libc::c_char,
                                          _: libc::c_int) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_:
                                                 *mut wlr_primary_selection_source)
                            -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_primary_selection_v1_device_manager {
    pub global: *mut wl_global,
    pub devices: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_8,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_primary_selection_v1_device {
    pub manager: *mut wlr_primary_selection_v1_device_manager,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub offers: wl_list,
    pub seat_destroy: wl_listener,
    pub seat_focus_change: wl_listener,
    pub seat_set_primary_selection: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct client_data_source {
    pub source: wlr_primary_selection_source,
    pub resource: *mut wl_resource,
    pub finalized: bool,
}
/* *
 * @ingroup iface_zwp_primary_selection_device_manager_v1
 * @struct zwp_primary_selection_device_manager_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_primary_selection_device_manager_v1_interface {
    pub create_source: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                   _: *mut wl_resource,
                                                   _: uint32_t) -> ()>,
    pub get_device: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                _: *mut wl_resource,
                                                _: uint32_t,
                                                _: *mut wl_resource) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* *
 * @ingroup iface_zwp_primary_selection_device_manager_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_device_manager_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_device_manager_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_device_v1
 * @struct zwp_primary_selection_device_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_primary_selection_device_v1_interface {
    pub set_selection: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                   _: *mut wl_resource,
                                                   _: *mut wl_resource,
                                                   _: uint32_t) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* *
 * @ingroup iface_zwp_primary_selection_source_v1
 * @struct zwp_primary_selection_source_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_primary_selection_source_v1_interface {
    pub offer: Option<unsafe extern "C" fn(_: *mut wl_client,
                                           _: *mut wl_resource,
                                           _: *const libc::c_char) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
/* *
 * @ingroup iface_zwp_primary_selection_offer_v1
 * @struct zwp_primary_selection_offer_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_primary_selection_offer_v1_interface {
    pub receive: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource,
                                             _: *const libc::c_char,
                                             _: int32_t) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
/* *
 * @ingroup iface_zwp_primary_selection_device_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_device_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_device_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_device_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_device_v1
 * Sends an data_offer event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_primary_selection_device_v1_send_data_offer(mut resource_:
                                                                         *mut wl_resource,
                                                                     mut offer:
                                                                         *mut wl_resource) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, offer);
}
/* *
 * @ingroup iface_zwp_primary_selection_device_v1
 * Sends an selection event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_primary_selection_device_v1_send_selection(mut resource_:
                                                                        *mut wl_resource,
                                                                    mut id:
                                                                        *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, id);
}
/* *
 * @ingroup iface_zwp_primary_selection_offer_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_offer_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_offer_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_offer_v1
 * Sends an offer event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_primary_selection_offer_v1_send_offer(mut resource_:
                                                                   *mut wl_resource,
                                                               mut mime_type:
                                                                   *const libc::c_char) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, mime_type);
}
/* *
 * @ingroup iface_zwp_primary_selection_source_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_source_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_source_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_source_v1
 */
/* *
 * @ingroup iface_zwp_primary_selection_source_v1
 * Sends an send event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_primary_selection_source_v1_send_send(mut resource_:
                                                                   *mut wl_resource,
                                                               mut mime_type:
                                                                   *const libc::c_char,
                                                               mut fd:
                                                                   int32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, mime_type, fd);
}
/* *
 * @ingroup iface_zwp_primary_selection_source_v1
 * Sends an cancelled event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_primary_selection_source_v1_send_cancelled(mut resource_:
                                                                        *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t);
}
unsafe extern "C" fn device_from_offer_resource(mut resource:
                                                    *mut wl_resource)
 -> *mut wlr_primary_selection_v1_device {
    if wl_resource_instance_of(resource,
                               &zwp_primary_selection_offer_v1_interface,
                               &offer_impl as
                                   *const zwp_primary_selection_offer_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_primary_selection_offer_v1_interface, &offer_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_primary_selection_v1.c\x00" as *const u8
                          as *const libc::c_char, 21i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 89],
                                                &[libc::c_char; 89]>(b"struct wlr_primary_selection_v1_device *device_from_offer_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_primary_selection_v1_device;
}
unsafe extern "C" fn offer_handle_receive(mut client: *mut wl_client,
                                          mut resource: *mut wl_resource,
                                          mut mime_type: *const libc::c_char,
                                          mut fd: int32_t) {
    let mut device: *mut wlr_primary_selection_v1_device =
        device_from_offer_resource(resource);
    if device.is_null() ||
           (*(*device).seat).primary_selection_source.is_null() {
        close(fd);
        return
    }
    wlr_primary_selection_source_send((*(*device).seat).primary_selection_source,
                                      mime_type, fd);
}
unsafe extern "C" fn offer_handle_destroy(mut client: *mut wl_client,
                                          mut resource: *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut offer_impl: zwp_primary_selection_offer_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_primary_selection_offer_v1_interface{receive:
                                                             Some(offer_handle_receive
                                                                      as
                                                                      unsafe extern "C" fn(_:
                                                                                               *mut wl_client,
                                                                                           _:
                                                                                               *mut wl_resource,
                                                                                           _:
                                                                                               *const libc::c_char,
                                                                                           _:
                                                                                               int32_t)
                                                                          ->
                                                                              ()),
                                                         destroy:
                                                             Some(offer_handle_destroy
                                                                      as
                                                                      unsafe extern "C" fn(_:
                                                                                               *mut wl_client,
                                                                                           _:
                                                                                               *mut wl_resource)
                                                                          ->
                                                                              ()),};
            init
        }
    };
unsafe extern "C" fn offer_handle_resource_destroy(mut resource:
                                                       *mut wl_resource) {
    wl_list_remove(wl_resource_get_link(resource));
}
unsafe extern "C" fn create_offer(mut device_resource: *mut wl_resource,
                                  mut source:
                                      *mut wlr_primary_selection_source) {
    let mut device: *mut wlr_primary_selection_v1_device =
        device_from_resource(device_resource);
    if !device.is_null() {
    } else {
        __assert_fail(b"device != NULL\x00" as *const u8 as
                          *const libc::c_char,
                      b"../types/wlr_primary_selection_v1.c\x00" as *const u8
                          as *const libc::c_char, 59i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 79],
                                                &[libc::c_char; 79]>(b"void create_offer(struct wl_resource *, struct wlr_primary_selection_source *)\x00")).as_ptr());
    };
    let mut client: *mut wl_client = wl_resource_get_client(device_resource);
    let mut version: uint32_t =
        wl_resource_get_version(device_resource) as uint32_t;
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &zwp_primary_selection_offer_v1_interface,
                           version as libc::c_int, 0i32 as uint32_t);
    if resource.is_null() {
        wl_resource_post_no_memory(device_resource);
        return
    }
    wl_resource_set_implementation(resource,
                                   &offer_impl as
                                       *const zwp_primary_selection_offer_v1_interface
                                       as *const libc::c_void,
                                   device as *mut libc::c_void,
                                   Some(offer_handle_resource_destroy as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    wl_list_insert(&mut (*device).offers, wl_resource_get_link(resource));
    zwp_primary_selection_device_v1_send_data_offer(device_resource,
                                                    resource);
    let mut p: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    p = (*source).mime_types.data as *mut *mut libc::c_char;
    while (p as *const libc::c_char) <
              ((*source).mime_types.data as
                   *const libc::c_char).offset((*source).mime_types.size as
                                                   isize) {
        zwp_primary_selection_offer_v1_send_offer(resource, *p);
        p = p.offset(1)
    }
    zwp_primary_selection_device_v1_send_selection(device_resource, resource);
}
unsafe extern "C" fn destroy_offer(mut resource: *mut wl_resource) {
    if device_from_offer_resource(resource).is_null() { return }
    // Make the offer inert
    wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
    let mut link: *mut wl_list = wl_resource_get_link(resource);
    wl_list_remove(link);
    wl_list_init(link);
}
unsafe extern "C" fn client_source_send(mut wlr_source:
                                            *mut wlr_primary_selection_source,
                                        mut mime_type: *const libc::c_char,
                                        mut fd: libc::c_int) {
    let mut source: *mut client_data_source =
        wlr_source as *mut client_data_source;
    zwp_primary_selection_source_v1_send_send((*source).resource, mime_type,
                                              fd);
    close(fd);
}
unsafe extern "C" fn client_source_destroy(mut wlr_source:
                                               *mut wlr_primary_selection_source) {
    let mut source: *mut client_data_source =
        wlr_source as *mut client_data_source;
    zwp_primary_selection_source_v1_send_cancelled((*source).resource);
    // Make the source resource inert
    wl_resource_set_user_data((*source).resource, 0 as *mut libc::c_void);
    free(source as *mut libc::c_void);
}
static mut client_source_impl: wlr_primary_selection_source_impl =
    unsafe {
        {
            let mut init =
                wlr_primary_selection_source_impl{send:
                                                      Some(client_source_send
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_primary_selection_source,
                                                                                    _:
                                                                                        *const libc::c_char,
                                                                                    _:
                                                                                        libc::c_int)
                                                                   -> ()),
                                                  destroy:
                                                      Some(client_source_destroy
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_primary_selection_source)
                                                                   -> ()),};
            init
        }
    };
unsafe extern "C" fn client_data_source_from_resource(mut resource:
                                                          *mut wl_resource)
 -> *mut client_data_source {
    if wl_resource_instance_of(resource,
                               &zwp_primary_selection_source_v1_interface,
                               &source_impl as
                                   *const zwp_primary_selection_source_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_primary_selection_source_v1_interface, &source_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_primary_selection_v1.c\x00" as *const u8
                          as *const libc::c_char, 131i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 82],
                                                &[libc::c_char; 82]>(b"struct client_data_source *client_data_source_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as *mut client_data_source;
}
unsafe extern "C" fn source_handle_offer(mut client: *mut wl_client,
                                         mut resource: *mut wl_resource,
                                         mut mime_type: *const libc::c_char) {
    let mut source: *mut client_data_source =
        client_data_source_from_resource(resource);
    if source.is_null() { return }
    if (*source).finalized {
        _wlr_log(WLR_DEBUG,
                 b"[%s:%d] Offering additional MIME type after set_selection\x00"
                     as *const u8 as *const libc::c_char,
                 b"../types/wlr_primary_selection_v1.c\x00" as *const u8 as
                     *const libc::c_char, 143i32);
    }
    let mut mime_type_ptr: *mut *const libc::c_char =
        0 as *mut *const libc::c_char;
    mime_type_ptr =
        (*source).source.mime_types.data as *mut *const libc::c_char;
    while (mime_type_ptr as *const libc::c_char) <
              ((*source).source.mime_types.data as
                   *const libc::c_char).offset((*source).source.mime_types.size
                                                   as isize) {
        if strcmp(*mime_type_ptr, mime_type) == 0i32 {
            _wlr_log(WLR_DEBUG,
                     b"[%s:%d] Ignoring duplicate MIME type offer %s\x00" as
                         *const u8 as *const libc::c_char,
                     b"../types/wlr_primary_selection_v1.c\x00" as *const u8
                         as *const libc::c_char, 150i32, mime_type);
            return
        }
        mime_type_ptr = mime_type_ptr.offset(1)
    }
    let mut dup_mime_type: *mut libc::c_char = strdup(mime_type);
    if dup_mime_type.is_null() {
        wl_resource_post_no_memory(resource);
        return
    }
    let mut p: *mut *mut libc::c_char =
        wl_array_add(&mut (*source).source.mime_types,
                     ::std::mem::size_of::<*mut libc::c_char>() as
                         libc::c_ulong) as *mut *mut libc::c_char;
    if p.is_null() {
        free(dup_mime_type as *mut libc::c_void);
        wl_resource_post_no_memory(resource);
        return
    }
    *p = dup_mime_type;
}
unsafe extern "C" fn source_handle_destroy(mut client: *mut wl_client,
                                           mut resource: *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut source_impl: zwp_primary_selection_source_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_primary_selection_source_v1_interface{offer:
                                                              Some(source_handle_offer
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                *const libc::c_char)
                                                                           ->
                                                                               ()),
                                                          destroy:
                                                              Some(source_handle_destroy
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),};
            init
        }
    };
unsafe extern "C" fn source_resource_handle_destroy(mut resource:
                                                        *mut wl_resource) {
    let mut source: *mut client_data_source =
        client_data_source_from_resource(resource);
    if source.is_null() { return }
    wlr_primary_selection_source_destroy(&mut (*source).source);
}
unsafe extern "C" fn device_from_resource(mut resource: *mut wl_resource)
 -> *mut wlr_primary_selection_v1_device {
    if wl_resource_instance_of(resource,
                               &zwp_primary_selection_device_v1_interface,
                               &device_impl as
                                   *const zwp_primary_selection_device_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_primary_selection_device_v1_interface, &device_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_primary_selection_v1.c\x00" as *const u8
                          as *const libc::c_char, 196i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 83],
                                                &[libc::c_char; 83]>(b"struct wlr_primary_selection_v1_device *device_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_primary_selection_v1_device;
}
unsafe extern "C" fn device_handle_set_selection(mut client: *mut wl_client,
                                                 mut resource:
                                                     *mut wl_resource,
                                                 mut source_resource:
                                                     *mut wl_resource,
                                                 mut serial: uint32_t) {
    let mut device: *mut wlr_primary_selection_v1_device =
        device_from_resource(resource);
    if device.is_null() { return }
    let mut client_source: *mut client_data_source =
        0 as *mut client_data_source;
    if !source_resource.is_null() {
        client_source = client_data_source_from_resource(source_resource)
    }
    let mut source: *mut wlr_primary_selection_source =
        0 as *mut wlr_primary_selection_source;
    if !client_source.is_null() {
        (*client_source).finalized = 1i32 != 0;
        source = &mut (*client_source).source
    }
    let mut seat_client: *mut wlr_seat_client =
        wlr_seat_client_for_wl_client((*device).seat, client);
    wlr_seat_request_set_primary_selection((*device).seat, seat_client,
                                           source, serial);
}
unsafe extern "C" fn device_handle_destroy(mut client: *mut wl_client,
                                           mut resource: *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut device_impl: zwp_primary_selection_device_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_primary_selection_device_v1_interface{set_selection:
                                                              Some(device_handle_set_selection
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                uint32_t)
                                                                           ->
                                                                               ()),
                                                          destroy:
                                                              Some(device_handle_destroy
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),};
            init
        }
    };
unsafe extern "C" fn device_handle_resource_destroy(mut resource:
                                                        *mut wl_resource) {
    wl_list_remove(wl_resource_get_link(resource));
}
unsafe extern "C" fn device_resource_send_selection(mut resource:
                                                        *mut wl_resource,
                                                    mut source:
                                                        *mut wlr_primary_selection_source) {
    if !device_from_resource(resource).is_null() {
    } else {
        __assert_fail(b"device_from_resource(resource) != NULL\x00" as
                          *const u8 as *const libc::c_char,
                      b"../types/wlr_primary_selection_v1.c\x00" as *const u8
                          as *const libc::c_char, 243i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 97],
                                                &[libc::c_char; 97]>(b"void device_resource_send_selection(struct wl_resource *, struct wlr_primary_selection_source *)\x00")).as_ptr());
    };
    if !source.is_null() {
        create_offer(resource, source);
    } else {
        zwp_primary_selection_device_v1_send_selection(resource,
                                                       0 as *mut wl_resource);
    };
}
unsafe extern "C" fn device_send_selection(mut device:
                                               *mut wlr_primary_selection_v1_device) {
    let mut seat_client: *mut wlr_seat_client =
        (*(*device).seat).keyboard_state.focused_client;
    if seat_client.is_null() { return }
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*device).resources.next);
    while wl_resource_get_link(resource) !=
              &mut (*device).resources as *mut wl_list {
        if wl_resource_get_client(resource) == (*seat_client).client {
            device_resource_send_selection(resource,
                                           (*(*device).seat).primary_selection_source);
        }
        resource =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    };
}
unsafe extern "C" fn device_handle_seat_destroy(mut listener:
                                                    *mut wl_listener,
                                                mut data: *mut libc::c_void) {
    let mut device: *mut wlr_primary_selection_v1_device =
        (listener as *mut libc::c_char).offset(-64) as
            *mut wlr_primary_selection_v1_device;
    device_destroy(device);
}
unsafe extern "C" fn device_handle_seat_focus_change(mut listener:
                                                         *mut wl_listener,
                                                     mut data:
                                                         *mut libc::c_void) {
    let mut device: *mut wlr_primary_selection_v1_device =
        (listener as *mut libc::c_char).offset(-88) as
            *mut wlr_primary_selection_v1_device;
    // TODO: maybe make previous offers inert, or set a NULL selection for
	// previous client?
    device_send_selection(device);
}
unsafe extern "C" fn device_handle_seat_set_primary_selection(mut listener:
                                                                  *mut wl_listener,
                                                              mut data:
                                                                  *mut libc::c_void) {
    let mut device: *mut wlr_primary_selection_v1_device =
        (listener as *mut libc::c_char).offset(-112) as
            *mut wlr_primary_selection_v1_device;
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    let mut tmp: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    tmp = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*device).offers.next);
    tmp = wl_resource_from_link((*(*device).offers.next).next);
    while wl_resource_get_link(resource) !=
              &mut (*device).offers as *mut wl_list {
        destroy_offer(resource);
        resource = tmp;
        tmp = wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    device_send_selection(device);
}
unsafe extern "C" fn get_or_create_device(mut manager:
                                              *mut wlr_primary_selection_v1_device_manager,
                                          mut seat: *mut wlr_seat)
 -> *mut wlr_primary_selection_v1_device {
    let mut device: *mut wlr_primary_selection_v1_device =
        0 as *mut wlr_primary_selection_v1_device;
    device =
        ((*manager).devices.next as *mut libc::c_char).offset(-16) as
            *mut wlr_primary_selection_v1_device;
    while &mut (*device).link as *mut wl_list !=
              &mut (*manager).devices as *mut wl_list {
        if (*device).seat == seat { return device }
        device =
            ((*device).link.next as *mut libc::c_char).offset(-16) as
                *mut wlr_primary_selection_v1_device
    }
    device =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_primary_selection_v1_device>() as
                   libc::c_ulong) as *mut wlr_primary_selection_v1_device;
    if device.is_null() { return 0 as *mut wlr_primary_selection_v1_device }
    (*device).manager = manager;
    (*device).seat = seat;
    wl_list_init(&mut (*device).resources);
    wl_list_insert(&mut (*manager).devices, &mut (*device).link);
    wl_list_init(&mut (*device).offers);
    (*device).seat_destroy.notify =
        Some(device_handle_seat_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*seat).events.destroy, &mut (*device).seat_destroy);
    (*device).seat_focus_change.notify =
        Some(device_handle_seat_focus_change as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*seat).keyboard_state.events.focus_change,
                  &mut (*device).seat_focus_change);
    (*device).seat_set_primary_selection.notify =
        Some(device_handle_seat_set_primary_selection as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*seat).events.set_primary_selection,
                  &mut (*device).seat_set_primary_selection);
    return device;
}
unsafe extern "C" fn device_destroy(mut device:
                                        *mut wlr_primary_selection_v1_device) {
    if device.is_null() { return }
    wl_list_remove(&mut (*device).link);
    wl_list_remove(&mut (*device).seat_destroy.link);
    wl_list_remove(&mut (*device).seat_focus_change.link);
    wl_list_remove(&mut (*device).seat_set_primary_selection.link);
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    let mut resource_tmp: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    resource_tmp = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*device).offers.next);
    resource_tmp = wl_resource_from_link((*(*device).offers.next).next);
    while wl_resource_get_link(resource) !=
              &mut (*device).offers as *mut wl_list {
        destroy_offer(resource);
        resource = resource_tmp;
        resource_tmp =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    resource = 0 as *mut wl_resource;
    resource_tmp = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*device).resources.next);
    resource_tmp = wl_resource_from_link((*(*device).resources.next).next);
    while wl_resource_get_link(resource) !=
              &mut (*device).resources as *mut wl_list {
        // Make the resource inert
        wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
        let mut link: *mut wl_list = wl_resource_get_link(resource);
        wl_list_remove(link);
        wl_list_init(link);
        resource = resource_tmp;
        resource_tmp =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    }
    free(device as *mut libc::c_void);
}
unsafe extern "C" fn manager_from_resource(mut resource: *mut wl_resource)
 -> *mut wlr_primary_selection_v1_device_manager {
    if wl_resource_instance_of(resource,
                               &zwp_primary_selection_device_manager_v1_interface,
                               &device_manager_impl as
                                   *const zwp_primary_selection_device_manager_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_primary_selection_device_manager_v1_interface, &device_manager_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_primary_selection_v1.c\x00" as *const u8
                          as *const libc::c_char, 367i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 92],
                                                &[libc::c_char; 92]>(b"struct wlr_primary_selection_v1_device_manager *manager_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_primary_selection_v1_device_manager;
}
unsafe extern "C" fn device_manager_handle_create_source(mut client:
                                                             *mut wl_client,
                                                         mut manager_resource:
                                                             *mut wl_resource,
                                                         mut id: uint32_t) {
    let mut source: *mut client_data_source =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<client_data_source>() as libc::c_ulong)
            as *mut client_data_source;
    if source.is_null() { wl_client_post_no_memory(client); return }
    wlr_primary_selection_source_init(&mut (*source).source,
                                      &client_source_impl);
    let mut version: uint32_t =
        wl_resource_get_version(manager_resource) as uint32_t;
    (*source).resource =
        wl_resource_create(client, &zwp_primary_selection_source_v1_interface,
                           version as libc::c_int, id);
    if (*source).resource.is_null() {
        free(source as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    wl_resource_set_implementation((*source).resource,
                                   &source_impl as
                                       *const zwp_primary_selection_source_v1_interface
                                       as *const libc::c_void,
                                   source as *mut libc::c_void,
                                   Some(source_resource_handle_destroy as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
}
unsafe extern "C" fn device_manager_handle_get_device(mut client:
                                                          *mut wl_client,
                                                      mut manager_resource:
                                                          *mut wl_resource,
                                                      mut id: uint32_t,
                                                      mut seat_resource:
                                                          *mut wl_resource) {
    let mut seat_client: *mut wlr_seat_client =
        wlr_seat_client_from_resource(seat_resource);
    let mut manager: *mut wlr_primary_selection_v1_device_manager =
        manager_from_resource(manager_resource);
    let mut device: *mut wlr_primary_selection_v1_device =
        get_or_create_device(manager, (*seat_client).seat);
    if device.is_null() {
        wl_resource_post_no_memory(manager_resource);
        return
    }
    let mut version: uint32_t =
        wl_resource_get_version(manager_resource) as uint32_t;
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &zwp_primary_selection_device_v1_interface,
                           version as libc::c_int, id);
    if resource.is_null() {
        wl_resource_post_no_memory(manager_resource);
        return
    }
    wl_resource_set_implementation(resource,
                                   &device_impl as
                                       *const zwp_primary_selection_device_v1_interface
                                       as *const libc::c_void,
                                   device as *mut libc::c_void,
                                   Some(device_handle_resource_destroy as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    wl_list_insert(&mut (*device).resources, wl_resource_get_link(resource));
    if (*(*device).seat).keyboard_state.focused_client == seat_client {
        device_resource_send_selection(resource,
                                       (*(*device).seat).primary_selection_source);
    };
}
unsafe extern "C" fn device_manager_handle_destroy(mut client: *mut wl_client,
                                                   mut manager_resource:
                                                       *mut wl_resource) {
    wl_resource_destroy(manager_resource);
}
static mut device_manager_impl:
       zwp_primary_selection_device_manager_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_primary_selection_device_manager_v1_interface{create_source:
                                                                      Some(device_manager_handle_create_source
                                                                               as
                                                                               unsafe extern "C" fn(_:
                                                                                                        *mut wl_client,
                                                                                                    _:
                                                                                                        *mut wl_resource,
                                                                                                    _:
                                                                                                        uint32_t)
                                                                                   ->
                                                                                       ()),
                                                                  get_device:
                                                                      Some(device_manager_handle_get_device
                                                                               as
                                                                               unsafe extern "C" fn(_:
                                                                                                        *mut wl_client,
                                                                                                    _:
                                                                                                        *mut wl_resource,
                                                                                                    _:
                                                                                                        uint32_t,
                                                                                                    _:
                                                                                                        *mut wl_resource)
                                                                                   ->
                                                                                       ()),
                                                                  destroy:
                                                                      Some(device_manager_handle_destroy
                                                                               as
                                                                               unsafe extern "C" fn(_:
                                                                                                        *mut wl_client,
                                                                                                    _:
                                                                                                        *mut wl_resource)
                                                                                   ->
                                                                                       ()),};
            init
        }
    };
unsafe extern "C" fn primary_selection_device_manager_bind(mut client:
                                                               *mut wl_client,
                                                           mut data:
                                                               *mut libc::c_void,
                                                           mut version:
                                                               uint32_t,
                                                           mut id: uint32_t) {
    let mut manager: *mut wlr_primary_selection_v1_device_manager =
        data as *mut wlr_primary_selection_v1_device_manager;
    let mut resource: *mut wl_resource =
        wl_resource_create(client,
                           &zwp_primary_selection_device_manager_v1_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(client); return }
    wl_resource_set_implementation(resource,
                                   &device_manager_impl as
                                       *const zwp_primary_selection_device_manager_v1_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void, None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_primary_selection_v1_device_manager =
        (listener as *mut libc::c_char).offset(-24) as
            *mut wlr_primary_selection_v1_device_manager;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// wlr_primary_selection_v1_device::link
/* *
 * A device is a per-seat object used to set and get the current selection.
 */
// wlr_primary_selection_v1_device_manager::devices
// wl_resource_get_link
// wl_resource_get_link
#[no_mangle]
pub unsafe extern "C" fn wlr_primary_selection_v1_device_manager_create(mut display:
                                                                            *mut wl_display)
 -> *mut wlr_primary_selection_v1_device_manager {
    let mut manager: *mut wlr_primary_selection_v1_device_manager =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_primary_selection_v1_device_manager>()
                   as libc::c_ulong) as
            *mut wlr_primary_selection_v1_device_manager;
    if manager.is_null() {
        return 0 as *mut wlr_primary_selection_v1_device_manager
    }
    (*manager).global =
        wl_global_create(display,
                         &zwp_primary_selection_device_manager_v1_interface,
                         1i32, manager as *mut libc::c_void,
                         Some(primary_selection_device_manager_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_primary_selection_v1_device_manager
    }
    wl_list_init(&mut (*manager).devices);
    wl_signal_init(&mut (*manager).events.destroy);
    (*manager).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*manager).display_destroy);
    return manager;
}
