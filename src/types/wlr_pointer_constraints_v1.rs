use libc;
extern "C" {
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    /* creation/destruction */
    #[no_mangle]
    fn pixman_region32_init(region: *mut pixman_region32_t);
    #[no_mangle]
    fn pixman_region32_fini(region: *mut pixman_region32_t);
    #[no_mangle]
    fn pixman_region32_copy(dest: *mut pixman_region32_t,
                            source: *mut pixman_region32_t) -> pixman_bool_t;
    #[no_mangle]
    fn pixman_region32_intersect(new_reg: *mut pixman_region32_t,
                                 reg1: *mut pixman_region32_t,
                                 reg2: *mut pixman_region32_t)
     -> pixman_bool_t;
    #[no_mangle]
    fn pixman_region32_not_empty(region: *mut pixman_region32_t)
     -> pixman_bool_t;
    #[no_mangle]
    fn pixman_region32_clear(region: *mut pixman_region32_t);
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_resource_post_error(resource: *mut wl_resource, code: uint32_t,
                              msg: *const libc::c_char, _: ...);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn wlr_surface_from_resource(resource: *mut wl_resource)
     -> *mut wlr_surface;
    /* *
 * Get a seat client from a pointer resource. Returns NULL if inert.
 */
    #[no_mangle]
    fn wlr_seat_client_from_pointer_resource(resource: *mut wl_resource)
     -> *mut wlr_seat_client;
    /* *
 * @page page_iface_zwp_pointer_constraints_v1 zwp_pointer_constraints_v1
 * @section page_iface_zwp_pointer_constraints_v1_desc Description
 *
 * The global interface exposing pointer constraining functionality. It
 * exposes two requests: lock_pointer for locking the pointer to its
 * position, and confine_pointer for locking the pointer to a region.
 *
 * The lock_pointer and confine_pointer requests create the objects
 * wp_locked_pointer and wp_confined_pointer respectively, and the client can
 * use these objects to interact with the lock.
 *
 * For any surface, only one lock or confinement may be active across all
 * wl_pointer objects of the same seat. If a lock or confinement is requested
 * when another lock or confinement is active or requested on the same surface
 * and with any of the wl_pointer objects of the same seat, an
 * 'already_constrained' error will be raised.
 * @section page_iface_zwp_pointer_constraints_v1_api API
 * See @ref iface_zwp_pointer_constraints_v1.
 */
/* *
 * @defgroup iface_zwp_pointer_constraints_v1 The zwp_pointer_constraints_v1 interface
 *
 * The global interface exposing pointer constraining functionality. It
 * exposes two requests: lock_pointer for locking the pointer to its
 * position, and confine_pointer for locking the pointer to a region.
 *
 * The lock_pointer and confine_pointer requests create the objects
 * wp_locked_pointer and wp_confined_pointer respectively, and the client can
 * use these objects to interact with the lock.
 *
 * For any surface, only one lock or confinement may be active across all
 * wl_pointer objects of the same seat. If a lock or confinement is requested
 * when another lock or confinement is active or requested on the same surface
 * and with any of the wl_pointer objects of the same seat, an
 * 'already_constrained' error will be raised.
 */
    #[no_mangle]
    static zwp_pointer_constraints_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_locked_pointer_v1 zwp_locked_pointer_v1
 * @section page_iface_zwp_locked_pointer_v1_desc Description
 *
 * The wp_locked_pointer interface represents a locked pointer state.
 *
 * While the lock of this object is active, the wl_pointer objects of the
 * associated seat will not emit any wl_pointer.motion events.
 *
 * This object will send the event 'locked' when the lock is activated.
 * Whenever the lock is activated, it is guaranteed that the locked surface
 * will already have received pointer focus and that the pointer will be
 * within the region passed to the request creating this object.
 *
 * To unlock the pointer, send the destroy request. This will also destroy
 * the wp_locked_pointer object.
 *
 * If the compositor decides to unlock the pointer the unlocked event is
 * sent. See wp_locked_pointer.unlock for details.
 *
 * When unlocking, the compositor may warp the cursor position to the set
 * cursor position hint. If it does, it will not result in any relative
 * motion events emitted via wp_relative_pointer.
 *
 * If the surface the lock was requested on is destroyed and the lock is not
 * yet activated, the wp_locked_pointer object is now defunct and must be
 * destroyed.
 * @section page_iface_zwp_locked_pointer_v1_api API
 * See @ref iface_zwp_locked_pointer_v1.
 */
/* *
 * @defgroup iface_zwp_locked_pointer_v1 The zwp_locked_pointer_v1 interface
 *
 * The wp_locked_pointer interface represents a locked pointer state.
 *
 * While the lock of this object is active, the wl_pointer objects of the
 * associated seat will not emit any wl_pointer.motion events.
 *
 * This object will send the event 'locked' when the lock is activated.
 * Whenever the lock is activated, it is guaranteed that the locked surface
 * will already have received pointer focus and that the pointer will be
 * within the region passed to the request creating this object.
 *
 * To unlock the pointer, send the destroy request. This will also destroy
 * the wp_locked_pointer object.
 *
 * If the compositor decides to unlock the pointer the unlocked event is
 * sent. See wp_locked_pointer.unlock for details.
 *
 * When unlocking, the compositor may warp the cursor position to the set
 * cursor position hint. If it does, it will not result in any relative
 * motion events emitted via wp_relative_pointer.
 *
 * If the surface the lock was requested on is destroyed and the lock is not
 * yet activated, the wp_locked_pointer object is now defunct and must be
 * destroyed.
 */
    #[no_mangle]
    static zwp_locked_pointer_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_confined_pointer_v1 zwp_confined_pointer_v1
 * @section page_iface_zwp_confined_pointer_v1_desc Description
 *
 * The wp_confined_pointer interface represents a confined pointer state.
 *
 * This object will send the event 'confined' when the confinement is
 * activated. Whenever the confinement is activated, it is guaranteed that
 * the surface the pointer is confined to will already have received pointer
 * focus and that the pointer will be within the region passed to the request
 * creating this object. It is up to the compositor to decide whether this
 * requires some user interaction and if the pointer will warp to within the
 * passed region if outside.
 *
 * To unconfine the pointer, send the destroy request. This will also destroy
 * the wp_confined_pointer object.
 *
 * If the compositor decides to unconfine the pointer the unconfined event is
 * sent. The wp_confined_pointer object is at this point defunct and should
 * be destroyed.
 * @section page_iface_zwp_confined_pointer_v1_api API
 * See @ref iface_zwp_confined_pointer_v1.
 */
/* *
 * @defgroup iface_zwp_confined_pointer_v1 The zwp_confined_pointer_v1 interface
 *
 * The wp_confined_pointer interface represents a confined pointer state.
 *
 * This object will send the event 'confined' when the confinement is
 * activated. Whenever the confinement is activated, it is guaranteed that
 * the surface the pointer is confined to will already have received pointer
 * focus and that the pointer will be within the region passed to the request
 * creating this object. It is up to the compositor to decide whether this
 * requires some user interaction and if the pointer will warp to within the
 * passed region if outside.
 *
 * To unconfine the pointer, send the destroy request. This will also destroy
 * the wp_confined_pointer object.
 *
 * If the compositor decides to unconfine the pointer the unconfined event is
 * sent. The wp_confined_pointer object is at this point defunct and should
 * be destroyed.
 */
    #[no_mangle]
    static zwp_confined_pointer_v1_interface: wl_interface;
    #[no_mangle]
    fn wlr_region_from_resource(resource: *mut wl_resource)
     -> *mut pixman_region32_t;
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
}
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint32_t = __uint32_t;
/* **********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/
/*
 * Copyright © 1998, 2004 Keith Packard
 * Copyright   2007 Red Hat, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * Standard integers
 */
/*
 * Boolean
 */
pub type pixman_bool_t = libc::c_int;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
/*
 * 32 bit regions
 */
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
pub type size_t = libc::c_ulong;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
pub type wl_fixed_t = int32_t;
#[derive ( Copy, Clone )]
#[repr ( C )]
pub union C2RustUnnamed {
    pub d: libc::c_double,
    pub i: int64_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_1,
    pub events: C2RustUnnamed_0,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_2,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
/* *
 * Contains state for a single client's bound wl_seat resource and can be used
 * to issue input events to that client. The lifetime of these objects is
 * managed by wlr_seat; some may be NULL.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_3,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_4,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
// XXX this will conflict with the actual touch cancel which is different so
	// we need to rename this
/* *
 * Passed to `wlr_seat_touch_start_grab()` to start a grab of the touch device.
 * The grabber is responsible for handling touch events for the seat.
 */
/* *
 * Passed to `wlr_seat_keyboard_start_grab()` to start a grab of the keyboard.
 * The grabber is responsible for handling keyboard events for the seat.
 */
/* *
 * Passed to `wlr_seat_pointer_start_grab()` to start a grab of the pointer. The
 * grabber is responsible for handling pointer events for the seat.
 */
// wlr_seat_pointer_focus_change_event
// TODO: May be useful to be able to simulate keyboard input events
// wlr_seat_keyboard_focus_change_event
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_5,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_6,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_7,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 * wp_pointer_constraints error values
 *
 * These errors can be emitted in response to wp_pointer_constraints
 * requests.
 */
pub type zwp_pointer_constraints_v1_error = libc::c_uint;
/* *
	 * pointer constraint already requested on that surface
	 */
pub const ZWP_POINTER_CONSTRAINTS_V1_ERROR_ALREADY_CONSTRAINED:
          zwp_pointer_constraints_v1_error =
    1;
/* ZWP_POINTER_CONSTRAINTS_V1_ERROR_ENUM */
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 * the pointer constraint may reactivate
 *
 * A persistent pointer constraint may again reactivate once it has
 * been deactivated. See the corresponding deactivation event
 * (wp_locked_pointer.unlocked and wp_confined_pointer.unconfined) for
 * details.
 */
pub type zwp_pointer_constraints_v1_lifetime = libc::c_uint;
pub const ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_PERSISTENT:
          zwp_pointer_constraints_v1_lifetime =
    2;
pub const ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ONESHOT:
          zwp_pointer_constraints_v1_lifetime =
    1;
/* ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ENUM */
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 * @struct zwp_pointer_constraints_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_pointer_constraints_v1_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub lock_pointer: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                  _: *mut wl_resource,
                                                  _: uint32_t,
                                                  _: *mut wl_resource,
                                                  _: *mut wl_resource,
                                                  _: *mut wl_resource,
                                                  _: uint32_t) -> ()>,
    pub confine_pointer: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                     _: *mut wl_resource,
                                                     _: uint32_t,
                                                     _: *mut wl_resource,
                                                     _: *mut wl_resource,
                                                     _: *mut wl_resource,
                                                     _: uint32_t) -> ()>,
}
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 */
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 */
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 */
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 * @struct zwp_locked_pointer_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_locked_pointer_v1_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub set_cursor_position_hint: Option<unsafe extern "C" fn(_:
                                                                  *mut wl_client,
                                                              _:
                                                                  *mut wl_resource,
                                                              _: wl_fixed_t,
                                                              _: wl_fixed_t)
                                             -> ()>,
    pub set_region: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                _: *mut wl_resource,
                                                _: *mut wl_resource) -> ()>,
}
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 * @struct zwp_confined_pointer_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_confined_pointer_v1_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub set_region: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                _: *mut wl_resource,
                                                _: *mut wl_resource) -> ()>,
}
pub type wlr_pointer_constraint_v1_type = libc::c_uint;
pub const WLR_POINTER_CONSTRAINT_V1_CONFINED: wlr_pointer_constraint_v1_type =
    1;
pub const WLR_POINTER_CONSTRAINT_V1_LOCKED: wlr_pointer_constraint_v1_type =
    0;
pub type wlr_pointer_constraint_v1_state_field = libc::c_uint;
pub const WLR_POINTER_CONSTRAINT_V1_STATE_CURSOR_HINT:
          wlr_pointer_constraint_v1_state_field =
    2;
pub const WLR_POINTER_CONSTRAINT_V1_STATE_REGION:
          wlr_pointer_constraint_v1_state_field =
    1;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_constraint_v1_state {
    pub committed: uint32_t,
    pub region: pixman_region32_t,
    pub cursor_hint: C2RustUnnamed_8,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub x: libc::c_double,
    pub y: libc::c_double,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_constraint_v1 {
    pub pointer_constraints: *mut wlr_pointer_constraints_v1,
    pub resource: *mut wl_resource,
    pub surface: *mut wlr_surface,
    pub seat: *mut wlr_seat,
    pub lifetime: zwp_pointer_constraints_v1_lifetime,
    pub type_0: wlr_pointer_constraint_v1_type,
    pub region: pixman_region32_t,
    pub current: wlr_pointer_constraint_v1_state,
    pub pending: wlr_pointer_constraint_v1_state,
    pub surface_commit: wl_listener,
    pub surface_destroy: wl_listener,
    pub seat_destroy: wl_listener,
    pub link: wl_list,
    pub events: C2RustUnnamed_9,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_constraints_v1 {
    pub global: *mut wl_global,
    pub constraints: wl_list,
    pub events: C2RustUnnamed_10,
    pub display_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub new_constraint: wl_signal,
}
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
#[inline]
unsafe extern "C" fn wl_fixed_to_double(mut f: wl_fixed_t) -> libc::c_double {
    let mut u: C2RustUnnamed = C2RustUnnamed{d: 0.,};
    u.i =
        ((1023i64 + 44i64 << 52i32) + (1i64 << 51i32) + f as libc::c_longlong)
            as int64_t;
    return u.d - (3i64 << 43i32) as libc::c_double;
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 */
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 */
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 */
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 */
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 */
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 * Sends an locked event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_locked_pointer_v1_send_locked(mut resource_:
                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 0i32 as uint32_t);
}
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 * Sends an unlocked event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_locked_pointer_v1_send_unlocked(mut resource_:
                                                             *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t);
}
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 */
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 */
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 */
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 */
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 * Sends an confined event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_confined_pointer_v1_send_confined(mut resource_:
                                                               *mut wl_resource) {
    wl_resource_post_event(resource_, 0i32 as uint32_t);
}
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 * Sends an unconfined event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_confined_pointer_v1_send_unconfined(mut resource_:
                                                                 *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t);
}
unsafe extern "C" fn pointer_constraint_from_resource(mut resource:
                                                          *mut wl_resource)
 -> *mut wlr_pointer_constraint_v1 {
    if wl_resource_instance_of(resource, &zwp_confined_pointer_v1_interface,
                               &confined_pointer_impl as
                                   *const zwp_confined_pointer_v1_interface as
                                   *const libc::c_void) != 0 ||
           wl_resource_instance_of(resource, &zwp_locked_pointer_v1_interface,
                                   &locked_pointer_impl as
                                       *const zwp_locked_pointer_v1_interface
                                       as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of( resource, &zwp_confined_pointer_v1_interface, &confined_pointer_impl) || wl_resource_instance_of( resource, &zwp_locked_pointer_v1_interface, &locked_pointer_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_pointer_constraints_v1.c\x00" as
                          *const u8 as *const libc::c_char,
                      26i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 89],
                                                &[libc::c_char; 89]>(b"struct wlr_pointer_constraint_v1 *pointer_constraint_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_pointer_constraint_v1;
}
unsafe extern "C" fn pointer_constraints_from_resource(mut resource:
                                                           *mut wl_resource)
 -> *mut wlr_pointer_constraints_v1 {
    if wl_resource_instance_of(resource,
                               &zwp_pointer_constraints_v1_interface,
                               &pointer_constraints_impl as
                                   *const zwp_pointer_constraints_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_pointer_constraints_v1_interface, &pointer_constraints_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_pointer_constraints_v1.c\x00" as
                          *const u8 as *const libc::c_char,
                      33i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 91],
                                                &[libc::c_char; 91]>(b"struct wlr_pointer_constraints_v1 *pointer_constraints_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_pointer_constraints_v1;
}
unsafe extern "C" fn resource_destroy(mut client: *mut wl_client,
                                      mut resource: *mut wl_resource) {
    wl_resource_destroy(resource);
}
unsafe extern "C" fn pointer_constraint_destroy(mut constraint:
                                                    *mut wlr_pointer_constraint_v1) {
    if constraint.is_null() { return }
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] destroying constraint %p\x00" as *const u8 as
                 *const libc::c_char,
             b"../types/wlr_pointer_constraints_v1.c\x00" as *const u8 as
                 *const libc::c_char, 47i32, constraint);
    wlr_signal_emit_safe(&mut (*constraint).events.destroy,
                         constraint as *mut libc::c_void);
    wl_resource_set_user_data((*constraint).resource, 0 as *mut libc::c_void);
    wl_list_remove(&mut (*constraint).link);
    wl_list_remove(&mut (*constraint).surface_commit.link);
    wl_list_remove(&mut (*constraint).surface_destroy.link);
    wl_list_remove(&mut (*constraint).seat_destroy.link);
    pixman_region32_fini(&mut (*constraint).current.region);
    pixman_region32_fini(&mut (*constraint).pending.region);
    pixman_region32_fini(&mut (*constraint).region);
    free(constraint as *mut libc::c_void);
}
unsafe extern "C" fn pointer_constraint_destroy_resource(mut resource:
                                                             *mut wl_resource) {
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        pointer_constraint_from_resource(resource);
    pointer_constraint_destroy(constraint);
}
unsafe extern "C" fn pointer_constraint_set_region(mut constraint:
                                                       *mut wlr_pointer_constraint_v1,
                                                   mut region_resource:
                                                       *mut wl_resource) {
    pixman_region32_clear(&mut (*constraint).pending.region);
    if !region_resource.is_null() {
        let mut region: *mut pixman_region32_t =
            wlr_region_from_resource(region_resource);
        pixman_region32_copy(&mut (*constraint).pending.region, region);
    }
    (*constraint).pending.committed |=
        WLR_POINTER_CONSTRAINT_V1_STATE_REGION as libc::c_int as libc::c_uint;
}
unsafe extern "C" fn pointer_constraint_handle_set_region(mut client:
                                                              *mut wl_client,
                                                          mut resource:
                                                              *mut wl_resource,
                                                          mut region_resource:
                                                              *mut wl_resource) {
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        pointer_constraint_from_resource(resource);
    if constraint.is_null() { return }
    pointer_constraint_set_region(constraint, region_resource);
}
unsafe extern "C" fn pointer_constraint_set_cursor_position_hint(mut client:
                                                                     *mut wl_client,
                                                                 mut resource:
                                                                     *mut wl_resource,
                                                                 mut x:
                                                                     wl_fixed_t,
                                                                 mut y:
                                                                     wl_fixed_t) {
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        pointer_constraint_from_resource(resource);
    if constraint.is_null() { return }
    (*constraint).pending.cursor_hint.x = wl_fixed_to_double(x);
    (*constraint).pending.cursor_hint.y = wl_fixed_to_double(y);
    (*constraint).pending.committed |=
        WLR_POINTER_CONSTRAINT_V1_STATE_CURSOR_HINT as libc::c_int as
            libc::c_uint;
}
unsafe extern "C" fn pointer_constraint_commit(mut constraint:
                                                   *mut wlr_pointer_constraint_v1) {
    if (*constraint).pending.committed &
           WLR_POINTER_CONSTRAINT_V1_STATE_REGION as libc::c_int as
               libc::c_uint != 0 {
        pixman_region32_copy(&mut (*constraint).current.region,
                             &mut (*constraint).pending.region);
    }
    if (*constraint).pending.committed &
           WLR_POINTER_CONSTRAINT_V1_STATE_CURSOR_HINT as libc::c_int as
               libc::c_uint != 0 {
        (*constraint).current.cursor_hint = (*constraint).pending.cursor_hint
    }
    (*constraint).current.committed |= (*constraint).pending.committed;
    (*constraint).pending.committed = 0i32 as uint32_t;
    pixman_region32_clear(&mut (*constraint).region);
    if pixman_region32_not_empty(&mut (*constraint).current.region) != 0 {
        pixman_region32_intersect(&mut (*constraint).region,
                                  &mut (*(*constraint).surface).input_region,
                                  &mut (*constraint).current.region);
    } else {
        pixman_region32_copy(&mut (*constraint).region,
                             &mut (*(*constraint).surface).input_region);
    };
}
unsafe extern "C" fn handle_surface_commit(mut listener: *mut wl_listener,
                                           mut data: *mut libc::c_void) {
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        (listener as *mut libc::c_char).offset(-160) as
            *mut wlr_pointer_constraint_v1;
    pointer_constraint_commit(constraint);
}
unsafe extern "C" fn handle_surface_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        (listener as *mut libc::c_char).offset(-184) as
            *mut wlr_pointer_constraint_v1;
    pointer_constraint_destroy(constraint);
}
unsafe extern "C" fn handle_seat_destroy(mut listener: *mut wl_listener,
                                         mut data: *mut libc::c_void) {
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        (listener as *mut libc::c_char).offset(-208) as
            *mut wlr_pointer_constraint_v1;
    pointer_constraint_destroy(constraint);
}
static mut confined_pointer_impl: zwp_confined_pointer_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_confined_pointer_v1_interface{destroy:
                                                      Some(resource_destroy as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource)
                                                                   -> ()),
                                                  set_region:
                                                      Some(pointer_constraint_handle_set_region
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource,
                                                                                    _:
                                                                                        *mut wl_resource)
                                                                   -> ()),};
            init
        }
    };
static mut locked_pointer_impl: zwp_locked_pointer_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_locked_pointer_v1_interface{destroy:
                                                    Some(resource_destroy as
                                                             unsafe extern "C" fn(_:
                                                                                      *mut wl_client,
                                                                                  _:
                                                                                      *mut wl_resource)
                                                                 -> ()),
                                                set_cursor_position_hint:
                                                    Some(pointer_constraint_set_cursor_position_hint
                                                             as
                                                             unsafe extern "C" fn(_:
                                                                                      *mut wl_client,
                                                                                  _:
                                                                                      *mut wl_resource,
                                                                                  _:
                                                                                      wl_fixed_t,
                                                                                  _:
                                                                                      wl_fixed_t)
                                                                 -> ()),
                                                set_region:
                                                    Some(pointer_constraint_handle_set_region
                                                             as
                                                             unsafe extern "C" fn(_:
                                                                                      *mut wl_client,
                                                                                  _:
                                                                                      *mut wl_resource,
                                                                                  _:
                                                                                      *mut wl_resource)
                                                                 -> ()),};
            init
        }
    };
unsafe extern "C" fn pointer_constraint_create(mut client: *mut wl_client,
                                               mut pointer_constraints_resource:
                                                   *mut wl_resource,
                                               mut id: uint32_t,
                                               mut surface_resource:
                                                   *mut wl_resource,
                                               mut pointer_resource:
                                                   *mut wl_resource,
                                               mut region_resource:
                                                   *mut wl_resource,
                                               mut lifetime:
                                                   zwp_pointer_constraints_v1_lifetime,
                                               mut type_0:
                                                   wlr_pointer_constraint_v1_type) {
    let mut pointer_constraints: *mut wlr_pointer_constraints_v1 =
        pointer_constraints_from_resource(pointer_constraints_resource);
    let mut surface: *mut wlr_surface =
        wlr_surface_from_resource(surface_resource);
    let mut seat: *mut wlr_seat =
        (*wlr_seat_client_from_pointer_resource(pointer_resource)).seat;
    if !wlr_pointer_constraints_v1_constraint_for_surface(pointer_constraints,
                                                          surface,
                                                          seat).is_null() {
        wl_resource_post_error(pointer_constraints_resource,
                               ZWP_POINTER_CONSTRAINTS_V1_ERROR_ALREADY_CONSTRAINED
                                   as libc::c_int as uint32_t,
                               b"a pointer constraint with a wl_pointer of the same wl_seat is already on this surface\x00"
                                   as *const u8 as *const libc::c_char);
        return
    }
    let mut version: uint32_t =
        wl_resource_get_version(pointer_constraints_resource) as uint32_t;
    let mut locked_pointer: bool =
        type_0 as libc::c_uint ==
            WLR_POINTER_CONSTRAINT_V1_LOCKED as libc::c_int as libc::c_uint;
    let mut resource: *mut wl_resource =
        if locked_pointer as libc::c_int != 0 {
            wl_resource_create(client, &zwp_locked_pointer_v1_interface,
                               version as libc::c_int, id)
        } else {
            wl_resource_create(client, &zwp_confined_pointer_v1_interface,
                               version as libc::c_int, id)
        };
    if resource.is_null() { wl_client_post_no_memory(client); return }
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_pointer_constraint_v1>() as
                   libc::c_ulong) as *mut wlr_pointer_constraint_v1;
    if constraint.is_null() {
        wl_resource_destroy(resource);
        wl_client_post_no_memory(client);
        return
    }
    (*constraint).resource = resource;
    (*constraint).surface = surface;
    (*constraint).seat = seat;
    (*constraint).lifetime = lifetime;
    (*constraint).type_0 = type_0;
    (*constraint).pointer_constraints = pointer_constraints;
    wl_signal_init(&mut (*constraint).events.destroy);
    pixman_region32_init(&mut (*constraint).region);
    pixman_region32_init(&mut (*constraint).pending.region);
    pixman_region32_init(&mut (*constraint).current.region);
    pointer_constraint_set_region(constraint, region_resource);
    pointer_constraint_commit(constraint);
    (*constraint).surface_commit.notify =
        Some(handle_surface_commit as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*surface).events.commit,
                  &mut (*constraint).surface_commit);
    (*constraint).surface_destroy.notify =
        Some(handle_surface_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*surface).events.destroy,
                  &mut (*constraint).surface_destroy);
    (*constraint).seat_destroy.notify =
        Some(handle_seat_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*seat).events.destroy,
                  &mut (*constraint).seat_destroy);
    let mut impl_0: *mut libc::c_void =
        if locked_pointer as libc::c_int != 0 {
            &locked_pointer_impl as *const zwp_locked_pointer_v1_interface as
                *mut libc::c_void
        } else {
            &confined_pointer_impl as *const zwp_confined_pointer_v1_interface
                as *mut libc::c_void
        };
    wl_resource_set_implementation((*constraint).resource, impl_0,
                                   constraint as *mut libc::c_void,
                                   Some(pointer_constraint_destroy_resource as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] new %s_pointer %p (res %p)\x00" as *const u8 as
                 *const libc::c_char,
             b"../types/wlr_pointer_constraints_v1.c\x00" as *const u8 as
                 *const libc::c_char, 238i32,
             if locked_pointer as libc::c_int != 0 {
                 b"locked\x00" as *const u8 as *const libc::c_char
             } else { b"confined\x00" as *const u8 as *const libc::c_char },
             constraint, (*constraint).resource);
    wl_list_insert(&mut (*pointer_constraints).constraints,
                   &mut (*constraint).link);
    wlr_signal_emit_safe(&mut (*pointer_constraints).events.new_constraint,
                         constraint as *mut libc::c_void);
}
unsafe extern "C" fn pointer_constraints_lock_pointer(mut client:
                                                          *mut wl_client,
                                                      mut cons_resource:
                                                          *mut wl_resource,
                                                      mut id: uint32_t,
                                                      mut surface:
                                                          *mut wl_resource,
                                                      mut pointer:
                                                          *mut wl_resource,
                                                      mut region:
                                                          *mut wl_resource,
                                                      mut lifetime:
                                                          zwp_pointer_constraints_v1_lifetime) {
    pointer_constraint_create(client, cons_resource, id, surface, pointer,
                              region, lifetime,
                              WLR_POINTER_CONSTRAINT_V1_LOCKED);
}
unsafe extern "C" fn pointer_constraints_confine_pointer(mut client:
                                                             *mut wl_client,
                                                         mut cons_resource:
                                                             *mut wl_resource,
                                                         mut id: uint32_t,
                                                         mut surface:
                                                             *mut wl_resource,
                                                         mut pointer:
                                                             *mut wl_resource,
                                                         mut region:
                                                             *mut wl_resource,
                                                         mut lifetime:
                                                             zwp_pointer_constraints_v1_lifetime) {
    pointer_constraint_create(client, cons_resource, id, surface, pointer,
                              region, lifetime,
                              WLR_POINTER_CONSTRAINT_V1_CONFINED);
}
static mut pointer_constraints_impl: zwp_pointer_constraints_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_pointer_constraints_v1_interface{destroy:
                                                         Some(resource_destroy
                                                                  as
                                                                  unsafe extern "C" fn(_:
                                                                                           *mut wl_client,
                                                                                       _:
                                                                                           *mut wl_resource)
                                                                      -> ()),
                                                     lock_pointer:
                                                         ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                 *mut wl_client,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 uint32_t,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 zwp_pointer_constraints_v1_lifetime)
                                                                                            ->
                                                                                                ()>,
                                                                                 Option<unsafe extern "C" fn(_:
                                                                                                                 *mut wl_client,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 uint32_t,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 uint32_t)
                                                                                            ->
                                                                                                ()>>(Some(pointer_constraints_lock_pointer
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut wl_client,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       uint32_t,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       zwp_pointer_constraints_v1_lifetime)
                                                                                                                  ->
                                                                                                                      ())),
                                                     confine_pointer:
                                                         ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                                                 *mut wl_client,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 uint32_t,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 zwp_pointer_constraints_v1_lifetime)
                                                                                            ->
                                                                                                ()>,
                                                                                 Option<unsafe extern "C" fn(_:
                                                                                                                 *mut wl_client,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 uint32_t,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 *mut wl_resource,
                                                                                                             _:
                                                                                                                 uint32_t)
                                                                                            ->
                                                                                                ()>>(Some(pointer_constraints_confine_pointer
                                                                                                              as
                                                                                                              unsafe extern "C" fn(_:
                                                                                                                                       *mut wl_client,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       uint32_t,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       *mut wl_resource,
                                                                                                                                   _:
                                                                                                                                       zwp_pointer_constraints_v1_lifetime)
                                                                                                                  ->
                                                                                                                      ())),};
            init
        }
    };
unsafe extern "C" fn pointer_constraints_bind(mut client: *mut wl_client,
                                              mut data: *mut libc::c_void,
                                              mut version: uint32_t,
                                              mut id: uint32_t) {
    let mut pointer_constraints: *mut wlr_pointer_constraints_v1 =
        data as *mut wlr_pointer_constraints_v1;
    if !client.is_null() && !pointer_constraints.is_null() {
    } else {
        __assert_fail(b"client && pointer_constraints\x00" as *const u8 as
                          *const libc::c_char,
                      b"../types/wlr_pointer_constraints_v1.c\x00" as
                          *const u8 as *const libc::c_char,
                      273i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 78],
                                                &[libc::c_char; 78]>(b"void pointer_constraints_bind(struct wl_client *, void *, uint32_t, uint32_t)\x00")).as_ptr());
    };
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &zwp_pointer_constraints_v1_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(client); return }
    wl_resource_set_implementation(resource,
                                   &pointer_constraints_impl as
                                       *const zwp_pointer_constraints_v1_interface
                                       as *const libc::c_void,
                                   pointer_constraints as *mut libc::c_void,
                                   None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut pointer_constraints: *mut wlr_pointer_constraints_v1 =
        (listener as *mut libc::c_char).offset(-40) as
            *mut wlr_pointer_constraints_v1;
    wl_list_remove(&mut (*pointer_constraints).display_destroy.link);
    wl_global_destroy((*pointer_constraints).global);
    free(pointer_constraints as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_pointer_constraints_v1_create(mut display:
                                                               *mut wl_display)
 -> *mut wlr_pointer_constraints_v1 {
    let mut pointer_constraints: *mut wlr_pointer_constraints_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_pointer_constraints_v1>() as
                   libc::c_ulong) as *mut wlr_pointer_constraints_v1;
    if pointer_constraints.is_null() {
        return 0 as *mut wlr_pointer_constraints_v1
    }
    let mut wl_global: *mut wl_global =
        wl_global_create(display, &zwp_pointer_constraints_v1_interface, 1i32,
                         pointer_constraints as *mut libc::c_void,
                         Some(pointer_constraints_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if wl_global.is_null() {
        free(pointer_constraints as *mut libc::c_void);
        return 0 as *mut wlr_pointer_constraints_v1
    }
    (*pointer_constraints).global = wl_global;
    wl_list_init(&mut (*pointer_constraints).constraints);
    wl_signal_init(&mut (*pointer_constraints).events.new_constraint);
    (*pointer_constraints).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display,
                                    &mut (*pointer_constraints).display_destroy);
    return pointer_constraints;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_pointer_constraints_v1_constraint_for_surface(mut pointer_constraints:
                                                                               *mut wlr_pointer_constraints_v1,
                                                                           mut surface:
                                                                               *mut wlr_surface,
                                                                           mut seat:
                                                                               *mut wlr_seat)
 -> *mut wlr_pointer_constraint_v1 {
    let mut constraint: *mut wlr_pointer_constraint_v1 =
        0 as *mut wlr_pointer_constraint_v1;
    constraint =
        ((*pointer_constraints).constraints.next as
             *mut libc::c_char).offset(-232) as
            *mut wlr_pointer_constraint_v1;
    while &mut (*constraint).link as *mut wl_list !=
              &mut (*pointer_constraints).constraints as *mut wl_list {
        if (*constraint).surface == surface && (*constraint).seat == seat {
            return constraint
        }
        constraint =
            ((*constraint).link.next as *mut libc::c_char).offset(-232) as
                *mut wlr_pointer_constraint_v1
    }
    return 0 as *mut wlr_pointer_constraint_v1;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_pointer_constraint_v1_send_activated(mut constraint:
                                                                      *mut wlr_pointer_constraint_v1) {
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] constrained %p\x00" as *const u8 as
                 *const libc::c_char,
             b"../types/wlr_pointer_constraints_v1.c\x00" as *const u8 as
                 *const libc::c_char, 337i32, constraint);
    if (*constraint).type_0 as libc::c_uint ==
           WLR_POINTER_CONSTRAINT_V1_LOCKED as libc::c_int as libc::c_uint {
        zwp_locked_pointer_v1_send_locked((*constraint).resource);
    } else { zwp_confined_pointer_v1_send_confined((*constraint).resource); };
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_pointer_constraint_v1_state_field
// only valid for locked_pointer
// wlr_pointer_constraints_v1::constraints
// wlr_pointer_constraint_v1::link
/* *
		 * Called when a new pointer constraint is created.
		 *
		 * data: struct wlr_pointer_constraint_v1 *
		 */
/* *
 * Deactivate the constraint. May destroy the constraint.
 */
#[no_mangle]
pub unsafe extern "C" fn wlr_pointer_constraint_v1_send_deactivated(mut constraint:
                                                                        *mut wlr_pointer_constraint_v1) {
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] unconstrained %p\x00" as *const u8 as
                 *const libc::c_char,
             b"../types/wlr_pointer_constraints_v1.c\x00" as *const u8 as
                 *const libc::c_char, 347i32, constraint);
    if (*constraint).type_0 as libc::c_uint ==
           WLR_POINTER_CONSTRAINT_V1_LOCKED as libc::c_int as libc::c_uint {
        zwp_locked_pointer_v1_send_unlocked((*constraint).resource);
    } else {
        zwp_confined_pointer_v1_send_unconfined((*constraint).resource);
    }
    if (*constraint).lifetime as libc::c_uint ==
           ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ONESHOT as libc::c_int as
               libc::c_uint {
        pointer_constraint_destroy(constraint);
    };
}
