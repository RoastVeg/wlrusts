use libc;
extern "C" {
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wlr_seat_client_from_resource(resource: *mut wl_resource)
     -> *mut wlr_seat_client;
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_client(resource: *mut wl_resource) -> *mut wl_client;
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
    // Will log all messages less than or equal to `verbosity`
// If `callback` is NULL, wlr will use its default logger.
// The function can be called multiple times to update the verbosity or
// callback function.
    // Returns the log verbosity provided to wlr_log_init
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    /* *
 * @page page_iface_zwp_text_input_v3 zwp_text_input_v3
 * @section page_iface_zwp_text_input_v3_desc Description
 *
 * The zwp_text_input_v3 interface represents text input and input methods
 * associated with a seat. It provides enter/leave events to follow the
 * text input focus for a seat.
 *
 * Requests are used to enable/disable the text-input object and set
 * state information like surrounding and selected text or the content type.
 * The information about the entered text is sent to the text-input object
 * via the preedit_string and commit_string events.
 *
 * Text is valid UTF-8 encoded, indices and lengths are in bytes. Indices
 * must not point to middle bytes inside a code point: they must either
 * point to the first byte of a code point or to the end of the buffer.
 * Lengths must be measured between two valid indices.
 *
 * Focus moving throughout surfaces will result in the emission of
 * zwp_text_input_v3.enter and zwp_text_input_v3.leave events. The focused
 * surface must commit zwp_text_input_v3.enable and
 * zwp_text_input_v3.disable requests as the keyboard focus moves across
 * editable and non-editable elements of the UI. Those two requests are not
 * expected to be paired with each other, the compositor must be able to
 * handle consecutive series of the same request.
 *
 * State is sent by the state requests (set_surrounding_text,
 * set_content_type and set_cursor_rectangle) and a commit request. After an
 * enter event or disable request all state information is invalidated and
 * needs to be resent by the client.
 * @section page_iface_zwp_text_input_v3_api API
 * See @ref iface_zwp_text_input_v3.
 */
/* *
 * @defgroup iface_zwp_text_input_v3 The zwp_text_input_v3 interface
 *
 * The zwp_text_input_v3 interface represents text input and input methods
 * associated with a seat. It provides enter/leave events to follow the
 * text input focus for a seat.
 *
 * Requests are used to enable/disable the text-input object and set
 * state information like surrounding and selected text or the content type.
 * The information about the entered text is sent to the text-input object
 * via the preedit_string and commit_string events.
 *
 * Text is valid UTF-8 encoded, indices and lengths are in bytes. Indices
 * must not point to middle bytes inside a code point: they must either
 * point to the first byte of a code point or to the end of the buffer.
 * Lengths must be measured between two valid indices.
 *
 * Focus moving throughout surfaces will result in the emission of
 * zwp_text_input_v3.enter and zwp_text_input_v3.leave events. The focused
 * surface must commit zwp_text_input_v3.enable and
 * zwp_text_input_v3.disable requests as the keyboard focus moves across
 * editable and non-editable elements of the UI. Those two requests are not
 * expected to be paired with each other, the compositor must be able to
 * handle consecutive series of the same request.
 *
 * State is sent by the state requests (set_surrounding_text,
 * set_content_type and set_cursor_rectangle) and a commit request. After an
 * enter event or disable request all state information is invalidated and
 * needs to be resent by the client.
 */
    #[no_mangle]
    static zwp_text_input_v3_interface: wl_interface;
    /* *
 * @page page_iface_zwp_text_input_manager_v3 zwp_text_input_manager_v3
 * @section page_iface_zwp_text_input_manager_v3_desc Description
 *
 * A factory for text-input objects. This object is a global singleton.
 * @section page_iface_zwp_text_input_manager_v3_api API
 * See @ref iface_zwp_text_input_manager_v3.
 */
/* *
 * @defgroup iface_zwp_text_input_manager_v3 The zwp_text_input_manager_v3 interface
 *
 * A factory for text-input objects. This object is a global singleton.
 */
    #[no_mangle]
    static zwp_text_input_manager_v3_interface: wl_interface;
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_0,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
/*
 * 32 bit regions
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_1,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_2,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_3,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_4,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_5,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_6,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_text_input_v3_state {
    pub surrounding: C2RustUnnamed_9,
    pub text_change_cause: uint32_t,
    pub content_type: C2RustUnnamed_8,
    pub cursor_rectangle: C2RustUnnamed_7,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub x: int32_t,
    pub y: int32_t,
    pub width: int32_t,
    pub height: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub hint: uint32_t,
    pub purpose: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub text: *mut libc::c_char,
    pub cursor: uint32_t,
    pub anchor: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_text_input_v3 {
    pub seat: *mut wlr_seat,
    pub resource: *mut wl_resource,
    pub focused_surface: *mut wlr_surface,
    pub pending: wlr_text_input_v3_state,
    pub current: wlr_text_input_v3_state,
    pub current_serial: uint32_t,
    pub pending_enabled: bool,
    pub current_enabled: bool,
    pub link: wl_list,
    pub surface_destroy: wl_listener,
    pub seat_destroy: wl_listener,
    pub events: C2RustUnnamed_10,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub enable: wl_signal,
    pub commit: wl_signal,
    pub disable: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_text_input_manager_v3 {
    pub global: *mut wl_global,
    pub text_inputs: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_11,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub text_input: wl_signal,
    pub destroy: wl_signal,
}
/* *
 * @ingroup iface_zwp_text_input_manager_v3
 * @struct zwp_text_input_manager_v3_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_text_input_manager_v3_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub get_text_input: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                    _: *mut wl_resource,
                                                    _: uint32_t,
                                                    _: *mut wl_resource)
                                   -> ()>,
}
/* ZWP_TEXT_INPUT_V3_CONTENT_PURPOSE_ENUM */
/* *
 * @ingroup iface_zwp_text_input_v3
 * @struct zwp_text_input_v3_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_text_input_v3_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub enable: Option<unsafe extern "C" fn(_: *mut wl_client,
                                            _: *mut wl_resource) -> ()>,
    pub disable: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub set_surrounding_text: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                          _: *mut wl_resource,
                                                          _:
                                                              *const libc::c_char,
                                                          _: int32_t,
                                                          _: int32_t) -> ()>,
    pub set_text_change_cause: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                           _:
                                                               *mut wl_resource,
                                                           _: uint32_t)
                                          -> ()>,
    pub set_content_type: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                      _: *mut wl_resource,
                                                      _: uint32_t,
                                                      _: uint32_t) -> ()>,
    pub set_cursor_rectangle: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                          _: *mut wl_resource,
                                                          _: int32_t,
                                                          _: int32_t,
                                                          _: int32_t,
                                                          _: int32_t) -> ()>,
    pub commit: Option<unsafe extern "C" fn(_: *mut wl_client,
                                            _: *mut wl_resource) -> ()>,
}
/*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 */
/* *
 * @ingroup iface_zwp_text_input_v3
 * Sends an enter event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_text_input_v3_send_enter(mut resource_:
                                                      *mut wl_resource,
                                                  mut surface:
                                                      *mut wl_resource) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, surface);
}
/* *
 * @ingroup iface_zwp_text_input_v3
 * Sends an leave event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_text_input_v3_send_leave(mut resource_:
                                                      *mut wl_resource,
                                                  mut surface:
                                                      *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, surface);
}
/* *
 * @ingroup iface_zwp_text_input_v3
 * Sends an preedit_string event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_text_input_v3_send_preedit_string(mut resource_:
                                                               *mut wl_resource,
                                                           mut text:
                                                               *const libc::c_char,
                                                           mut cursor_begin:
                                                               int32_t,
                                                           mut cursor_end:
                                                               int32_t) {
    wl_resource_post_event(resource_, 2i32 as uint32_t, text, cursor_begin,
                           cursor_end);
}
/* *
 * @ingroup iface_zwp_text_input_v3
 * Sends an commit_string event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_text_input_v3_send_commit_string(mut resource_:
                                                              *mut wl_resource,
                                                          mut text:
                                                              *const libc::c_char) {
    wl_resource_post_event(resource_, 3i32 as uint32_t, text);
}
/* *
 * @ingroup iface_zwp_text_input_v3
 * Sends an delete_surrounding_text event to the client owning the resource.
 * @param resource_ The client's resource
 * @param before_length length of text before current cursor position
 * @param after_length length of text after current cursor position
 */
#[inline]
unsafe extern "C" fn zwp_text_input_v3_send_delete_surrounding_text(mut resource_:
                                                                        *mut wl_resource,
                                                                    mut before_length:
                                                                        uint32_t,
                                                                    mut after_length:
                                                                        uint32_t) {
    wl_resource_post_event(resource_, 4i32 as uint32_t, before_length,
                           after_length);
}
/* *
 * @ingroup iface_zwp_text_input_v3
 * Sends an done event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_text_input_v3_send_done(mut resource_:
                                                     *mut wl_resource,
                                                 mut serial: uint32_t) {
    wl_resource_post_event(resource_, 5i32 as uint32_t, serial);
}
unsafe extern "C" fn text_input_clear_focused_surface(mut text_input:
                                                          *mut wlr_text_input_v3) {
    wl_list_remove(&mut (*text_input).surface_destroy.link);
    wl_list_init(&mut (*text_input).surface_destroy.link);
    (*text_input).focused_surface = 0 as *mut wlr_surface;
}
unsafe extern "C" fn text_input_from_resource(mut resource: *mut wl_resource)
 -> *mut wlr_text_input_v3 {
    if wl_resource_instance_of(resource, &zwp_text_input_v3_interface,
                               &text_input_impl as
                                   *const zwp_text_input_v3_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_text_input_v3_interface, &text_input_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_text_input_v3.c\x00" as *const u8 as
                          *const libc::c_char, 23i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 73],
                                                &[libc::c_char; 73]>(b"struct wlr_text_input_v3 *text_input_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as *mut wlr_text_input_v3;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_text_input_v3_send_enter(mut text_input:
                                                          *mut wlr_text_input_v3,
                                                      mut surface:
                                                          *mut wlr_surface) {
    if wl_resource_get_client((*text_input).resource) ==
           wl_resource_get_client((*surface).resource) {
    } else {
        __assert_fail(b"wl_resource_get_client(text_input->resource) == wl_resource_get_client(surface->resource)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_text_input_v3.c\x00" as *const u8 as
                          *const libc::c_char, 30i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 84],
                                                &[libc::c_char; 84]>(b"void wlr_text_input_v3_send_enter(struct wlr_text_input_v3 *, struct wlr_surface *)\x00")).as_ptr());
    };
    (*text_input).focused_surface = surface;
    wl_signal_add(&mut (*(*text_input).focused_surface).events.destroy,
                  &mut (*text_input).surface_destroy);
    zwp_text_input_v3_send_enter((*text_input).resource,
                                 (*(*text_input).focused_surface).resource);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_text_input_v3_send_leave(mut text_input:
                                                          *mut wlr_text_input_v3) {
    zwp_text_input_v3_send_leave((*text_input).resource,
                                 (*(*text_input).focused_surface).resource);
    text_input_clear_focused_surface(text_input);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_text_input_v3_send_preedit_string(mut text_input:
                                                                   *mut wlr_text_input_v3,
                                                               mut text:
                                                                   *const libc::c_char,
                                                               mut cursor_begin:
                                                                   uint32_t,
                                                               mut cursor_end:
                                                                   uint32_t) {
    zwp_text_input_v3_send_preedit_string((*text_input).resource, text,
                                          cursor_begin as int32_t,
                                          cursor_end as int32_t);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_text_input_v3_send_commit_string(mut text_input:
                                                                  *mut wlr_text_input_v3,
                                                              mut text:
                                                                  *const libc::c_char) {
    zwp_text_input_v3_send_commit_string((*text_input).resource, text);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_text_input_v3_send_delete_surrounding_text(mut text_input:
                                                                            *mut wlr_text_input_v3,
                                                                        mut before_length:
                                                                            uint32_t,
                                                                        mut after_length:
                                                                            uint32_t) {
    zwp_text_input_v3_send_delete_surrounding_text((*text_input).resource,
                                                   before_length,
                                                   after_length);
}
// Sends enter to the surface and saves it
// Sends leave to the currently focused surface and clears it
#[no_mangle]
pub unsafe extern "C" fn wlr_text_input_v3_send_done(mut text_input:
                                                         *mut wlr_text_input_v3) {
    zwp_text_input_v3_send_done((*text_input).resource,
                                (*text_input).current_serial);
}
unsafe extern "C" fn wlr_text_input_destroy(mut text_input:
                                                *mut wlr_text_input_v3) {
    wlr_signal_emit_safe(&mut (*text_input).events.destroy,
                         text_input as *mut libc::c_void);
    text_input_clear_focused_surface(text_input);
    wl_list_remove(&mut (*text_input).seat_destroy.link);
    // remove from manager::text_inputs
    wl_list_remove(&mut (*text_input).link); // including never enabled
    free((*text_input).current.surrounding.text as *mut libc::c_void);
    free((*text_input).pending.surrounding.text as *mut libc::c_void);
    free(text_input as *mut libc::c_void);
}
unsafe extern "C" fn text_input_resource_destroy(mut resource:
                                                     *mut wl_resource) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    wlr_text_input_destroy(text_input);
}
unsafe extern "C" fn text_input_destroy(mut client: *mut wl_client,
                                        mut resource: *mut wl_resource) {
    wl_resource_destroy(resource);
}
unsafe extern "C" fn text_input_enable(mut client: *mut wl_client,
                                       mut resource: *mut wl_resource) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    let mut defaults: wlr_text_input_v3_state =
        {
            let mut init =
                wlr_text_input_v3_state{surrounding:
                                            {
                                                let mut init =
                                                    C2RustUnnamed_9{text:
                                                                        0 as
                                                                            *mut libc::c_char,
                                                                    cursor: 0,
                                                                    anchor:
                                                                        0,};
                                                init
                                            },
                                        text_change_cause: 0,
                                        content_type:
                                            C2RustUnnamed_8{hint: 0,
                                                            purpose: 0,},
                                        cursor_rectangle:
                                            C2RustUnnamed_7{x: 0,
                                                            y: 0,
                                                            width: 0,
                                                            height: 0,},};
            init
        };
    free((*text_input).pending.surrounding.text as *mut libc::c_void);
    (*text_input).pending = defaults;
    (*text_input).pending_enabled = 1i32 != 0;
}
unsafe extern "C" fn text_input_disable(mut client: *mut wl_client,
                                        mut resource: *mut wl_resource) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    (*text_input).pending_enabled = 0i32 != 0;
}
unsafe extern "C" fn text_input_set_surrounding_text(mut client:
                                                         *mut wl_client,
                                                     mut resource:
                                                         *mut wl_resource,
                                                     mut text:
                                                         *const libc::c_char,
                                                     mut cursor: int32_t,
                                                     mut anchor: int32_t) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    free((*text_input).pending.surrounding.text as *mut libc::c_void);
    (*text_input).pending.surrounding.text = strdup(text);
    if (*text_input).pending.surrounding.text.is_null() {
        wl_client_post_no_memory(client);
    }
    (*text_input).pending.surrounding.cursor = cursor as uint32_t;
    (*text_input).pending.surrounding.anchor = anchor as uint32_t;
}
unsafe extern "C" fn text_input_set_text_change_cause(mut client:
                                                          *mut wl_client,
                                                      mut resource:
                                                          *mut wl_resource,
                                                      mut cause: uint32_t) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    (*text_input).pending.text_change_cause = cause;
}
unsafe extern "C" fn text_input_set_content_type(mut client: *mut wl_client,
                                                 mut resource:
                                                     *mut wl_resource,
                                                 mut hint: uint32_t,
                                                 mut purpose: uint32_t) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    (*text_input).pending.content_type.hint = hint;
    (*text_input).pending.content_type.purpose = purpose;
}
unsafe extern "C" fn text_input_set_cursor_rectangle(mut client:
                                                         *mut wl_client,
                                                     mut resource:
                                                         *mut wl_resource,
                                                     mut x: int32_t,
                                                     mut y: int32_t,
                                                     mut width: int32_t,
                                                     mut height: int32_t) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    (*text_input).pending.cursor_rectangle.x = x;
    (*text_input).pending.cursor_rectangle.y = y;
    (*text_input).pending.cursor_rectangle.width = width;
    (*text_input).pending.cursor_rectangle.height = height;
}
unsafe extern "C" fn text_input_commit(mut client: *mut wl_client,
                                       mut resource: *mut wl_resource) {
    let mut text_input: *mut wlr_text_input_v3 =
        text_input_from_resource(resource);
    if text_input.is_null() { return }
    free((*text_input).current.surrounding.text as *mut libc::c_void);
    (*text_input).current = (*text_input).pending;
    if !(*text_input).pending.surrounding.text.is_null() {
        (*text_input).current.surrounding.text =
            strdup((*text_input).pending.surrounding.text)
    }
    let mut old_enabled: bool = (*text_input).current_enabled;
    (*text_input).current_enabled = (*text_input).pending_enabled;
    (*text_input).current_serial =
        (*text_input).current_serial.wrapping_add(1);
    if (*text_input).focused_surface.is_null() {
        _wlr_log(WLR_DEBUG,
                 b"[%s:%d] Text input commit received without focus\x00" as
                     *const u8 as *const libc::c_char,
                 b"../types/wlr_text_input_v3.c\x00" as *const u8 as
                     *const libc::c_char, 179i32);
    }
    if !old_enabled && (*text_input).current_enabled as libc::c_int != 0 {
        wlr_signal_emit_safe(&mut (*text_input).events.enable,
                             text_input as *mut libc::c_void);
    } else if old_enabled as libc::c_int != 0 &&
                  !(*text_input).current_enabled {
        wlr_signal_emit_safe(&mut (*text_input).events.disable,
                             text_input as *mut libc::c_void);
    } else {
        wlr_signal_emit_safe(&mut (*text_input).events.commit,
                             text_input as *mut libc::c_void);
    };
}
static mut text_input_impl: zwp_text_input_v3_interface =
    unsafe {
        {
            let mut init =
                zwp_text_input_v3_interface{destroy:
                                                Some(text_input_destroy as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource)
                                                             -> ()),
                                            enable:
                                                Some(text_input_enable as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource)
                                                             -> ()),
                                            disable:
                                                Some(text_input_disable as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource)
                                                             -> ()),
                                            set_surrounding_text:
                                                Some(text_input_set_surrounding_text
                                                         as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource,
                                                                              _:
                                                                                  *const libc::c_char,
                                                                              _:
                                                                                  int32_t,
                                                                              _:
                                                                                  int32_t)
                                                             -> ()),
                                            set_text_change_cause:
                                                Some(text_input_set_text_change_cause
                                                         as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource,
                                                                              _:
                                                                                  uint32_t)
                                                             -> ()),
                                            set_content_type:
                                                Some(text_input_set_content_type
                                                         as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource,
                                                                              _:
                                                                                  uint32_t,
                                                                              _:
                                                                                  uint32_t)
                                                             -> ()),
                                            set_cursor_rectangle:
                                                Some(text_input_set_cursor_rectangle
                                                         as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource,
                                                                              _:
                                                                                  int32_t,
                                                                              _:
                                                                                  int32_t,
                                                                              _:
                                                                                  int32_t,
                                                                              _:
                                                                                  int32_t)
                                                             -> ()),
                                            commit:
                                                Some(text_input_commit as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource)
                                                             -> ()),};
            init
        }
    };
unsafe extern "C" fn text_input_manager_from_resource(mut resource:
                                                          *mut wl_resource)
 -> *mut wlr_text_input_manager_v3 {
    if wl_resource_instance_of(resource, &zwp_text_input_manager_v3_interface,
                               &text_input_manager_impl as
                                   *const zwp_text_input_manager_v3_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_text_input_manager_v3_interface, &text_input_manager_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_text_input_v3.c\x00" as *const u8 as
                          *const libc::c_char, 207i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 89],
                                                &[libc::c_char; 89]>(b"struct wlr_text_input_manager_v3 *text_input_manager_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_text_input_manager_v3;
}
unsafe extern "C" fn text_input_manager_destroy(mut client: *mut wl_client,
                                                mut resource:
                                                    *mut wl_resource) {
    wl_resource_destroy(resource);
}
unsafe extern "C" fn text_input_handle_seat_destroy(mut listener:
                                                        *mut wl_listener,
                                                    mut data:
                                                        *mut libc::c_void) {
    let mut text_input: *mut wlr_text_input_v3 =
        (listener as *mut libc::c_char).offset(-168) as
            *mut wlr_text_input_v3;
    let mut resource: *mut wl_resource = (*text_input).resource;
    wlr_text_input_destroy(text_input);
    wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
}
unsafe extern "C" fn text_input_handle_focused_surface_destroy(mut listener:
                                                                   *mut wl_listener,
                                                               mut data:
                                                                   *mut libc::c_void) {
    let mut text_input: *mut wlr_text_input_v3 =
        (listener as *mut libc::c_char).offset(-144) as
            *mut wlr_text_input_v3;
    text_input_clear_focused_surface(text_input);
}
unsafe extern "C" fn text_input_manager_get_text_input(mut client:
                                                           *mut wl_client,
                                                       mut resource:
                                                           *mut wl_resource,
                                                       mut id: uint32_t,
                                                       mut seat:
                                                           *mut wl_resource) {
    let mut text_input: *mut wlr_text_input_v3 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_text_input_v3>() as libc::c_ulong) as
            *mut wlr_text_input_v3;
    if text_input.is_null() { wl_client_post_no_memory(client); return }
    wl_signal_init(&mut (*text_input).events.enable);
    wl_signal_init(&mut (*text_input).events.commit);
    wl_signal_init(&mut (*text_input).events.disable);
    wl_signal_init(&mut (*text_input).events.destroy);
    let mut version: libc::c_int = wl_resource_get_version(resource);
    let mut text_input_resource: *mut wl_resource =
        wl_resource_create(client, &zwp_text_input_v3_interface, version, id);
    if text_input_resource.is_null() {
        free(text_input as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    (*text_input).resource = text_input_resource;
    wl_resource_set_implementation((*text_input).resource,
                                   &text_input_impl as
                                       *const zwp_text_input_v3_interface as
                                       *const libc::c_void,
                                   text_input as *mut libc::c_void,
                                   Some(text_input_resource_destroy as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    let mut seat_client: *mut wlr_seat_client =
        wlr_seat_client_from_resource(seat);
    let mut wlr_seat: *mut wlr_seat = (*seat_client).seat;
    (*text_input).seat = wlr_seat;
    wl_signal_add(&mut (*seat_client).events.destroy,
                  &mut (*text_input).seat_destroy);
    (*text_input).seat_destroy.notify =
        Some(text_input_handle_seat_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    (*text_input).surface_destroy.notify =
        Some(text_input_handle_focused_surface_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_list_init(&mut (*text_input).surface_destroy.link);
    let mut manager: *mut wlr_text_input_manager_v3 =
        text_input_manager_from_resource(resource);
    wl_list_insert(&mut (*manager).text_inputs, &mut (*text_input).link);
    wlr_signal_emit_safe(&mut (*manager).events.text_input,
                         text_input as *mut libc::c_void);
}
static mut text_input_manager_impl: zwp_text_input_manager_v3_interface =
    unsafe {
        {
            let mut init =
                zwp_text_input_manager_v3_interface{destroy:
                                                        Some(text_input_manager_destroy
                                                                 as
                                                                 unsafe extern "C" fn(_:
                                                                                          *mut wl_client,
                                                                                      _:
                                                                                          *mut wl_resource)
                                                                     -> ()),
                                                    get_text_input:
                                                        Some(text_input_manager_get_text_input
                                                                 as
                                                                 unsafe extern "C" fn(_:
                                                                                          *mut wl_client,
                                                                                      _:
                                                                                          *mut wl_resource,
                                                                                      _:
                                                                                          uint32_t,
                                                                                      _:
                                                                                          *mut wl_resource)
                                                                     -> ()),};
            init
        }
    };
unsafe extern "C" fn text_input_manager_bind(mut wl_client: *mut wl_client,
                                             mut data: *mut libc::c_void,
                                             mut version: uint32_t,
                                             mut id: uint32_t) {
    let mut manager: *mut wlr_text_input_manager_v3 =
        data as *mut wlr_text_input_manager_v3;
    if !wl_client.is_null() && !manager.is_null() {
    } else {
        __assert_fail(b"wl_client && manager\x00" as *const u8 as
                          *const libc::c_char,
                      b"../types/wlr_text_input_v3.c\x00" as *const u8 as
                          *const libc::c_char, 286i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 77],
                                                &[libc::c_char; 77]>(b"void text_input_manager_bind(struct wl_client *, void *, uint32_t, uint32_t)\x00")).as_ptr());
    };
    let mut resource: *mut wl_resource =
        wl_resource_create(wl_client, &zwp_text_input_manager_v3_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(wl_client); return }
    wl_resource_set_implementation(resource,
                                   &text_input_manager_impl as
                                       *const zwp_text_input_manager_v3_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void, None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_text_input_manager_v3 =
        (listener as *mut libc::c_char).offset(-24) as
            *mut wlr_text_input_manager_v3;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// NULL is allowed and equivalent to empty string
// becomes null when seat destroyed
// next in line to send
// (struct wlr_text_input_v3*)
// (struct wlr_text_input_v3*)
// (struct wlr_text_input_v3*)
// (struct wlr_text_input_v3*)
// struct wlr_text_input_v3::resource::link
// (struct wlr_text_input_v3*)
// (struct wlr_input_method_manager_v3*)
#[no_mangle]
pub unsafe extern "C" fn wlr_text_input_manager_v3_create(mut display:
                                                              *mut wl_display)
 -> *mut wlr_text_input_manager_v3 {
    let mut manager: *mut wlr_text_input_manager_v3 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_text_input_manager_v3>() as
                   libc::c_ulong) as *mut wlr_text_input_manager_v3;
    if manager.is_null() { return 0 as *mut wlr_text_input_manager_v3 }
    wl_list_init(&mut (*manager).text_inputs);
    wl_signal_init(&mut (*manager).events.text_input);
    (*manager).global =
        wl_global_create(display, &zwp_text_input_manager_v3_interface, 1i32,
                         manager as *mut libc::c_void,
                         Some(text_input_manager_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_text_input_manager_v3
    }
    (*manager).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*manager).display_destroy);
    return manager;
}
