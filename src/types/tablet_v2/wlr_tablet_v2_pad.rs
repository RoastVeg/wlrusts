use libc;
extern "C" {
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    pub type wlr_pointer_impl;
    pub type wlr_tablet_pad_impl;
    pub type wlr_tablet_impl;
    pub type wlr_touch_impl;
    pub type wlr_switch_impl;
    /* Note: these are circular dependencies */
    pub type wlr_input_device_impl;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    pub type wlr_tablet_manager_client_v2;
    /* *
 * @page page_iface_zwp_tablet_pad_ring_v2 zwp_tablet_pad_ring_v2
 * @section page_iface_zwp_tablet_pad_ring_v2_desc Description
 *
 * A circular interaction area, such as the touch ring on the Wacom Intuos
 * Pro series tablets.
 *
 * Events on a ring are logically grouped by the wl_tablet_pad_ring.frame
 * event.
 * @section page_iface_zwp_tablet_pad_ring_v2_api API
 * See @ref iface_zwp_tablet_pad_ring_v2.
 */
/* *
 * @defgroup iface_zwp_tablet_pad_ring_v2 The zwp_tablet_pad_ring_v2 interface
 *
 * A circular interaction area, such as the touch ring on the Wacom Intuos
 * Pro series tablets.
 *
 * Events on a ring are logically grouped by the wl_tablet_pad_ring.frame
 * event.
 */
    #[no_mangle]
    static zwp_tablet_pad_ring_v2_interface: wl_interface;
    /* *
 * @page page_iface_zwp_tablet_pad_strip_v2 zwp_tablet_pad_strip_v2
 * @section page_iface_zwp_tablet_pad_strip_v2_desc Description
 *
 * A linear interaction area, such as the strips found in Wacom Cintiq
 * models.
 *
 * Events on a strip are logically grouped by the wl_tablet_pad_strip.frame
 * event.
 * @section page_iface_zwp_tablet_pad_strip_v2_api API
 * See @ref iface_zwp_tablet_pad_strip_v2.
 */
/* *
 * @defgroup iface_zwp_tablet_pad_strip_v2 The zwp_tablet_pad_strip_v2 interface
 *
 * A linear interaction area, such as the strips found in Wacom Cintiq
 * models.
 *
 * Events on a strip are logically grouped by the wl_tablet_pad_strip.frame
 * event.
 */
    #[no_mangle]
    static zwp_tablet_pad_strip_v2_interface: wl_interface;
    /* *
 * @page page_iface_zwp_tablet_pad_group_v2 zwp_tablet_pad_group_v2
 * @section page_iface_zwp_tablet_pad_group_v2_desc Description
 *
 * A pad group describes a distinct (sub)set of buttons, rings and strips
 * present in the tablet. The criteria of this grouping is usually positional,
 * eg. if a tablet has buttons on the left and right side, 2 groups will be
 * presented. The physical arrangement of groups is undisclosed and may
 * change on the fly.
 *
 * Pad groups will announce their features during pad initialization. Between
 * the corresponding wp_tablet_pad.group event and wp_tablet_pad_group.done, the
 * pad group will announce the buttons, rings and strips contained in it,
 * plus the number of supported modes.
 *
 * Modes are a mechanism to allow multiple groups of actions for every element
 * in the pad group. The number of groups and available modes in each is
 * persistent across device plugs. The current mode is user-switchable, it
 * will be announced through the wp_tablet_pad_group.mode_switch event both
 * whenever it is switched, and after wp_tablet_pad.enter.
 *
 * The current mode logically applies to all elements in the pad group,
 * although it is at clients' discretion whether to actually perform different
 * actions, and/or issue the respective .set_feedback requests to notify the
 * compositor. See the wp_tablet_pad_group.mode_switch event for more details.
 * @section page_iface_zwp_tablet_pad_group_v2_api API
 * See @ref iface_zwp_tablet_pad_group_v2.
 */
/* *
 * @defgroup iface_zwp_tablet_pad_group_v2 The zwp_tablet_pad_group_v2 interface
 *
 * A pad group describes a distinct (sub)set of buttons, rings and strips
 * present in the tablet. The criteria of this grouping is usually positional,
 * eg. if a tablet has buttons on the left and right side, 2 groups will be
 * presented. The physical arrangement of groups is undisclosed and may
 * change on the fly.
 *
 * Pad groups will announce their features during pad initialization. Between
 * the corresponding wp_tablet_pad.group event and wp_tablet_pad_group.done, the
 * pad group will announce the buttons, rings and strips contained in it,
 * plus the number of supported modes.
 *
 * Modes are a mechanism to allow multiple groups of actions for every element
 * in the pad group. The number of groups and available modes in each is
 * persistent across device plugs. The current mode is user-switchable, it
 * will be announced through the wp_tablet_pad_group.mode_switch event both
 * whenever it is switched, and after wp_tablet_pad.enter.
 *
 * The current mode logically applies to all elements in the pad group,
 * although it is at clients' discretion whether to actually perform different
 * actions, and/or issue the respective .set_feedback requests to notify the
 * compositor. See the wp_tablet_pad_group.mode_switch event for more details.
 */
    #[no_mangle]
    static zwp_tablet_pad_group_v2_interface: wl_interface;
    /* *
 * @page page_iface_zwp_tablet_pad_v2 zwp_tablet_pad_v2
 * @section page_iface_zwp_tablet_pad_v2_desc Description
 *
 * A pad device is a set of buttons, rings and strips
 * usually physically present on the tablet device itself. Some
 * exceptions exist where the pad device is physically detached, e.g. the
 * Wacom ExpressKey Remote.
 *
 * Pad devices have no axes that control the cursor and are generally
 * auxiliary devices to the tool devices used on the tablet surface.
 *
 * A pad device has a number of static characteristics, e.g. the number
 * of rings. These capabilities are sent in an event sequence after the
 * wp_tablet_seat.pad_added event before any actual events from this pad.
 * This initial event sequence is terminated by a wp_tablet_pad.done
 * event.
 *
 * All pad features (buttons, rings and strips) are logically divided into
 * groups and all pads have at least one group. The available groups are
 * notified through the wp_tablet_pad.group event; the compositor will
 * emit one event per group before emitting wp_tablet_pad.done.
 *
 * Groups may have multiple modes. Modes allow clients to map multiple
 * actions to a single pad feature. Only one mode can be active per group,
 * although different groups may have different active modes.
 * @section page_iface_zwp_tablet_pad_v2_api API
 * See @ref iface_zwp_tablet_pad_v2.
 */
/* *
 * @defgroup iface_zwp_tablet_pad_v2 The zwp_tablet_pad_v2 interface
 *
 * A pad device is a set of buttons, rings and strips
 * usually physically present on the tablet device itself. Some
 * exceptions exist where the pad device is physically detached, e.g. the
 * Wacom ExpressKey Remote.
 *
 * Pad devices have no axes that control the cursor and are generally
 * auxiliary devices to the tool devices used on the tablet surface.
 *
 * A pad device has a number of static characteristics, e.g. the number
 * of rings. These capabilities are sent in an event sequence after the
 * wp_tablet_seat.pad_added event before any actual events from this pad.
 * This initial event sequence is terminated by a wp_tablet_pad.done
 * event.
 *
 * All pad features (buttons, rings and strips) are logically divided into
 * groups and all pads have at least one group. The available groups are
 * notified through the wp_tablet_pad.group event; the compositor will
 * emit one event per group before emitting wp_tablet_pad.done.
 *
 * Groups may have multiple modes. Modes allow clients to map multiple
 * actions to a single pad feature. Only one mode can be active per group,
 * although different groups may have different active modes.
 */
    #[no_mangle]
    static zwp_tablet_pad_v2_interface: wl_interface;
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_length(list: *const wl_list) -> libc::c_int;
    #[no_mangle]
    fn wl_array_init(array: *mut wl_array);
    #[no_mangle]
    fn wl_array_release(array: *mut wl_array);
    #[no_mangle]
    fn wl_array_add(array: *mut wl_array, size: size_t) -> *mut libc::c_void;
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_client(resource: *mut wl_resource) -> *mut wl_client;
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> libc::c_int;
    /* *
 * Return a new serial (from wl_display_serial_next()) for the client, and
 * update the seat client's set of valid serials. Use this for all input
 * events; otherwise wlr_seat_client_validate_event_serial() may fail when
 * handed a correctly functioning client's request serials.
 */
    #[no_mangle]
    fn wlr_seat_client_next_serial(client: *mut wlr_seat_client) -> uint32_t;
    #[no_mangle]
    fn get_or_create_tablet_seat(manager: *mut wlr_tablet_manager_v2,
                                 wlr_seat: *mut wlr_seat)
     -> *mut wlr_tablet_seat_v2;
    #[no_mangle]
    fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
     -> *mut libc::c_void;
}
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __clockid_t = libc::c_int;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
pub type size_t = libc::c_ulong;
pub type clockid_t = __clockid_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_array {
    pub size: size_t,
    pub alloc: size_t,
    pub data: *mut libc::c_void,
}
pub type wl_fixed_t = int32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 * ring axis source
 *
 * Describes the source types for ring events. This indicates to the
 * client how a ring event was physically generated; a client may
 * adjust the user interface accordingly. For example, events
 * from a "finger" source may trigger kinetic scrolling.
 */
pub type zwp_tablet_pad_ring_v2_source = libc::c_uint;
/* *
	 * finger
	 */
pub const ZWP_TABLET_PAD_RING_V2_SOURCE_FINGER: zwp_tablet_pad_ring_v2_source
          =
    1;
/* ZWP_TABLET_PAD_RING_V2_SOURCE_ENUM */
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 * @struct zwp_tablet_pad_ring_v2_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_tablet_pad_ring_v2_interface {
    pub set_feedback: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                  _: *mut wl_resource,
                                                  _: *const libc::c_char,
                                                  _: uint32_t) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 * strip axis source
 *
 * Describes the source types for strip events. This indicates to the
 * client how a strip event was physically generated; a client may
 * adjust the user interface accordingly. For example, events
 * from a "finger" source may trigger kinetic scrolling.
 */
pub type zwp_tablet_pad_strip_v2_source = libc::c_uint;
/* *
	 * finger
	 */
pub const ZWP_TABLET_PAD_STRIP_V2_SOURCE_FINGER:
          zwp_tablet_pad_strip_v2_source =
    1;
/* ZWP_TABLET_PAD_STRIP_V2_SOURCE_ENUM */
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 * @struct zwp_tablet_pad_strip_v2_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_tablet_pad_strip_v2_interface {
    pub set_feedback: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                  _: *mut wl_resource,
                                                  _: *const libc::c_char,
                                                  _: uint32_t) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 * @struct zwp_tablet_pad_group_v2_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_tablet_pad_group_v2_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * physical button state
 *
 * Describes the physical state of a button that caused the button
 * event.
 */
pub type zwp_tablet_pad_v2_button_state = libc::c_uint;
/* *
	 * the button is pressed
	 */
pub const ZWP_TABLET_PAD_V2_BUTTON_STATE_PRESSED:
          zwp_tablet_pad_v2_button_state =
    1;
/* *
	 * the button is not pressed
	 */
pub const ZWP_TABLET_PAD_V2_BUTTON_STATE_RELEASED:
          zwp_tablet_pad_v2_button_state =
    0;
/* ZWP_TABLET_PAD_V2_BUTTON_STATE_ENUM */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * @struct zwp_tablet_pad_v2_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_tablet_pad_v2_interface {
    pub set_feedback: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                  _: *mut wl_resource,
                                                  _: uint32_t,
                                                  _: *const libc::c_char,
                                                  _: uint32_t) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type wlr_input_device_type = libc::c_uint;
pub const WLR_INPUT_DEVICE_SWITCH: wlr_input_device_type = 5;
pub const WLR_INPUT_DEVICE_TABLET_PAD: wlr_input_device_type = 4;
pub const WLR_INPUT_DEVICE_TABLET_TOOL: wlr_input_device_type = 3;
pub const WLR_INPUT_DEVICE_TOUCH: wlr_input_device_type = 2;
pub const WLR_INPUT_DEVICE_POINTER: wlr_input_device_type = 1;
pub const WLR_INPUT_DEVICE_KEYBOARD: wlr_input_device_type = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_0,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub rate: int32_t,
    pub delay: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer {
    pub impl_0: *const wlr_pointer_impl,
    pub events: C2RustUnnamed_1,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub motion: wl_signal,
    pub motion_absolute: wl_signal,
    pub button: wl_signal,
    pub axis: wl_signal,
    pub frame: wl_signal,
    pub swipe_begin: wl_signal,
    pub swipe_update: wl_signal,
    pub swipe_end: wl_signal,
    pub pinch_begin: wl_signal,
    pub pinch_update: wl_signal,
    pub pinch_end: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_input_device {
    pub impl_0: *const wlr_input_device_impl,
    pub type_0: wlr_input_device_type,
    pub vendor: libc::c_uint,
    pub product: libc::c_uint,
    pub name: *mut libc::c_char,
    pub width_mm: libc::c_double,
    pub height_mm: libc::c_double,
    pub output_name: *mut libc::c_char,
    pub c2rust_unnamed: C2RustUnnamed_3,
    pub events: C2RustUnnamed_2,
    pub data: *mut libc::c_void,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr ( C )]
pub union C2RustUnnamed_3 {
    pub _device: *mut libc::c_void,
    pub keyboard: *mut wlr_keyboard,
    pub pointer: *mut wlr_pointer,
    pub switch_device: *mut wlr_switch,
    pub touch: *mut wlr_touch,
    pub tablet: *mut wlr_tablet,
    pub tablet_pad: *mut wlr_tablet_pad,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/*
 * NOTE: the wlr tablet pad implementation does not currently support tablets
 * with more than one mode. I don't own any such hardware so I cannot test it
 * and it is too complicated to make a meaningful implementation of blindly.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_pad {
    pub impl_0: *mut wlr_tablet_pad_impl,
    pub events: C2RustUnnamed_4,
    pub button_count: size_t,
    pub ring_count: size_t,
    pub strip_count: size_t,
    pub groups: wl_list,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_list {
    pub capacity: size_t,
    pub length: size_t,
    pub items: *mut *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub button: wl_signal,
    pub ring: wl_signal,
    pub strip: wl_signal,
    pub attach_tablet: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/*
 * Copy+Paste from libinput, but this should neither use libinput, nor
 * tablet-unstable-v2 headers, so we can't include them
 */
/* * A generic pen */
/* * Eraser */
/* * A paintbrush-like tool */
/* * Physical drawing tool, e.g. Wacom Inking Pen */
/* * An airbrush-like tool */
/* * A mouse bound to the tablet */
/* * A mouse tool with a lens */
/* * A rotary device with positional and rotation data */
// Capabilities
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet {
    pub impl_0: *mut wlr_tablet_impl,
    pub events: C2RustUnnamed_5,
    pub name: *mut libc::c_char,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub axis: wl_signal,
    pub proximity: wl_signal,
    pub tip: wl_signal,
    pub button: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch {
    pub impl_0: *const wlr_touch_impl,
    pub events: C2RustUnnamed_6,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub down: wl_signal,
    pub up: wl_signal,
    pub motion: wl_signal,
    pub cancel: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_switch {
    pub impl_0: *mut wlr_switch_impl,
    pub events: C2RustUnnamed_7,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub toggle: wl_signal,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_pad_group {
    pub link: wl_list,
    pub button_count: size_t,
    pub buttons: *mut libc::c_uint,
    pub strip_count: size_t,
    pub strips: *mut libc::c_uint,
    pub ring_count: size_t,
    pub rings: *mut libc::c_uint,
    pub mode_count: libc::c_uint,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_8,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
/* *
 * Contains state for a single client's bound wl_seat resource and can be used
 * to issue input events to that client. The lifetime of these objects is
 * managed by wlr_seat; some may be NULL.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_9,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_10,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_11,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub destroy: wl_signal,
}
// TODO: May be useful to be able to simulate keyboard input events
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_12,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_13,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_13 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_pad_v2_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_tablet_pad_v2_grab,
                                           _: *mut wlr_tablet_v2_tablet,
                                           _: *mut wlr_surface) -> uint32_t>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_tablet_pad_v2_grab,
                                            _: size_t, _: uint32_t,
                                            _: zwp_tablet_pad_v2_button_state)
                           -> ()>,
    pub strip: Option<unsafe extern "C" fn(_: *mut wlr_tablet_pad_v2_grab,
                                           _: uint32_t, _: libc::c_double,
                                           _: bool, _: uint32_t) -> ()>,
    pub ring: Option<unsafe extern "C" fn(_: *mut wlr_tablet_pad_v2_grab,
                                          _: uint32_t, _: libc::c_double,
                                          _: bool, _: uint32_t) -> ()>,
    pub leave: Option<unsafe extern "C" fn(_: *mut wlr_tablet_pad_v2_grab,
                                           _: *mut wlr_surface) -> uint32_t>,
    pub mode: Option<unsafe extern "C" fn(_: *mut wlr_tablet_pad_v2_grab,
                                          _: size_t, _: uint32_t, _: uint32_t)
                         -> uint32_t>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_tablet_pad_v2_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_pad_v2_grab {
    pub interface: *const wlr_tablet_pad_v2_grab_interface,
    pub pad: *mut wlr_tablet_v2_tablet_pad,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_v2_tablet_pad {
    pub link: wl_list,
    pub wlr_pad: *mut wlr_tablet_pad,
    pub wlr_device: *mut wlr_input_device,
    pub clients: wl_list,
    pub group_count: size_t,
    pub groups: *mut uint32_t,
    pub pad_destroy: wl_listener,
    pub current_client: *mut wlr_tablet_pad_client_v2,
    pub grab: *mut wlr_tablet_pad_v2_grab,
    pub default_grab: wlr_tablet_pad_v2_grab,
    pub events: C2RustUnnamed_14,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_14 {
    pub button_feedback: wl_signal,
    pub strip_feedback: wl_signal,
    pub ring_feedback: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_pad_client_v2 {
    pub seat_link: wl_list,
    pub pad_link: wl_list,
    pub client: *mut wl_client,
    pub resource: *mut wl_resource,
    pub pad: *mut wlr_tablet_v2_tablet_pad,
    pub seat: *mut wlr_tablet_seat_client_v2,
    pub button_count: size_t,
    pub group_count: size_t,
    pub groups: *mut *mut wl_resource,
    pub ring_count: size_t,
    pub rings: *mut *mut wl_resource,
    pub strip_count: size_t,
    pub strips: *mut *mut wl_resource,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_seat_client_v2 {
    pub seat_link: wl_list,
    pub client_link: wl_list,
    pub wl_client: *mut wl_client,
    pub resource: *mut wl_resource,
    pub client: *mut wlr_tablet_manager_client_v2,
    pub seat_client: *mut wlr_seat_client,
    pub seat_client_destroy: wl_listener,
    pub tools: wl_list,
    pub tablets: wl_list,
    pub pads: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_v2_tablet {
    pub link: wl_list,
    pub wlr_tablet: *mut wlr_tablet,
    pub wlr_device: *mut wlr_input_device,
    pub clients: wl_list,
    pub tool_destroy: wl_listener,
    pub current_client: *mut wlr_tablet_client_v2,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_client_v2 {
    pub seat_link: wl_list,
    pub tablet_link: wl_list,
    pub client: *mut wl_client,
    pub resource: *mut wl_resource,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_manager_v2 {
    pub wl_global: *mut wl_global,
    pub clients: wl_list,
    pub seats: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_15,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_15 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_v2_event_feedback {
    pub description: *const libc::c_char,
    pub index: size_t,
    pub serial: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct tablet_pad_auxiliary_user_data {
    pub pad: *mut wlr_tablet_pad_client_v2,
    pub index: size_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_seat_v2 {
    pub link: wl_list,
    pub wlr_seat: *mut wlr_seat,
    pub manager: *mut wlr_tablet_manager_v2,
    pub tablets: wl_list,
    pub tools: wl_list,
    pub pads: wl_list,
    pub clients: wl_list,
    pub seat_destroy: wl_listener,
}
/* *
 * @ingroup iface_zwp_tablet_seat_v2
 * Sends an pad_added event to the client owning the resource.
 * @param resource_ The client's resource
 * @param id the newly added pad
 */
#[inline]
unsafe extern "C" fn zwp_tablet_seat_v2_send_pad_added(mut resource_:
                                                           *mut wl_resource,
                                                       mut id:
                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 2i32 as uint32_t, id);
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
#[inline]
unsafe extern "C" fn wl_signal_emit(mut signal: *mut wl_signal,
                                    mut data: *mut libc::c_void) {
    let mut l: *mut wl_listener = 0 as *mut wl_listener;
    let mut next: *mut wl_listener = 0 as *mut wl_listener;
    l =
        ((*signal).listener_list.next as *mut libc::c_char).offset(-0) as
            *mut wl_listener;
    next =
        ((*l).link.next as *mut libc::c_char).offset(-0) as *mut wl_listener;
    while &mut (*l).link as *mut wl_list !=
              &mut (*signal).listener_list as *mut wl_list {
        (*l).notify.expect("non-null function pointer")(l, data);
        l = next;
        next =
            ((*l).link.next as *mut libc::c_char).offset(-0) as
                *mut wl_listener
    };
}
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 * Sends an source event to the client owning the resource.
 * @param resource_ The client's resource
 * @param source the event source
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_ring_v2_send_source(mut resource_:
                                                            *mut wl_resource,
                                                        mut source:
                                                            uint32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, source);
}
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 * Sends an angle event to the client owning the resource.
 * @param resource_ The client's resource
 * @param degrees the current angle in degrees
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_ring_v2_send_angle(mut resource_:
                                                           *mut wl_resource,
                                                       mut degrees:
                                                           wl_fixed_t) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, degrees);
}
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 * Sends an stop event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_ring_v2_send_stop(mut resource_:
                                                          *mut wl_resource) {
    wl_resource_post_event(resource_, 2i32 as uint32_t);
}
/* *
 * @ingroup iface_zwp_tablet_pad_ring_v2
 * Sends an frame event to the client owning the resource.
 * @param resource_ The client's resource
 * @param time timestamp with millisecond granularity
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_ring_v2_send_frame(mut resource_:
                                                           *mut wl_resource,
                                                       mut time: uint32_t) {
    wl_resource_post_event(resource_, 3i32 as uint32_t, time);
}
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 * Sends an source event to the client owning the resource.
 * @param resource_ The client's resource
 * @param source the event source
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_strip_v2_send_source(mut resource_:
                                                             *mut wl_resource,
                                                         mut source:
                                                             uint32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, source);
}
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 * Sends an position event to the client owning the resource.
 * @param resource_ The client's resource
 * @param position the current position
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_strip_v2_send_position(mut resource_:
                                                               *mut wl_resource,
                                                           mut position:
                                                               uint32_t) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, position);
}
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 * Sends an stop event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_strip_v2_send_stop(mut resource_:
                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 2i32 as uint32_t);
}
/* *
 * @ingroup iface_zwp_tablet_pad_strip_v2
 * Sends an frame event to the client owning the resource.
 * @param resource_ The client's resource
 * @param time timestamp with millisecond granularity
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_strip_v2_send_frame(mut resource_:
                                                            *mut wl_resource,
                                                        mut time: uint32_t) {
    wl_resource_post_event(resource_, 3i32 as uint32_t, time);
}
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 * Sends an buttons event to the client owning the resource.
 * @param resource_ The client's resource
 * @param buttons buttons in this group
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_group_v2_send_buttons(mut resource_:
                                                              *mut wl_resource,
                                                          mut buttons:
                                                              *mut wl_array) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, buttons);
}
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 * Sends an ring event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_group_v2_send_ring(mut resource_:
                                                           *mut wl_resource,
                                                       mut ring:
                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, ring);
}
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 * Sends an strip event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_group_v2_send_strip(mut resource_:
                                                            *mut wl_resource,
                                                        mut strip:
                                                            *mut wl_resource) {
    wl_resource_post_event(resource_, 2i32 as uint32_t, strip);
}
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 * Sends an modes event to the client owning the resource.
 * @param resource_ The client's resource
 * @param modes the number of modes
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_group_v2_send_modes(mut resource_:
                                                            *mut wl_resource,
                                                        mut modes: uint32_t) {
    wl_resource_post_event(resource_, 3i32 as uint32_t, modes);
}
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 * Sends an done event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_group_v2_send_done(mut resource_:
                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 4i32 as uint32_t);
}
/* *
 * @ingroup iface_zwp_tablet_pad_group_v2
 * Sends an mode_switch event to the client owning the resource.
 * @param resource_ The client's resource
 * @param time the time of the event with millisecond granularity
 * @param mode the new mode of the pad
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_group_v2_send_mode_switch(mut resource_:
                                                                  *mut wl_resource,
                                                              mut time:
                                                                  uint32_t,
                                                              mut serial:
                                                                  uint32_t,
                                                              mut mode:
                                                                  uint32_t) {
    wl_resource_post_event(resource_, 5i32 as uint32_t, time, serial, mode);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 */
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an group event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_group(mut resource_:
                                                      *mut wl_resource,
                                                  mut pad_group:
                                                      *mut wl_resource) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, pad_group);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an path event to the client owning the resource.
 * @param resource_ The client's resource
 * @param path path to local device
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_path(mut resource_:
                                                     *mut wl_resource,
                                                 mut path:
                                                     *const libc::c_char) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, path);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an buttons event to the client owning the resource.
 * @param resource_ The client's resource
 * @param buttons the number of buttons
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_buttons(mut resource_:
                                                        *mut wl_resource,
                                                    mut buttons: uint32_t) {
    wl_resource_post_event(resource_, 2i32 as uint32_t, buttons);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an done event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_done(mut resource_:
                                                     *mut wl_resource) {
    wl_resource_post_event(resource_, 3i32 as uint32_t);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an button event to the client owning the resource.
 * @param resource_ The client's resource
 * @param time the time of the event with millisecond granularity
 * @param button the index of the button that changed state
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_button(mut resource_:
                                                       *mut wl_resource,
                                                   mut time: uint32_t,
                                                   mut button: uint32_t,
                                                   mut state: uint32_t) {
    wl_resource_post_event(resource_, 4i32 as uint32_t, time, button, state);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an enter event to the client owning the resource.
 * @param resource_ The client's resource
 * @param serial serial number of the enter event
 * @param tablet the tablet the pad is attached to
 * @param surface surface the pad is focused on
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_enter(mut resource_:
                                                      *mut wl_resource,
                                                  mut serial: uint32_t,
                                                  mut tablet:
                                                      *mut wl_resource,
                                                  mut surface:
                                                      *mut wl_resource) {
    wl_resource_post_event(resource_, 5i32 as uint32_t, serial, tablet,
                           surface);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an leave event to the client owning the resource.
 * @param resource_ The client's resource
 * @param serial serial number of the leave event
 * @param surface surface the pad is no longer focused on
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_leave(mut resource_:
                                                      *mut wl_resource,
                                                  mut serial: uint32_t,
                                                  mut surface:
                                                      *mut wl_resource) {
    wl_resource_post_event(resource_, 6i32 as uint32_t, serial, surface);
}
/* *
 * @ingroup iface_zwp_tablet_pad_v2
 * Sends an removed event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwp_tablet_pad_v2_send_removed(mut resource_:
                                                        *mut wl_resource) {
    wl_resource_post_event(resource_, 7i32 as uint32_t);
}
unsafe extern "C" fn handle_tablet_pad_v2_destroy(mut client: *mut wl_client,
                                                  mut resource:
                                                      *mut wl_resource) {
    wl_resource_destroy(resource);
}
unsafe extern "C" fn destroy_tablet_pad_ring_v2(mut resource:
                                                    *mut wl_resource) {
    let mut aux: *mut tablet_pad_auxiliary_user_data =
        wl_resource_get_user_data(resource) as
            *mut tablet_pad_auxiliary_user_data;
    if aux.is_null() { return }
    let ref mut fresh0 = *(*(*aux).pad).rings.offset((*aux).index as isize);
    *fresh0 = 0 as *mut wl_resource;
    free(aux as *mut libc::c_void);
    wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
}
unsafe extern "C" fn handle_tablet_pad_ring_v2_set_feedback(mut client:
                                                                *mut wl_client,
                                                            mut resource:
                                                                *mut wl_resource,
                                                            mut description:
                                                                *const libc::c_char,
                                                            mut serial:
                                                                uint32_t) {
    let mut aux: *mut tablet_pad_auxiliary_user_data =
        wl_resource_get_user_data(resource) as
            *mut tablet_pad_auxiliary_user_data;
    if aux.is_null() { return }
    let mut evt: wlr_tablet_v2_event_feedback =
        {
            let mut init =
                wlr_tablet_v2_event_feedback{description: description,
                                             index: (*aux).index,
                                             serial: serial,};
            init
        };
    wl_signal_emit(&mut (*(*(*aux).pad).pad).events.ring_feedback,
                   &mut evt as *mut wlr_tablet_v2_event_feedback as
                       *mut libc::c_void);
}
unsafe extern "C" fn handle_tablet_pad_ring_v2_destroy(mut client:
                                                           *mut wl_client,
                                                       mut resource:
                                                           *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut tablet_pad_ring_impl: zwp_tablet_pad_ring_v2_interface =
    unsafe {
        {
            let mut init =
                zwp_tablet_pad_ring_v2_interface{set_feedback:
                                                     Some(handle_tablet_pad_ring_v2_set_feedback
                                                              as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wl_client,
                                                                                   _:
                                                                                       *mut wl_resource,
                                                                                   _:
                                                                                       *const libc::c_char,
                                                                                   _:
                                                                                       uint32_t)
                                                                  -> ()),
                                                 destroy:
                                                     Some(handle_tablet_pad_ring_v2_destroy
                                                              as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wl_client,
                                                                                   _:
                                                                                       *mut wl_resource)
                                                                  -> ()),};
            init
        }
    };
unsafe extern "C" fn destroy_tablet_pad_strip_v2(mut resource:
                                                     *mut wl_resource) {
    let mut aux: *mut tablet_pad_auxiliary_user_data =
        wl_resource_get_user_data(resource) as
            *mut tablet_pad_auxiliary_user_data;
    if aux.is_null() { return }
    let ref mut fresh1 = *(*(*aux).pad).strips.offset((*aux).index as isize);
    *fresh1 = 0 as *mut wl_resource;
    free(aux as *mut libc::c_void);
    wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
}
unsafe extern "C" fn handle_tablet_pad_strip_v2_set_feedback(mut client:
                                                                 *mut wl_client,
                                                             mut resource:
                                                                 *mut wl_resource,
                                                             mut description:
                                                                 *const libc::c_char,
                                                             mut serial:
                                                                 uint32_t) {
    let mut aux: *mut tablet_pad_auxiliary_user_data =
        wl_resource_get_user_data(resource) as
            *mut tablet_pad_auxiliary_user_data;
    if aux.is_null() { return }
    let mut evt: wlr_tablet_v2_event_feedback =
        {
            let mut init =
                wlr_tablet_v2_event_feedback{description: description,
                                             index: (*aux).index,
                                             serial: serial,};
            init
        };
    wl_signal_emit(&mut (*(*(*aux).pad).pad).events.strip_feedback,
                   &mut evt as *mut wlr_tablet_v2_event_feedback as
                       *mut libc::c_void);
}
unsafe extern "C" fn handle_tablet_pad_strip_v2_destroy(mut client:
                                                            *mut wl_client,
                                                        mut resource:
                                                            *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut tablet_pad_strip_impl: zwp_tablet_pad_strip_v2_interface =
    unsafe {
        {
            let mut init =
                zwp_tablet_pad_strip_v2_interface{set_feedback:
                                                      Some(handle_tablet_pad_strip_v2_set_feedback
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource,
                                                                                    _:
                                                                                        *const libc::c_char,
                                                                                    _:
                                                                                        uint32_t)
                                                                   -> ()),
                                                  destroy:
                                                      Some(handle_tablet_pad_strip_v2_destroy
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource)
                                                                   -> ()),};
            init
        }
    };
unsafe extern "C" fn handle_tablet_pad_v2_set_feedback(mut client:
                                                           *mut wl_client,
                                                       mut resource:
                                                           *mut wl_resource,
                                                       mut button: uint32_t,
                                                       mut description:
                                                           *const libc::c_char,
                                                       mut serial: uint32_t) {
    let mut pad: *mut wlr_tablet_pad_client_v2 =
        tablet_pad_client_from_resource(resource);
    if pad.is_null() { return }
    let mut evt: wlr_tablet_v2_event_feedback =
        {
            let mut init =
                wlr_tablet_v2_event_feedback{description: description,
                                             index: button as size_t,
                                             serial: serial,};
            init
        };
    wl_signal_emit(&mut (*(*pad).pad).events.button_feedback,
                   &mut evt as *mut wlr_tablet_v2_event_feedback as
                       *mut libc::c_void);
}
static mut tablet_pad_impl: zwp_tablet_pad_v2_interface =
    unsafe {
        {
            let mut init =
                zwp_tablet_pad_v2_interface{set_feedback:
                                                Some(handle_tablet_pad_v2_set_feedback
                                                         as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource,
                                                                              _:
                                                                                  uint32_t,
                                                                              _:
                                                                                  *const libc::c_char,
                                                                              _:
                                                                                  uint32_t)
                                                             -> ()),
                                            destroy:
                                                Some(handle_tablet_pad_v2_destroy
                                                         as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource)
                                                             -> ()),};
            init
        }
    };
unsafe extern "C" fn destroy_tablet_pad_group_v2(mut resource:
                                                     *mut wl_resource) {
    let mut aux: *mut tablet_pad_auxiliary_user_data =
        wl_resource_get_user_data(resource) as
            *mut tablet_pad_auxiliary_user_data;
    if aux.is_null() { return }
    let ref mut fresh2 = *(*(*aux).pad).groups.offset((*aux).index as isize);
    *fresh2 = 0 as *mut wl_resource;
    free(aux as *mut libc::c_void);
    wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn destroy_tablet_pad_v2(mut resource:
                                                   *mut wl_resource) {
    let mut pad: *mut wlr_tablet_pad_client_v2 =
        tablet_pad_client_from_resource(resource);
    if pad.is_null() { return }
    wl_list_remove(&mut (*pad).seat_link);
    wl_list_remove(&mut (*pad).pad_link);
    /* This isn't optimal, if the client destroys the resources in another
	 * order, it will be disconnected.
	 * But this makes things *way* easier for us, and (untested) I doubt
	 * clients will destroy it in another order.
	 */
    let mut i: size_t = 0i32 as size_t;
    while i < (*pad).group_count {
        if !(*(*pad).groups.offset(i as isize)).is_null() {
            destroy_tablet_pad_group_v2(*(*pad).groups.offset(i as isize));
        }
        i = i.wrapping_add(1)
    }
    free((*pad).groups as *mut libc::c_void);
    let mut i_0: size_t = 0i32 as size_t;
    while i_0 < (*pad).ring_count {
        if !(*(*pad).rings.offset(i_0 as isize)).is_null() {
            destroy_tablet_pad_ring_v2(*(*pad).rings.offset(i_0 as isize));
        }
        i_0 = i_0.wrapping_add(1)
    }
    free((*pad).rings as *mut libc::c_void);
    let mut i_1: size_t = 0i32 as size_t;
    while i_1 < (*pad).strip_count {
        if !(*(*pad).strips.offset(i_1 as isize)).is_null() {
            destroy_tablet_pad_strip_v2(*(*pad).strips.offset(i_1 as isize));
        }
        i_1 = i_1.wrapping_add(1)
    }
    free((*pad).strips as *mut libc::c_void);
    if (*(*pad).pad).current_client == pad {
        (*(*pad).pad).current_client = 0 as *mut wlr_tablet_pad_client_v2
    }
    free(pad as *mut libc::c_void);
    wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
}
unsafe extern "C" fn handle_tablet_pad_group_v2_destroy(mut client:
                                                            *mut wl_client,
                                                        mut resource:
                                                            *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut tablet_pad_group_impl: zwp_tablet_pad_group_v2_interface =
    unsafe {
        {
            let mut init =
                zwp_tablet_pad_group_v2_interface{destroy:
                                                      Some(handle_tablet_pad_group_v2_destroy
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource)
                                                                   -> ()),};
            init
        }
    };
unsafe extern "C" fn add_tablet_pad_group(mut pad:
                                              *mut wlr_tablet_v2_tablet_pad,
                                          mut client:
                                              *mut wlr_tablet_pad_client_v2,
                                          mut group:
                                              *mut wlr_tablet_pad_group,
                                          mut index: size_t) {
    let mut version: uint32_t =
        wl_resource_get_version((*client).resource) as uint32_t;
    let ref mut fresh3 = *(*client).groups.offset(index as isize);
    *fresh3 =
        wl_resource_create((*client).client,
                           &zwp_tablet_pad_group_v2_interface,
                           version as libc::c_int, 0i32 as uint32_t);
    if (*(*client).groups.offset(index as isize)).is_null() {
        wl_client_post_no_memory((*client).client);
        return
    }
    let mut user_data: *mut tablet_pad_auxiliary_user_data =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<tablet_pad_auxiliary_user_data>() as
                   libc::c_ulong) as *mut tablet_pad_auxiliary_user_data;
    if user_data.is_null() {
        wl_client_post_no_memory((*client).client);
        return
    }
    (*user_data).pad = client;
    (*user_data).index = index;
    wl_resource_set_implementation(*(*client).groups.offset(index as isize),
                                   &mut tablet_pad_group_impl as
                                       *mut zwp_tablet_pad_group_v2_interface
                                       as *const libc::c_void,
                                   user_data as *mut libc::c_void,
                                   Some(destroy_tablet_pad_group_v2 as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    zwp_tablet_pad_v2_send_group((*client).resource,
                                 *(*client).groups.offset(index as isize));
    zwp_tablet_pad_group_v2_send_modes(*(*client).groups.offset(index as
                                                                    isize),
                                       (*group).mode_count);
    let mut button_array: wl_array =
        wl_array{size: 0, alloc: 0, data: 0 as *mut libc::c_void,};
    wl_array_init(&mut button_array);
    wl_array_add(&mut button_array,
                 (*group).button_count.wrapping_mul(::std::mem::size_of::<libc::c_int>()
                                                        as libc::c_ulong));
    memcpy(button_array.data, (*group).buttons as *const libc::c_void,
           (*group).button_count.wrapping_mul(::std::mem::size_of::<libc::c_int>()
                                                  as libc::c_ulong));
    zwp_tablet_pad_group_v2_send_buttons(*(*client).groups.offset(index as
                                                                      isize),
                                         &mut button_array);
    wl_array_release(&mut button_array);
    (*client).strip_count = (*group).strip_count;
    let mut i: size_t = 0i32 as size_t;
    while i < (*group).strip_count {
        let mut strip: size_t = *(*group).strips.offset(i as isize) as size_t;
        let mut user_data_0: *mut tablet_pad_auxiliary_user_data =
            calloc(1i32 as libc::c_ulong,
                   ::std::mem::size_of::<tablet_pad_auxiliary_user_data>() as
                       libc::c_ulong) as *mut tablet_pad_auxiliary_user_data;
        if user_data_0.is_null() {
            wl_client_post_no_memory((*client).client);
            return
        }
        (*user_data_0).pad = client;
        (*user_data_0).index = strip;
        let ref mut fresh4 = *(*client).strips.offset(strip as isize);
        *fresh4 =
            wl_resource_create((*client).client,
                               &zwp_tablet_pad_strip_v2_interface,
                               version as libc::c_int, 0i32 as uint32_t);
        if (*(*client).strips.offset(strip as isize)).is_null() {
            free(user_data_0 as *mut libc::c_void);
            wl_client_post_no_memory((*client).client);
            return
        }
        wl_resource_set_implementation(*(*client).strips.offset(strip as
                                                                    isize),
                                       &mut tablet_pad_strip_impl as
                                           *mut zwp_tablet_pad_strip_v2_interface
                                           as *const libc::c_void,
                                       user_data_0 as *mut libc::c_void,
                                       Some(destroy_tablet_pad_strip_v2 as
                                                unsafe extern "C" fn(_:
                                                                         *mut wl_resource)
                                                    -> ()));
        zwp_tablet_pad_group_v2_send_strip(*(*client).groups.offset(index as
                                                                        isize),
                                           *(*client).strips.offset(strip as
                                                                        isize));
        i = i.wrapping_add(1)
    }
    (*client).ring_count = (*group).ring_count;
    let mut i_0: size_t = 0i32 as size_t;
    while i_0 < (*group).ring_count {
        let mut ring: size_t = *(*group).rings.offset(i_0 as isize) as size_t;
        let mut user_data_1: *mut tablet_pad_auxiliary_user_data =
            calloc(1i32 as libc::c_ulong,
                   ::std::mem::size_of::<tablet_pad_auxiliary_user_data>() as
                       libc::c_ulong) as *mut tablet_pad_auxiliary_user_data;
        if user_data_1.is_null() {
            wl_client_post_no_memory((*client).client);
            return
        }
        (*user_data_1).pad = client;
        (*user_data_1).index = ring;
        let ref mut fresh5 = *(*client).rings.offset(ring as isize);
        *fresh5 =
            wl_resource_create((*client).client,
                               &zwp_tablet_pad_ring_v2_interface,
                               version as libc::c_int, 0i32 as uint32_t);
        if (*(*client).rings.offset(ring as isize)).is_null() {
            free(user_data_1 as *mut libc::c_void);
            wl_client_post_no_memory((*client).client);
            return
        }
        wl_resource_set_implementation(*(*client).rings.offset(ring as isize),
                                       &mut tablet_pad_ring_impl as
                                           *mut zwp_tablet_pad_ring_v2_interface
                                           as *const libc::c_void,
                                       user_data_1 as *mut libc::c_void,
                                       Some(destroy_tablet_pad_ring_v2 as
                                                unsafe extern "C" fn(_:
                                                                         *mut wl_resource)
                                                    -> ()));
        zwp_tablet_pad_group_v2_send_ring(*(*client).groups.offset(index as
                                                                       isize),
                                          *(*client).rings.offset(ring as
                                                                      isize));
        i_0 = i_0.wrapping_add(1)
    }
    zwp_tablet_pad_group_v2_send_done(*(*client).groups.offset(index as
                                                                   isize));
}
#[no_mangle]
pub unsafe extern "C" fn add_tablet_pad_client(mut seat:
                                                   *mut wlr_tablet_seat_client_v2,
                                               mut pad:
                                                   *mut wlr_tablet_v2_tablet_pad) {
    let mut client: *mut wlr_tablet_pad_client_v2 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_tablet_pad_client_v2>() as
                   libc::c_ulong) as *mut wlr_tablet_pad_client_v2;
    if client.is_null() {
        wl_client_post_no_memory((*seat).wl_client);
        return
    }
    (*client).pad = pad;
    (*client).seat = seat;
    (*client).groups =
        calloc(wl_list_length(&mut (*(*pad).wlr_pad).groups) as libc::c_ulong,
               ::std::mem::size_of::<*mut wl_resource>() as libc::c_ulong) as
            *mut *mut wl_resource;
    if (*client).groups.is_null() {
        wl_client_post_no_memory((*seat).wl_client);
        free(client as *mut libc::c_void);
        return
    }
    (*client).rings =
        calloc((*(*pad).wlr_pad).ring_count,
               ::std::mem::size_of::<*mut wl_resource>() as libc::c_ulong) as
            *mut *mut wl_resource;
    if (*client).rings.is_null() {
        wl_client_post_no_memory((*seat).wl_client);
        free((*client).groups as *mut libc::c_void);
        free(client as *mut libc::c_void);
        return
    }
    (*client).strips =
        calloc((*(*pad).wlr_pad).strip_count,
               ::std::mem::size_of::<*mut wl_resource>() as libc::c_ulong) as
            *mut *mut wl_resource;
    if (*client).strips.is_null() {
        wl_client_post_no_memory((*seat).wl_client);
        free((*client).groups as *mut libc::c_void);
        free((*client).rings as *mut libc::c_void);
        free(client as *mut libc::c_void);
        return
    }
    (*client).resource =
        wl_resource_create((*seat).wl_client, &zwp_tablet_pad_v2_interface,
                           1i32, 0i32 as uint32_t);
    if (*client).resource.is_null() {
        wl_client_post_no_memory((*seat).wl_client);
        free((*client).groups as *mut libc::c_void);
        free((*client).rings as *mut libc::c_void);
        free((*client).strips as *mut libc::c_void);
        free(client as *mut libc::c_void);
        return
    }
    wl_resource_set_implementation((*client).resource,
                                   &mut tablet_pad_impl as
                                       *mut zwp_tablet_pad_v2_interface as
                                       *const libc::c_void,
                                   client as *mut libc::c_void,
                                   Some(destroy_tablet_pad_v2 as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    zwp_tablet_seat_v2_send_pad_added((*seat).resource, (*client).resource);
    (*client).client = (*seat).wl_client;
    // Send the expected events
    if (*(*pad).wlr_pad).button_count != 0 {
        zwp_tablet_pad_v2_send_buttons((*client).resource,
                                       (*(*pad).wlr_pad).button_count as
                                           uint32_t);
    }
    let mut i: size_t = 0i32 as size_t;
    while i < (*(*pad).wlr_pad).paths.length {
        zwp_tablet_pad_v2_send_path((*client).resource,
                                    *(*(*pad).wlr_pad).paths.items.offset(i as
                                                                              isize)
                                        as *const libc::c_char);
        i = i.wrapping_add(1)
    }
    let mut i_0: size_t = 0i32 as size_t;
    let mut group: *mut wlr_tablet_pad_group = 0 as *mut wlr_tablet_pad_group;
    (*client).group_count = (*pad).group_count;
    group =
        ((*(*pad).wlr_pad).groups.next as *mut libc::c_char).offset(-0) as
            *mut wlr_tablet_pad_group;
    while &mut (*group).link as *mut wl_list !=
              &mut (*(*pad).wlr_pad).groups as *mut wl_list {
        let fresh6 = i_0;
        i_0 = i_0.wrapping_add(1);
        add_tablet_pad_group(pad, client, group, fresh6);
        group =
            ((*group).link.next as *mut libc::c_char).offset(-0) as
                *mut wlr_tablet_pad_group
    }
    zwp_tablet_pad_v2_send_done((*client).resource);
    wl_list_insert(&mut (*seat).pads, &mut (*client).seat_link);
    wl_list_insert(&mut (*pad).clients, &mut (*client).pad_link);
}
unsafe extern "C" fn handle_wlr_tablet_pad_destroy(mut listener:
                                                       *mut wl_listener,
                                                   mut data:
                                                       *mut libc::c_void) {
    let mut pad: *mut wlr_tablet_v2_tablet_pad =
        (listener as *mut libc::c_char).offset(-64) as
            *mut wlr_tablet_v2_tablet_pad;
    let mut client: *mut wlr_tablet_pad_client_v2 =
        0 as *mut wlr_tablet_pad_client_v2;
    let mut tmp_client: *mut wlr_tablet_pad_client_v2 =
        0 as *mut wlr_tablet_pad_client_v2;
    client =
        ((*pad).clients.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_pad_client_v2;
    tmp_client =
        ((*client).pad_link.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_pad_client_v2;
    while &mut (*client).pad_link as *mut wl_list !=
              &mut (*pad).clients as *mut wl_list {
        zwp_tablet_pad_v2_send_removed((*client).resource);
        destroy_tablet_pad_v2((*client).resource);
        client = tmp_client;
        tmp_client =
            ((*client).pad_link.next as *mut libc::c_char).offset(-16) as
                *mut wlr_tablet_pad_client_v2
    }
    wl_list_remove(&mut (*pad).clients);
    wl_list_remove(&mut (*pad).link);
    wl_list_remove(&mut (*pad).pad_destroy.link);
    wl_list_remove(&mut (*pad).events.button_feedback.listener_list);
    wl_list_remove(&mut (*pad).events.strip_feedback.listener_list);
    wl_list_remove(&mut (*pad).events.ring_feedback.listener_list);
    free(pad as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_pad_create(mut manager:
                                                   *mut wlr_tablet_manager_v2,
                                               mut wlr_seat: *mut wlr_seat,
                                               mut wlr_device:
                                                   *mut wlr_input_device)
 -> *mut wlr_tablet_v2_tablet_pad {
    if (*wlr_device).type_0 as libc::c_uint ==
           WLR_INPUT_DEVICE_TABLET_PAD as libc::c_int as libc::c_uint {
    } else {
        __assert_fail(b"wlr_device->type == WLR_INPUT_DEVICE_TABLET_PAD\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/tablet_v2/wlr_tablet_v2_pad.c\x00" as
                          *const u8 as *const libc::c_char,
                      368i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 133],
                                                &[libc::c_char; 133]>(b"struct wlr_tablet_v2_tablet_pad *wlr_tablet_pad_create(struct wlr_tablet_manager_v2 *, struct wlr_seat *, struct wlr_input_device *)\x00")).as_ptr());
    };
    let mut seat: *mut wlr_tablet_seat_v2 =
        get_or_create_tablet_seat(manager, wlr_seat);
    if seat.is_null() { return 0 as *mut wlr_tablet_v2_tablet_pad }
    let mut wlr_pad: *mut wlr_tablet_pad =
        (*wlr_device).c2rust_unnamed.tablet_pad;
    let mut pad: *mut wlr_tablet_v2_tablet_pad =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_tablet_v2_tablet_pad>() as
                   libc::c_ulong) as *mut wlr_tablet_v2_tablet_pad;
    if pad.is_null() { return 0 as *mut wlr_tablet_v2_tablet_pad }
    (*pad).default_grab.interface = &mut default_pad_grab_interface;
    (*pad).default_grab.pad = pad;
    (*pad).grab = &mut (*pad).default_grab;
    (*pad).group_count = wl_list_length(&mut (*wlr_pad).groups) as size_t;
    (*pad).groups =
        calloc((*pad).group_count,
               ::std::mem::size_of::<uint32_t>() as libc::c_ulong) as
            *mut uint32_t;
    if (*pad).groups.is_null() {
        free(pad as *mut libc::c_void);
        return 0 as *mut wlr_tablet_v2_tablet_pad
    }
    (*pad).wlr_pad = wlr_pad;
    wl_list_init(&mut (*pad).clients);
    (*pad).pad_destroy.notify =
        Some(handle_wlr_tablet_pad_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*wlr_device).events.destroy, &mut (*pad).pad_destroy);
    wl_list_insert(&mut (*seat).pads, &mut (*pad).link);
    // We need to create a tablet client for all clients on the seat
    let mut pos: *mut wlr_tablet_seat_client_v2 =
        0 as *mut wlr_tablet_seat_client_v2;
    pos =
        ((*seat).clients.next as *mut libc::c_char).offset(-0) as
            *mut wlr_tablet_seat_client_v2;
    while &mut (*pos).seat_link as *mut wl_list !=
              &mut (*seat).clients as *mut wl_list {
        // Tell the clients about the new tool
        add_tablet_pad_client(pos, pad);
        pos =
            ((*pos).seat_link.next as *mut libc::c_char).offset(-0) as
                *mut wlr_tablet_seat_client_v2
    }
    wl_signal_init(&mut (*pad).events.button_feedback);
    wl_signal_init(&mut (*pad).events.strip_feedback);
    wl_signal_init(&mut (*pad).events.ring_feedback);
    return pad;
}
#[no_mangle]
pub unsafe extern "C" fn tablet_pad_client_from_resource(mut resource:
                                                             *mut wl_resource)
 -> *mut wlr_tablet_pad_client_v2 {
    if wl_resource_instance_of(resource, &zwp_tablet_pad_v2_interface,
                               &mut tablet_pad_impl as
                                   *mut zwp_tablet_pad_v2_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_tablet_pad_v2_interface, &tablet_pad_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/tablet_v2/wlr_tablet_v2_pad.c\x00" as
                          *const u8 as *const libc::c_char,
                      412i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 87],
                                                &[libc::c_char; 87]>(b"struct wlr_tablet_pad_client_v2 *tablet_pad_client_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_tablet_pad_client_v2;
}
/* Actual protocol foo */
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_pad_enter(mut pad:
                                                                 *mut wlr_tablet_v2_tablet_pad,
                                                             mut tablet:
                                                                 *mut wlr_tablet_v2_tablet,
                                                             mut surface:
                                                                 *mut wlr_surface)
 -> uint32_t {
    let mut client: *mut wl_client =
        wl_resource_get_client((*surface).resource);
    let mut tablet_tmp: *mut wlr_tablet_client_v2 =
        0 as *mut wlr_tablet_client_v2;
    let mut tablet_client: *mut wlr_tablet_client_v2 =
        0 as *mut wlr_tablet_client_v2;
    tablet_tmp =
        ((*tablet).clients.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_client_v2;
    while &mut (*tablet_tmp).tablet_link as *mut wl_list !=
              &mut (*tablet).clients as *mut wl_list {
        if (*tablet_tmp).client == client {
            tablet_client = tablet_tmp;
            break ;
        } else {
            tablet_tmp =
                ((*tablet_tmp).tablet_link.next as
                     *mut libc::c_char).offset(-16) as
                    *mut wlr_tablet_client_v2
        }
    }
    // Couldn't find the client binding for the surface's client. Either
	// the client didn't bind tablet_v2 at all, or not for the relevant
	// seat
    if tablet_client.is_null() { return 0i32 as uint32_t }
    let mut pad_tmp: *mut wlr_tablet_pad_client_v2 =
        0 as *mut wlr_tablet_pad_client_v2;
    let mut pad_client: *mut wlr_tablet_pad_client_v2 =
        0 as *mut wlr_tablet_pad_client_v2;
    pad_tmp =
        ((*pad).clients.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_pad_client_v2;
    while &mut (*pad_tmp).pad_link as *mut wl_list !=
              &mut (*pad).clients as *mut wl_list {
        if (*pad_tmp).client == client {
            pad_client = pad_tmp;
            break ;
        } else {
            pad_tmp =
                ((*pad_tmp).pad_link.next as *mut libc::c_char).offset(-16) as
                    *mut wlr_tablet_pad_client_v2
        }
    }
    // Couldn't find the client binding for the surface's client. Either
	// the client didn't bind tablet_v2 at all, or not for the relevant
	// seat
    if pad_client.is_null() { return 0i32 as uint32_t }
    (*pad).current_client = pad_client;
    let mut serial: uint32_t =
        wlr_seat_client_next_serial((*(*pad_client).seat).seat_client);
    zwp_tablet_pad_v2_send_enter((*pad_client).resource, serial,
                                 (*tablet_client).resource,
                                 (*surface).resource);
    let mut now: timespec = timespec{tv_sec: 0, tv_nsec: 0,};
    clock_gettime(1i32, &mut now);
    let mut time: uint32_t =
        (now.tv_nsec / 1000i32 as libc::c_long) as uint32_t;
    let mut i: size_t = 0i32 as size_t;
    while i < (*pad).group_count {
        if !(*(*pad_client).groups.offset(i as isize)).is_null() {
            zwp_tablet_pad_group_v2_send_mode_switch(*(*pad_client).groups.offset(i
                                                                                      as
                                                                                      isize),
                                                     time, serial,
                                                     *(*pad).groups.offset(i
                                                                               as
                                                                               isize));
        }
        i = i.wrapping_add(1)
    }
    return serial;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_pad_button(mut pad:
                                                                  *mut wlr_tablet_v2_tablet_pad,
                                                              mut button:
                                                                  size_t,
                                                              mut time:
                                                                  uint32_t,
                                                              mut state:
                                                                  zwp_tablet_pad_v2_button_state) {
    if !(*pad).current_client.is_null() {
        zwp_tablet_pad_v2_send_button((*(*pad).current_client).resource, time,
                                      button as uint32_t, state as uint32_t);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_pad_strip(mut pad:
                                                                 *mut wlr_tablet_v2_tablet_pad,
                                                             mut strip:
                                                                 uint32_t,
                                                             mut position:
                                                                 libc::c_double,
                                                             mut finger: bool,
                                                             mut time:
                                                                 uint32_t) {
    if (*pad).current_client.is_null() ||
           (*(*pad).current_client).strips.is_null() ||
           (*(*(*pad).current_client).strips.offset(strip as isize)).is_null()
       {
        return
    }
    let mut resource: *mut wl_resource =
        *(*(*pad).current_client).strips.offset(strip as isize);
    if finger {
        zwp_tablet_pad_strip_v2_send_source(resource,
                                            ZWP_TABLET_PAD_STRIP_V2_SOURCE_FINGER
                                                as libc::c_int as uint32_t);
    }
    if position < 0i32 as libc::c_double {
        zwp_tablet_pad_strip_v2_send_stop(resource);
    } else {
        zwp_tablet_pad_strip_v2_send_position(resource,
                                              (position *
                                                   65535i32 as libc::c_double)
                                                  as uint32_t);
    }
    zwp_tablet_pad_strip_v2_send_frame(resource, time);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_pad_ring(mut pad:
                                                                *mut wlr_tablet_v2_tablet_pad,
                                                            mut ring:
                                                                uint32_t,
                                                            mut position:
                                                                libc::c_double,
                                                            mut finger: bool,
                                                            mut time:
                                                                uint32_t) {
    if (*pad).current_client.is_null() ||
           (*(*pad).current_client).rings.is_null() ||
           (*(*(*pad).current_client).rings.offset(ring as isize)).is_null() {
        return
    }
    let mut resource: *mut wl_resource =
        *(*(*pad).current_client).rings.offset(ring as isize);
    if finger {
        zwp_tablet_pad_ring_v2_send_source(resource,
                                           ZWP_TABLET_PAD_RING_V2_SOURCE_FINGER
                                               as libc::c_int as uint32_t);
    }
    if position < 0i32 as libc::c_double {
        zwp_tablet_pad_ring_v2_send_stop(resource);
    } else {
        zwp_tablet_pad_ring_v2_send_angle(resource, position as wl_fixed_t);
    }
    zwp_tablet_pad_ring_v2_send_frame(resource, time);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_pad_leave(mut pad:
                                                                 *mut wlr_tablet_v2_tablet_pad,
                                                             mut surface:
                                                                 *mut wlr_surface)
 -> uint32_t {
    let mut client: *mut wl_client =
        wl_resource_get_client((*surface).resource);
    if (*pad).current_client.is_null() ||
           client != (*(*pad).current_client).client {
        return 0i32 as uint32_t
    }
    let mut serial: uint32_t =
        wlr_seat_client_next_serial((*(*(*pad).current_client).seat).seat_client);
    zwp_tablet_pad_v2_send_leave((*(*pad).current_client).resource, serial,
                                 (*surface).resource);
    return serial;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_pad_mode(mut pad:
                                                                *mut wlr_tablet_v2_tablet_pad,
                                                            mut group: size_t,
                                                            mut mode:
                                                                uint32_t,
                                                            mut time:
                                                                uint32_t)
 -> uint32_t {
    if (*pad).current_client.is_null() ||
           (*(*pad).current_client).groups.is_null() ||
           (*(*(*pad).current_client).groups.offset(group as isize)).is_null()
       {
        return 0i32 as uint32_t
    }
    if *(*pad).groups.offset(group as isize) == mode {
        return 0i32 as uint32_t
    }
    *(*pad).groups.offset(group as isize) = mode;
    let mut serial: uint32_t =
        wlr_seat_client_next_serial((*(*(*pad).current_client).seat).seat_client);
    zwp_tablet_pad_group_v2_send_mode_switch(*(*(*pad).current_client).groups.offset(group
                                                                                         as
                                                                                         isize),
                                             time, serial, mode);
    return serial;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_surface_accepts_tablet_v2(mut tablet:
                                                           *mut wlr_tablet_v2_tablet,
                                                       mut surface:
                                                           *mut wlr_surface)
 -> bool {
    let mut client: *mut wl_client =
        wl_resource_get_client((*surface).resource);
    if !(*tablet).current_client.is_null() &&
           (*(*tablet).current_client).client == client {
        return 1i32 != 0
    }
    let mut tablet_tmp: *mut wlr_tablet_client_v2 =
        0 as *mut wlr_tablet_client_v2;
    tablet_tmp =
        ((*tablet).clients.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_client_v2;
    while &mut (*tablet_tmp).tablet_link as *mut wl_list !=
              &mut (*tablet).clients as *mut wl_list {
        if (*tablet_tmp).client == client { return 1i32 != 0 }
        tablet_tmp =
            ((*tablet_tmp).tablet_link.next as *mut libc::c_char).offset(-16)
                as *mut wlr_tablet_client_v2
    }
    return 0i32 != 0;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_pad_notify_enter(mut pad:
                                                                   *mut wlr_tablet_v2_tablet_pad,
                                                               mut tablet:
                                                                   *mut wlr_tablet_v2_tablet,
                                                               mut surface:
                                                                   *mut wlr_surface)
 -> uint32_t {
    if !(*pad).grab.is_null() && (*(*(*pad).grab).interface).enter.is_some() {
        return (*(*(*pad).grab).interface).enter.expect("non-null function pointer")((*pad).grab,
                                                                                     tablet,
                                                                                     surface)
    }
    return 0i32 as uint32_t;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_pad_notify_button(mut pad:
                                                                    *mut wlr_tablet_v2_tablet_pad,
                                                                mut button:
                                                                    size_t,
                                                                mut time:
                                                                    uint32_t,
                                                                mut state:
                                                                    zwp_tablet_pad_v2_button_state) {
    if !(*pad).grab.is_null() && (*(*(*pad).grab).interface).button.is_some()
       {
        (*(*(*pad).grab).interface).button.expect("non-null function pointer")((*pad).grab,
                                                                               button,
                                                                               time,
                                                                               state);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_pad_notify_strip(mut pad:
                                                                   *mut wlr_tablet_v2_tablet_pad,
                                                               mut strip:
                                                                   uint32_t,
                                                               mut position:
                                                                   libc::c_double,
                                                               mut finger:
                                                                   bool,
                                                               mut time:
                                                                   uint32_t) {
    if !(*pad).grab.is_null() && (*(*(*pad).grab).interface).strip.is_some() {
        (*(*(*pad).grab).interface).strip.expect("non-null function pointer")((*pad).grab,
                                                                              strip,
                                                                              position,
                                                                              finger,
                                                                              time);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_pad_notify_ring(mut pad:
                                                                  *mut wlr_tablet_v2_tablet_pad,
                                                              mut ring:
                                                                  uint32_t,
                                                              mut position:
                                                                  libc::c_double,
                                                              mut finger:
                                                                  bool,
                                                              mut time:
                                                                  uint32_t) {
    if !(*pad).grab.is_null() && (*(*(*pad).grab).interface).ring.is_some() {
        (*(*(*pad).grab).interface).ring.expect("non-null function pointer")((*pad).grab,
                                                                             ring,
                                                                             position,
                                                                             finger,
                                                                             time);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_pad_notify_leave(mut pad:
                                                                   *mut wlr_tablet_v2_tablet_pad,
                                                               mut surface:
                                                                   *mut wlr_surface)
 -> uint32_t {
    if !(*pad).grab.is_null() && (*(*(*pad).grab).interface).leave.is_some() {
        return (*(*(*pad).grab).interface).leave.expect("non-null function pointer")((*pad).grab,
                                                                                     surface)
    }
    return 0i32 as uint32_t;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_pad_notify_mode(mut pad:
                                                                  *mut wlr_tablet_v2_tablet_pad,
                                                              mut group:
                                                                  size_t,
                                                              mut mode:
                                                                  uint32_t,
                                                              mut time:
                                                                  uint32_t)
 -> uint32_t {
    if !(*pad).grab.is_null() && (*(*(*pad).grab).interface).mode.is_some() {
        return (*(*(*pad).grab).interface).mode.expect("non-null function pointer")((*pad).grab,
                                                                                    group,
                                                                                    mode,
                                                                                    time)
    }
    return 0i32 as uint32_t;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_start_grab(mut pad:
                                                      *mut wlr_tablet_v2_tablet_pad,
                                                  mut grab:
                                                      *mut wlr_tablet_pad_v2_grab) {
    if grab != &mut (*pad).default_grab as *mut wlr_tablet_pad_v2_grab {
        let mut prev: *mut wlr_tablet_pad_v2_grab = (*pad).grab;
        (*grab).pad = pad;
        (*pad).grab = grab;
        if !prev.is_null() && (*(*prev).interface).cancel.is_some() {
            (*(*prev).interface).cancel.expect("non-null function pointer")(prev);
        }
    };
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* This can probably be even lower,the tools don't have a lot of buttons */
// wlr_tablet_manager_client_v2::link
// wlr_tablet_seat_v2::link
// wlr_tablet_seat_v2::tablets
// wlr_tablet_client_v2::tablet_link
// wlr_tablet_seat_v2::tablets
// wlr_tablet_tool_client_v2::tool_link
// struct wlr_tablet_v2_event_cursor
// wlr_tablet_seat_v2::pads
// wlr_tablet_pad_client_v2::pad_link
// struct wlr_tablet_v2_event_feedback
// struct wlr_tablet_v2_event_feedback
// struct wlr_tablet_v2_event_feedback
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_end_grab(mut pad:
                                                    *mut wlr_tablet_v2_tablet_pad) {
    let mut grab: *mut wlr_tablet_pad_v2_grab = (*pad).grab;
    if !grab.is_null() &&
           grab != &mut (*pad).default_grab as *mut wlr_tablet_pad_v2_grab {
        (*pad).grab = &mut (*pad).default_grab;
        if (*(*grab).interface).cancel.is_some() {
            (*(*grab).interface).cancel.expect("non-null function pointer")(grab);
        }
    };
}
unsafe extern "C" fn default_pad_enter(mut grab: *mut wlr_tablet_pad_v2_grab,
                                       mut tablet: *mut wlr_tablet_v2_tablet,
                                       mut surface: *mut wlr_surface)
 -> uint32_t {
    return wlr_send_tablet_v2_tablet_pad_enter((*grab).pad, tablet, surface);
}
unsafe extern "C" fn default_pad_button(mut grab: *mut wlr_tablet_pad_v2_grab,
                                        mut button: size_t,
                                        mut time: uint32_t,
                                        mut state:
                                            zwp_tablet_pad_v2_button_state) {
    wlr_send_tablet_v2_tablet_pad_button((*grab).pad, button, time, state);
}
unsafe extern "C" fn default_pad_strip(mut grab: *mut wlr_tablet_pad_v2_grab,
                                       mut strip: uint32_t,
                                       mut position: libc::c_double,
                                       mut finger: bool, mut time: uint32_t) {
    wlr_send_tablet_v2_tablet_pad_strip((*grab).pad, strip, position, finger,
                                        time);
}
unsafe extern "C" fn default_pad_ring(mut grab: *mut wlr_tablet_pad_v2_grab,
                                      mut ring: uint32_t,
                                      mut position: libc::c_double,
                                      mut finger: bool, mut time: uint32_t) {
    wlr_send_tablet_v2_tablet_pad_ring((*grab).pad, ring, position, finger,
                                       time);
}
unsafe extern "C" fn default_pad_leave(mut grab: *mut wlr_tablet_pad_v2_grab,
                                       mut surface: *mut wlr_surface)
 -> uint32_t {
    return wlr_send_tablet_v2_tablet_pad_leave((*grab).pad, surface);
}
unsafe extern "C" fn default_pad_mode(mut grab: *mut wlr_tablet_pad_v2_grab,
                                      mut group: size_t, mut mode: uint32_t,
                                      mut time: uint32_t) -> uint32_t {
    return wlr_send_tablet_v2_tablet_pad_mode((*grab).pad, group, mode, time);
}
unsafe extern "C" fn default_pad_cancel(mut grab:
                                            *mut wlr_tablet_pad_v2_grab) {
    // Do nothing, the default cancel can be ignored.
}
static mut default_pad_grab_interface: wlr_tablet_pad_v2_grab_interface =
    unsafe {
        {
            let mut init =
                wlr_tablet_pad_v2_grab_interface{enter:
                                                     Some(default_pad_enter as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wlr_tablet_pad_v2_grab,
                                                                                   _:
                                                                                       *mut wlr_tablet_v2_tablet,
                                                                                   _:
                                                                                       *mut wlr_surface)
                                                                  ->
                                                                      uint32_t),
                                                 button:
                                                     Some(default_pad_button
                                                              as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wlr_tablet_pad_v2_grab,
                                                                                   _:
                                                                                       size_t,
                                                                                   _:
                                                                                       uint32_t,
                                                                                   _:
                                                                                       zwp_tablet_pad_v2_button_state)
                                                                  -> ()),
                                                 strip:
                                                     Some(default_pad_strip as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wlr_tablet_pad_v2_grab,
                                                                                   _:
                                                                                       uint32_t,
                                                                                   _:
                                                                                       libc::c_double,
                                                                                   _:
                                                                                       bool,
                                                                                   _:
                                                                                       uint32_t)
                                                                  -> ()),
                                                 ring:
                                                     Some(default_pad_ring as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wlr_tablet_pad_v2_grab,
                                                                                   _:
                                                                                       uint32_t,
                                                                                   _:
                                                                                       libc::c_double,
                                                                                   _:
                                                                                       bool,
                                                                                   _:
                                                                                       uint32_t)
                                                                  -> ()),
                                                 leave:
                                                     Some(default_pad_leave as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wlr_tablet_pad_v2_grab,
                                                                                   _:
                                                                                       *mut wlr_surface)
                                                                  ->
                                                                      uint32_t),
                                                 mode:
                                                     Some(default_pad_mode as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wlr_tablet_pad_v2_grab,
                                                                                   _:
                                                                                       size_t,
                                                                                   _:
                                                                                       uint32_t,
                                                                                   _:
                                                                                       uint32_t)
                                                                  ->
                                                                      uint32_t),
                                                 cancel:
                                                     Some(default_pad_cancel
                                                              as
                                                              unsafe extern "C" fn(_:
                                                                                       *mut wlr_tablet_pad_v2_grab)
                                                                  -> ()),};
            init
        }
    };
