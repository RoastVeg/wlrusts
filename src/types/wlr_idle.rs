use libc;
extern "C" {
    pub type wl_event_loop;
    pub type wl_event_source;
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wl_event_loop_add_timer(loop_0: *mut wl_event_loop,
                               func: wl_event_loop_timer_func_t,
                               data: *mut libc::c_void)
     -> *mut wl_event_source;
    #[no_mangle]
    fn wl_event_source_timer_update(source: *mut wl_event_source,
                                    ms_delay: libc::c_int) -> libc::c_int;
    #[no_mangle]
    fn wl_event_source_remove(source: *mut wl_event_source) -> libc::c_int;
    #[no_mangle]
    fn wl_display_get_event_loop(display: *mut wl_display)
     -> *mut wl_event_loop;
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_resource_post_no_memory(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wlr_seat_client_from_resource(resource: *mut wl_resource)
     -> *mut wlr_seat_client;
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    /* *
 * @page page_iface_org_kde_kwin_idle org_kde_kwin_idle
 * @section page_iface_org_kde_kwin_idle_desc Description
 *
 * This interface allows to monitor user idle time on a given seat. The interface
 * allows to register timers which trigger after no user activity was registered
 * on the seat for a given interval. It notifies when user activity resumes.
 *
 * This is useful for applications wanting to perform actions when the user is not
 * interacting with the system, e.g. chat applications setting the user as away, power
 * management features to dim screen, etc..
 * @section page_iface_org_kde_kwin_idle_api API
 * See @ref iface_org_kde_kwin_idle.
 */
/* *
 * @defgroup iface_org_kde_kwin_idle The org_kde_kwin_idle interface
 *
 * This interface allows to monitor user idle time on a given seat. The interface
 * allows to register timers which trigger after no user activity was registered
 * on the seat for a given interval. It notifies when user activity resumes.
 *
 * This is useful for applications wanting to perform actions when the user is not
 * interacting with the system, e.g. chat applications setting the user as away, power
 * management features to dim screen, etc..
 */
    #[no_mangle]
    static org_kde_kwin_idle_interface: wl_interface;
    /* *
 * @page page_iface_org_kde_kwin_idle_timeout org_kde_kwin_idle_timeout
 * @section page_iface_org_kde_kwin_idle_timeout_api API
 * See @ref iface_org_kde_kwin_idle_timeout.
 */
/* *
 * @defgroup iface_org_kde_kwin_idle_timeout The org_kde_kwin_idle_timeout interface
 */
    #[no_mangle]
    static org_kde_kwin_idle_timeout_interface: wl_interface;
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
pub type wl_event_loop_timer_func_t
    =
    Option<unsafe extern "C" fn(_: *mut libc::c_void) -> libc::c_int>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_0,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_1,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_2,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_3,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_4,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_5,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_6,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_idle {
    pub global: *mut wl_global,
    pub idle_timers: wl_list,
    pub event_loop: *mut wl_event_loop,
    pub enabled: bool,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_7,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub activity_notify: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_idle_timeout {
    pub resource: *mut wl_resource,
    pub link: wl_list,
    pub seat: *mut wlr_seat,
    pub idle_source: *mut wl_event_source,
    pub idle_state: bool,
    pub enabled: bool,
    pub timeout: uint32_t,
    pub events: C2RustUnnamed_8,
    pub input_listener: wl_listener,
    pub seat_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub idle: wl_signal,
    pub resume: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
/* *
 * @ingroup iface_org_kde_kwin_idle
 * @struct org_kde_kwin_idle_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct org_kde_kwin_idle_interface {
    pub get_idle_timeout: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                      _: *mut wl_resource,
                                                      _: uint32_t,
                                                      _: *mut wl_resource,
                                                      _: uint32_t) -> ()>,
}
/* *
 * @ingroup iface_org_kde_kwin_idle
 */
/* *
 * @ingroup iface_org_kde_kwin_idle_timeout
 * @struct org_kde_kwin_idle_timeout_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct org_kde_kwin_idle_timeout_interface {
    pub release: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub simulate_user_activity: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                            _:
                                                                *mut wl_resource)
                                           -> ()>,
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
/* *
 * @ingroup iface_org_kde_kwin_idle_timeout
 */
/* *
 * @ingroup iface_org_kde_kwin_idle_timeout
 */
/* *
 * @ingroup iface_org_kde_kwin_idle_timeout
 */
/* *
 * @ingroup iface_org_kde_kwin_idle_timeout
 */
/* *
 * @ingroup iface_org_kde_kwin_idle_timeout
 * Sends an idle event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn org_kde_kwin_idle_timeout_send_idle(mut resource_:
                                                             *mut wl_resource) {
    wl_resource_post_event(resource_, 0i32 as uint32_t);
}
/* *
 * @ingroup iface_org_kde_kwin_idle_timeout
 * Sends an resumed event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn org_kde_kwin_idle_timeout_send_resumed(mut resource_:
                                                                *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t);
}
unsafe extern "C" fn idle_timeout_from_resource(mut resource:
                                                    *mut wl_resource)
 -> *mut wlr_idle_timeout {
    if wl_resource_instance_of(resource, &org_kde_kwin_idle_timeout_interface,
                               &idle_timeout_impl as
                                   *const org_kde_kwin_idle_timeout_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &org_kde_kwin_idle_timeout_interface, &idle_timeout_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_idle.c\x00" as *const u8 as
                          *const libc::c_char, 15i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 74],
                                                &[libc::c_char; 74]>(b"struct wlr_idle_timeout *idle_timeout_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as *mut wlr_idle_timeout;
}
unsafe extern "C" fn idle_notify(mut data: *mut libc::c_void) -> libc::c_int {
    let mut timer: *mut wlr_idle_timeout = data as *mut wlr_idle_timeout;
    if (*timer).idle_state { return 0i32 }
    (*timer).idle_state = 1i32 != 0;
    wlr_signal_emit_safe(&mut (*timer).events.idle,
                         timer as *mut libc::c_void);
    if !(*timer).resource.is_null() {
        org_kde_kwin_idle_timeout_send_idle((*timer).resource);
    }
    return 1i32;
}
unsafe extern "C" fn handle_activity(mut timer: *mut wlr_idle_timeout) {
    if !(*timer).enabled { return }
    // in case the previous state was sleeping send a resume event and switch state
    if (*timer).idle_state {
        (*timer).idle_state = 0i32 != 0;
        wlr_signal_emit_safe(&mut (*timer).events.resume,
                             timer as *mut libc::c_void);
        if !(*timer).resource.is_null() {
            org_kde_kwin_idle_timeout_send_resumed((*timer).resource);
        }
    }
    // rearm the timer
    wl_event_source_timer_update((*timer).idle_source,
                                 (*timer).timeout as libc::c_int);
    if (*timer).timeout == 0i32 as libc::c_uint {
        idle_notify(timer as *mut libc::c_void);
    };
}
unsafe extern "C" fn handle_timer_resource_destroy(mut timer_resource:
                                                       *mut wl_resource) {
    let mut timer: *mut wlr_idle_timeout =
        idle_timeout_from_resource(timer_resource);
    if !timer.is_null() { wlr_idle_timeout_destroy(timer); };
}
unsafe extern "C" fn handle_seat_destroy(mut listener: *mut wl_listener,
                                         mut data: *mut libc::c_void) {
    let mut timer: *mut wlr_idle_timeout =
        (listener as *mut libc::c_char).offset(-120) as *mut wlr_idle_timeout;
    if !timer.is_null() { wlr_idle_timeout_destroy(timer); };
}
unsafe extern "C" fn release_idle_timeout(mut client: *mut wl_client,
                                          mut resource: *mut wl_resource) {
    handle_timer_resource_destroy(resource);
}
unsafe extern "C" fn simulate_activity(mut client: *mut wl_client,
                                       mut resource: *mut wl_resource) {
    let mut timer: *mut wlr_idle_timeout =
        idle_timeout_from_resource(resource);
    handle_activity(timer);
}
static mut idle_timeout_impl: org_kde_kwin_idle_timeout_interface =
    unsafe {
        {
            let mut init =
                org_kde_kwin_idle_timeout_interface{release:
                                                        Some(release_idle_timeout
                                                                 as
                                                                 unsafe extern "C" fn(_:
                                                                                          *mut wl_client,
                                                                                      _:
                                                                                          *mut wl_resource)
                                                                     -> ()),
                                                    simulate_user_activity:
                                                        Some(simulate_activity
                                                                 as
                                                                 unsafe extern "C" fn(_:
                                                                                          *mut wl_client,
                                                                                      _:
                                                                                          *mut wl_resource)
                                                                     -> ()),};
            init
        }
    };
unsafe extern "C" fn idle_from_resource(mut resource: *mut wl_resource)
 -> *mut wlr_idle {
    if wl_resource_instance_of(resource, &org_kde_kwin_idle_interface,
                               &idle_impl as
                                   *const org_kde_kwin_idle_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &org_kde_kwin_idle_interface, &idle_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_idle.c\x00" as *const u8 as
                          *const libc::c_char, 90i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 58],
                                                &[libc::c_char; 58]>(b"struct wlr_idle *idle_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as *mut wlr_idle;
}
unsafe extern "C" fn handle_input_notification(mut listener: *mut wl_listener,
                                               mut data: *mut libc::c_void) {
    let mut timer: *mut wlr_idle_timeout =
        (listener as *mut libc::c_char).offset(-96) as *mut wlr_idle_timeout;
    let mut seat: *mut wlr_seat = data as *mut wlr_seat;
    if (*timer).seat == seat { handle_activity(timer); };
}
unsafe extern "C" fn create_timer(mut idle: *mut wlr_idle,
                                  mut seat: *mut wlr_seat,
                                  mut timeout: uint32_t,
                                  mut resource: *mut wl_resource)
 -> *mut wlr_idle_timeout {
    let mut timer: *mut wlr_idle_timeout =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_idle_timeout>() as libc::c_ulong) as
            *mut wlr_idle_timeout;
    if timer.is_null() { return 0 as *mut wlr_idle_timeout }
    (*timer).seat = seat;
    (*timer).timeout = timeout;
    (*timer).idle_state = 0i32 != 0;
    (*timer).enabled = (*idle).enabled;
    wl_list_insert(&mut (*idle).idle_timers, &mut (*timer).link);
    wl_signal_init(&mut (*timer).events.idle);
    wl_signal_init(&mut (*timer).events.resume);
    wl_signal_init(&mut (*timer).events.destroy);
    (*timer).seat_destroy.notify =
        Some(handle_seat_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*(*timer).seat).events.destroy,
                  &mut (*timer).seat_destroy);
    (*timer).input_listener.notify =
        Some(handle_input_notification as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*idle).events.activity_notify,
                  &mut (*timer).input_listener);
    // create the timer
    (*timer).idle_source =
        wl_event_loop_add_timer((*idle).event_loop,
                                Some(idle_notify as
                                         unsafe extern "C" fn(_:
                                                                  *mut libc::c_void)
                                             -> libc::c_int),
                                timer as *mut libc::c_void);
    if (*timer).idle_source.is_null() {
        wl_list_remove(&mut (*timer).link);
        wl_list_remove(&mut (*timer).input_listener.link);
        wl_list_remove(&mut (*timer).seat_destroy.link);
        free(timer as *mut libc::c_void);
        return 0 as *mut wlr_idle_timeout
    }
    if !resource.is_null() {
        (*timer).resource = resource;
        wl_resource_set_user_data(resource, timer as *mut libc::c_void);
    }
    if (*timer).enabled {
        // arm the timer
        wl_event_source_timer_update((*timer).idle_source,
                                     (*timer).timeout as libc::c_int);
        if (*timer).timeout == 0i32 as libc::c_uint {
            idle_notify(timer as *mut libc::c_void);
        }
    }
    return timer;
}
unsafe extern "C" fn create_idle_timer(mut client: *mut wl_client,
                                       mut idle_resource: *mut wl_resource,
                                       mut id: uint32_t,
                                       mut seat_resource: *mut wl_resource,
                                       mut timeout: uint32_t) {
    let mut idle: *mut wlr_idle = idle_from_resource(idle_resource);
    let mut client_seat: *mut wlr_seat_client =
        wlr_seat_client_from_resource(seat_resource);
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &org_kde_kwin_idle_timeout_interface,
                           wl_resource_get_version(idle_resource), id);
    if resource.is_null() {
        wl_resource_post_no_memory(idle_resource);
        return
    }
    wl_resource_set_implementation(resource,
                                   &idle_timeout_impl as
                                       *const org_kde_kwin_idle_timeout_interface
                                       as *const libc::c_void,
                                   0 as *mut libc::c_void,
                                   Some(handle_timer_resource_destroy as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    if create_timer(idle, (*client_seat).seat, timeout, resource).is_null() {
        wl_resource_post_no_memory(resource);
    };
}
static mut idle_impl: org_kde_kwin_idle_interface =
    unsafe {
        {
            let mut init =
                org_kde_kwin_idle_interface{get_idle_timeout:
                                                Some(create_idle_timer as
                                                         unsafe extern "C" fn(_:
                                                                                  *mut wl_client,
                                                                              _:
                                                                                  *mut wl_resource,
                                                                              _:
                                                                                  uint32_t,
                                                                              _:
                                                                                  *mut wl_resource,
                                                                              _:
                                                                                  uint32_t)
                                                             -> ()),};
            init
        }
    };
#[no_mangle]
pub unsafe extern "C" fn wlr_idle_set_enabled(mut idle: *mut wlr_idle,
                                              mut seat: *mut wlr_seat,
                                              mut enabled: bool) {
    if (*idle).enabled as libc::c_int == enabled as libc::c_int { return }
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] %s idle timers for %s\x00" as *const u8 as
                 *const libc::c_char,
             b"../types/wlr_idle.c\x00" as *const u8 as *const libc::c_char,
             186i32,
             if enabled as libc::c_int != 0 {
                 b"Enabling\x00" as *const u8 as *const libc::c_char
             } else { b"Disabling\x00" as *const u8 as *const libc::c_char },
             if !seat.is_null() {
                 (*seat).name as *const libc::c_char
             } else { b"all seats\x00" as *const u8 as *const libc::c_char });
    (*idle).enabled = enabled;
    let mut timer: *mut wlr_idle_timeout = 0 as *mut wlr_idle_timeout;
    timer =
        ((*idle).idle_timers.next as *mut libc::c_char).offset(-8) as
            *mut wlr_idle_timeout;
    while &mut (*timer).link as *mut wl_list !=
              &mut (*idle).idle_timers as *mut wl_list {
        if !(!seat.is_null() && (*timer).seat != seat) {
            let mut timeout: libc::c_int =
                if enabled as libc::c_int != 0 {
                    (*timer).timeout
                } else { 0i32 as libc::c_uint } as libc::c_int;
            wl_event_source_timer_update((*timer).idle_source, timeout);
            (*timer).enabled = enabled
        }
        timer =
            ((*timer).link.next as *mut libc::c_char).offset(-8) as
                *mut wlr_idle_timeout
    };
}
unsafe extern "C" fn idle_bind(mut wl_client: *mut wl_client,
                               mut data: *mut libc::c_void,
                               mut version: uint32_t, mut id: uint32_t) {
    let mut idle: *mut wlr_idle = data as *mut wlr_idle;
    if !wl_client.is_null() && !idle.is_null() {
    } else {
        __assert_fail(b"wl_client && idle\x00" as *const u8 as
                          *const libc::c_char,
                      b"../types/wlr_idle.c\x00" as *const u8 as
                          *const libc::c_char, 202i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 63],
                                                &[libc::c_char; 63]>(b"void idle_bind(struct wl_client *, void *, uint32_t, uint32_t)\x00")).as_ptr());
    };
    let mut wl_resource: *mut wl_resource =
        wl_resource_create(wl_client, &org_kde_kwin_idle_interface,
                           version as libc::c_int, id);
    if wl_resource.is_null() { wl_client_post_no_memory(wl_client); return }
    wl_resource_set_implementation(wl_resource,
                                   &idle_impl as
                                       *const org_kde_kwin_idle_interface as
                                       *const libc::c_void,
                                   idle as *mut libc::c_void, None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut idle: *mut wlr_idle =
        (listener as *mut libc::c_char).offset(-40) as *mut wlr_idle;
    wlr_signal_emit_safe(&mut (*idle).events.destroy,
                         idle as *mut libc::c_void);
    wl_list_remove(&mut (*idle).display_destroy.link);
    wl_global_destroy((*idle).global);
    free(idle as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_idle_create(mut display: *mut wl_display)
 -> *mut wlr_idle {
    let mut idle: *mut wlr_idle =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_idle>() as libc::c_ulong) as
            *mut wlr_idle;
    if idle.is_null() { return 0 as *mut wlr_idle }
    wl_list_init(&mut (*idle).idle_timers);
    wl_signal_init(&mut (*idle).events.activity_notify);
    wl_signal_init(&mut (*idle).events.destroy);
    (*idle).enabled = 1i32 != 0;
    (*idle).event_loop = wl_display_get_event_loop(display);
    if (*idle).event_loop.is_null() {
        free(idle as *mut libc::c_void);
        return 0 as *mut wlr_idle
    }
    (*idle).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*idle).display_destroy);
    (*idle).global =
        wl_global_create(display, &org_kde_kwin_idle_interface, 1i32,
                         idle as *mut libc::c_void,
                         Some(idle_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*idle).global.is_null() {
        wl_list_remove(&mut (*idle).display_destroy.link);
        free(idle as *mut libc::c_void);
        return 0 as *mut wlr_idle
    }
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] idle manager created\x00" as *const u8 as
                 *const libc::c_char,
             b"../types/wlr_idle.c\x00" as *const u8 as *const libc::c_char,
             247i32);
    return idle;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_idle_notify_activity(mut idle: *mut wlr_idle,
                                                  mut seat: *mut wlr_seat) {
    wlr_signal_emit_safe(&mut (*idle).events.activity_notify,
                         seat as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_idle_timeout_create(mut idle: *mut wlr_idle,
                                                 mut seat: *mut wlr_seat,
                                                 mut timeout: uint32_t)
 -> *mut wlr_idle_timeout {
    return create_timer(idle, seat, timeout, 0 as *mut wl_resource);
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * Idle protocol is used to create timers which will notify the client when the
 * compositor does not receive any input for a given time(in milliseconds). Also
 * the client will be notified when the timer receives an activity notify and already
 * was in idle state. Besides this, the client is able to simulate user activity
 * which will reset the timers and at any time can destroy the timer.
 */
// wlr_idle_timeout::link
// milliseconds
/* *
 * Send notification to restart all timers for the given seat. Called by
 * compositor when there is an user activity event on that seat.
 */
/* *
 * Enable or disable timers for a given idle resource by seat.
 * Passing a NULL seat means update timers for all seats.
 */
/* *
 * Create a new timer on the given seat. The idle event will be called after
 * the given amount of milliseconds of inactivity, and the resumed event will
 * be sent at the first user activty after the fired event.
 */
#[no_mangle]
pub unsafe extern "C" fn wlr_idle_timeout_destroy(mut timer:
                                                      *mut wlr_idle_timeout) {
    wlr_signal_emit_safe(&mut (*timer).events.destroy,
                         0 as *mut libc::c_void);
    wl_list_remove(&mut (*timer).input_listener.link);
    wl_list_remove(&mut (*timer).seat_destroy.link);
    wl_event_source_remove((*timer).idle_source);
    wl_list_remove(&mut (*timer).link);
    if !(*timer).resource.is_null() {
        wl_resource_set_user_data((*timer).resource, 0 as *mut libc::c_void);
    }
    free(timer as *mut libc::c_void);
}
