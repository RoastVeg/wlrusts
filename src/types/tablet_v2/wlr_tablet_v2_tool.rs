use libc;
extern "C" {
    pub type wl_event_loop;
    pub type wl_event_source;
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_impl;
    pub type wlr_keyboard_group;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    pub type wlr_pointer_impl;
    pub type wlr_tablet_pad_impl;
    pub type wlr_tablet_impl;
    pub type wlr_touch_impl;
    pub type wlr_switch_impl;
    /* Note: these are circular dependencies */
    pub type wlr_input_device_impl;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    pub type wlr_tablet_manager_client_v2;
    /* *
 * @page page_iface_zwp_tablet_tool_v2 zwp_tablet_tool_v2
 * @section page_iface_zwp_tablet_tool_v2_desc Description
 *
 * An object that represents a physical tool that has been, or is
 * currently in use with a tablet in this seat. Each wp_tablet_tool
 * object stays valid until the client destroys it; the compositor
 * reuses the wp_tablet_tool object to indicate that the object's
 * respective physical tool has come into proximity of a tablet again.
 *
 * A wp_tablet_tool object's relation to a physical tool depends on the
 * tablet's ability to report serial numbers. If the tablet supports
 * this capability, then the object represents a specific physical tool
 * and can be identified even when used on multiple tablets.
 *
 * A tablet tool has a number of static characteristics, e.g. tool type,
 * hardware_serial and capabilities. These capabilities are sent in an
 * event sequence after the wp_tablet_seat.tool_added event before any
 * actual events from this tool. This initial event sequence is
 * terminated by a wp_tablet_tool.done event.
 *
 * Tablet tool events are grouped by wp_tablet_tool.frame events.
 * Any events received before a wp_tablet_tool.frame event should be
 * considered part of the same hardware state change.
 * @section page_iface_zwp_tablet_tool_v2_api API
 * See @ref iface_zwp_tablet_tool_v2.
 */
/* *
 * @defgroup iface_zwp_tablet_tool_v2 The zwp_tablet_tool_v2 interface
 *
 * An object that represents a physical tool that has been, or is
 * currently in use with a tablet in this seat. Each wp_tablet_tool
 * object stays valid until the client destroys it; the compositor
 * reuses the wp_tablet_tool object to indicate that the object's
 * respective physical tool has come into proximity of a tablet again.
 *
 * A wp_tablet_tool object's relation to a physical tool depends on the
 * tablet's ability to report serial numbers. If the tablet supports
 * this capability, then the object represents a specific physical tool
 * and can be identified even when used on multiple tablets.
 *
 * A tablet tool has a number of static characteristics, e.g. tool type,
 * hardware_serial and capabilities. These capabilities are sent in an
 * event sequence after the wp_tablet_seat.tool_added event before any
 * actual events from this tool. This initial event sequence is
 * terminated by a wp_tablet_tool.done event.
 *
 * Tablet tool events are grouped by wp_tablet_tool.frame events.
 * Any events received before a wp_tablet_tool.frame event should be
 * considered part of the same hardware state change.
 */
    #[no_mangle]
    static zwp_tablet_tool_v2_interface: wl_interface;
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_event_source_remove(source: *mut wl_event_source) -> libc::c_int;
    #[no_mangle]
    fn wl_event_loop_add_idle(loop_0: *mut wl_event_loop,
                              func: wl_event_loop_idle_func_t,
                              data: *mut libc::c_void)
     -> *mut wl_event_source;
    #[no_mangle]
    fn wl_display_get_event_loop(display: *mut wl_display)
     -> *mut wl_event_loop;
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_client_get_display(client: *mut wl_client) -> *mut wl_display;
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_client(resource: *mut wl_resource) -> *mut wl_client;
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn push_zeroes_to_end(arr: *mut uint32_t, n: size_t) -> size_t;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> libc::c_int;
    #[no_mangle]
    fn get_or_create_tablet_seat(manager: *mut wlr_tablet_manager_v2,
                                 wlr_seat: *mut wlr_seat)
     -> *mut wlr_tablet_seat_v2;
    /* *
 * Set the lifetime role for this surface. Returns 0 on success or -1 if the
 * role cannot be set.
 */
    #[no_mangle]
    fn wlr_surface_set_role(surface: *mut wlr_surface,
                            role: *const wlr_surface_role,
                            role_data: *mut libc::c_void,
                            error_resource: *mut wl_resource,
                            error_code: uint32_t) -> bool;
    #[no_mangle]
    fn wlr_surface_from_resource(resource: *mut wl_resource)
     -> *mut wlr_surface;
    /* *
 * Return a new serial (from wl_display_serial_next()) for the client, and
 * update the seat client's set of valid serials. Use this for all input
 * events; otherwise wlr_seat_client_validate_event_serial() may fail when
 * handed a correctly functioning client's request serials.
 */
    #[no_mangle]
    fn wlr_seat_client_next_serial(client: *mut wlr_seat_client) -> uint32_t;
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
}
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __time_t = libc::c_long;
pub type __clockid_t = libc::c_int;
pub type __ssize_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type size_t = libc::c_ulong;
pub type ssize_t = __ssize_t;
pub type clockid_t = __clockid_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
pub type wl_fixed_t = int32_t;
#[derive ( Copy, Clone )]
#[repr ( C )]
pub union C2RustUnnamed {
    pub d: libc::c_double,
    pub i: int64_t,
}
pub type wl_event_loop_idle_func_t
    =
    Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 * a physical tool type
 *
 * Describes the physical type of a tool. The physical type of a tool
 * generally defines its base usage.
 *
 * The mouse tool represents a mouse-shaped tool that is not a relative
 * device but bound to the tablet's surface, providing absolute
 * coordinates.
 *
 * The lens tool is a mouse-shaped tool with an attached lens to
 * provide precision focus.
 */
pub type zwp_tablet_tool_v2_type = libc::c_uint;
/* *
	 * Lens
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_LENS: zwp_tablet_tool_v2_type = 327;
/* *
	 * Mouse
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_MOUSE: zwp_tablet_tool_v2_type = 326;
/* *
	 * Finger
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_FINGER: zwp_tablet_tool_v2_type = 325;
/* *
	 * Airbrush
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_AIRBRUSH: zwp_tablet_tool_v2_type = 324;
/* *
	 * Pencil
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_PENCIL: zwp_tablet_tool_v2_type = 323;
/* *
	 * Brush
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_BRUSH: zwp_tablet_tool_v2_type = 322;
/* *
	 * Eraser
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_ERASER: zwp_tablet_tool_v2_type = 321;
/* *
	 * Pen
	 */
pub const ZWP_TABLET_TOOL_V2_TYPE_PEN: zwp_tablet_tool_v2_type = 320;
/* ZWP_TABLET_TOOL_V2_TYPE_ENUM */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 * capability flags for a tool
 *
 * Describes extra capabilities on a tablet.
 *
 * Any tool must provide x and y values, extra axes are
 * device-specific.
 */
pub type zwp_tablet_tool_v2_capability = libc::c_uint;
/* *
	 * Wheel axis
	 */
pub const ZWP_TABLET_TOOL_V2_CAPABILITY_WHEEL: zwp_tablet_tool_v2_capability =
    6;
/* *
	 * Slider axis
	 */
pub const ZWP_TABLET_TOOL_V2_CAPABILITY_SLIDER: zwp_tablet_tool_v2_capability
          =
    5;
/* *
	 * Z-rotation axis
	 */
pub const ZWP_TABLET_TOOL_V2_CAPABILITY_ROTATION:
          zwp_tablet_tool_v2_capability =
    4;
/* *
	 * Distance axis
	 */
pub const ZWP_TABLET_TOOL_V2_CAPABILITY_DISTANCE:
          zwp_tablet_tool_v2_capability =
    3;
/* *
	 * Pressure axis
	 */
pub const ZWP_TABLET_TOOL_V2_CAPABILITY_PRESSURE:
          zwp_tablet_tool_v2_capability =
    2;
/* *
	 * Tilt axes
	 */
pub const ZWP_TABLET_TOOL_V2_CAPABILITY_TILT: zwp_tablet_tool_v2_capability =
    1;
/* ZWP_TABLET_TOOL_V2_BUTTON_STATE_ENUM */
pub type zwp_tablet_tool_v2_error = libc::c_uint;
/* *
	 * given wl_surface has another role
	 */
pub const ZWP_TABLET_TOOL_V2_ERROR_ROLE: zwp_tablet_tool_v2_error = 0;
/* ZWP_TABLET_TOOL_V2_ERROR_ENUM */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 * @struct zwp_tablet_tool_v2_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_tablet_tool_v2_interface {
    pub set_cursor: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                _: *mut wl_resource,
                                                _: uint32_t,
                                                _: *mut wl_resource,
                                                _: int32_t, _: int32_t)
                               -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
pub type zwp_tablet_pad_v2_button_state = libc::c_uint;
pub const ZWP_TABLET_PAD_V2_BUTTON_STATE_PRESSED:
          zwp_tablet_pad_v2_button_state =
    1;
pub const ZWP_TABLET_PAD_V2_BUTTON_STATE_RELEASED:
          zwp_tablet_pad_v2_button_state =
    0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type wlr_input_device_type = libc::c_uint;
pub const WLR_INPUT_DEVICE_SWITCH: wlr_input_device_type = 5;
pub const WLR_INPUT_DEVICE_TABLET_PAD: wlr_input_device_type = 4;
pub const WLR_INPUT_DEVICE_TABLET_TOOL: wlr_input_device_type = 3;
pub const WLR_INPUT_DEVICE_TOUCH: wlr_input_device_type = 2;
pub const WLR_INPUT_DEVICE_POINTER: wlr_input_device_type = 1;
pub const WLR_INPUT_DEVICE_KEYBOARD: wlr_input_device_type = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_1,
    pub events: C2RustUnnamed_0,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub rate: int32_t,
    pub delay: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer {
    pub impl_0: *const wlr_pointer_impl,
    pub events: C2RustUnnamed_2,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub motion: wl_signal,
    pub motion_absolute: wl_signal,
    pub button: wl_signal,
    pub axis: wl_signal,
    pub frame: wl_signal,
    pub swipe_begin: wl_signal,
    pub swipe_update: wl_signal,
    pub swipe_end: wl_signal,
    pub pinch_begin: wl_signal,
    pub pinch_update: wl_signal,
    pub pinch_end: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_input_device {
    pub impl_0: *const wlr_input_device_impl,
    pub type_0: wlr_input_device_type,
    pub vendor: libc::c_uint,
    pub product: libc::c_uint,
    pub name: *mut libc::c_char,
    pub width_mm: libc::c_double,
    pub height_mm: libc::c_double,
    pub output_name: *mut libc::c_char,
    pub c2rust_unnamed: C2RustUnnamed_4,
    pub events: C2RustUnnamed_3,
    pub data: *mut libc::c_void,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr ( C )]
pub union C2RustUnnamed_4 {
    pub _device: *mut libc::c_void,
    pub keyboard: *mut wlr_keyboard,
    pub pointer: *mut wlr_pointer,
    pub switch_device: *mut wlr_switch,
    pub touch: *mut wlr_touch,
    pub tablet: *mut wlr_tablet,
    pub tablet_pad: *mut wlr_tablet_pad,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/*
 * NOTE: the wlr tablet pad implementation does not currently support tablets
 * with more than one mode. I don't own any such hardware so I cannot test it
 * and it is too complicated to make a meaningful implementation of blindly.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_pad {
    pub impl_0: *mut wlr_tablet_pad_impl,
    pub events: C2RustUnnamed_5,
    pub button_count: size_t,
    pub ring_count: size_t,
    pub strip_count: size_t,
    pub groups: wl_list,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_list {
    pub capacity: size_t,
    pub length: size_t,
    pub items: *mut *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub button: wl_signal,
    pub ring: wl_signal,
    pub strip: wl_signal,
    pub attach_tablet: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/*
 * Copy+Paste from libinput, but this should neither use libinput, nor
 * tablet-unstable-v2 headers, so we can't include them
 */
/* * A generic pen */
/* * Eraser */
/* * A paintbrush-like tool */
/* * Physical drawing tool, e.g. Wacom Inking Pen */
/* * An airbrush-like tool */
/* * A mouse bound to the tablet */
/* * A mouse tool with a lens */
/* * A rotary device with positional and rotation data */
// Capabilities
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet {
    pub impl_0: *mut wlr_tablet_impl,
    pub events: C2RustUnnamed_6,
    pub name: *mut libc::c_char,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub axis: wl_signal,
    pub proximity: wl_signal,
    pub tip: wl_signal,
    pub button: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch {
    pub impl_0: *const wlr_touch_impl,
    pub events: C2RustUnnamed_7,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub down: wl_signal,
    pub up: wl_signal,
    pub motion: wl_signal,
    pub cancel: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_switch {
    pub impl_0: *mut wlr_switch_impl,
    pub events: C2RustUnnamed_8,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub toggle: wl_signal,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
pub type wlr_tablet_tool_type = libc::c_uint;
pub const WLR_TABLET_TOOL_TYPE_TOTEM: wlr_tablet_tool_type = 8;
pub const WLR_TABLET_TOOL_TYPE_LENS: wlr_tablet_tool_type = 7;
pub const WLR_TABLET_TOOL_TYPE_MOUSE: wlr_tablet_tool_type = 6;
pub const WLR_TABLET_TOOL_TYPE_AIRBRUSH: wlr_tablet_tool_type = 5;
pub const WLR_TABLET_TOOL_TYPE_PENCIL: wlr_tablet_tool_type = 4;
pub const WLR_TABLET_TOOL_TYPE_BRUSH: wlr_tablet_tool_type = 3;
pub const WLR_TABLET_TOOL_TYPE_ERASER: wlr_tablet_tool_type = 2;
pub const WLR_TABLET_TOOL_TYPE_PEN: wlr_tablet_tool_type = 1;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_tool {
    pub type_0: wlr_tablet_tool_type,
    pub hardware_serial: uint64_t,
    pub hardware_wacom: uint64_t,
    pub tilt: bool,
    pub pressure: bool,
    pub distance: bool,
    pub rotation: bool,
    pub slider: bool,
    pub wheel: bool,
    pub events: C2RustUnnamed_9,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_10,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_11,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_12,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_13,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_13 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_14,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_14 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_15,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_15 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_seat_client_v2 {
    pub seat_link: wl_list,
    pub client_link: wl_list,
    pub wl_client: *mut wl_client,
    pub resource: *mut wl_resource,
    pub client: *mut wlr_tablet_manager_client_v2,
    pub seat_client: *mut wlr_seat_client,
    pub seat_client_destroy: wl_listener,
    pub tools: wl_list,
    pub tablets: wl_list,
    pub pads: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_v2_tablet {
    pub link: wl_list,
    pub wlr_tablet: *mut wlr_tablet,
    pub wlr_device: *mut wlr_input_device,
    pub clients: wl_list,
    pub tool_destroy: wl_listener,
    pub current_client: *mut wlr_tablet_client_v2,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_client_v2 {
    pub seat_link: wl_list,
    pub tablet_link: wl_list,
    pub client: *mut wl_client,
    pub resource: *mut wl_resource,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_tool_v2_grab_interface {
    pub proximity_in: Option<unsafe extern "C" fn(_:
                                                      *mut wlr_tablet_tool_v2_grab,
                                                  _:
                                                      *mut wlr_tablet_v2_tablet,
                                                  _: *mut wlr_surface) -> ()>,
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab)
                         -> ()>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                            _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub pressure: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                              _: libc::c_double) -> ()>,
    pub distance: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                              _: libc::c_double) -> ()>,
    pub tilt: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                          _: libc::c_double,
                                          _: libc::c_double) -> ()>,
    pub rotation: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                              _: libc::c_double) -> ()>,
    pub slider: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                            _: libc::c_double) -> ()>,
    pub wheel: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                           _: libc::c_double, _: int32_t)
                          -> ()>,
    pub proximity_out: Option<unsafe extern "C" fn(_:
                                                       *mut wlr_tablet_tool_v2_grab)
                                  -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab,
                                            _: uint32_t,
                                            _: zwp_tablet_pad_v2_button_state)
                           -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_tablet_tool_v2_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_tool_v2_grab {
    pub interface: *const wlr_tablet_tool_v2_grab_interface,
    pub tool: *mut wlr_tablet_v2_tablet_tool,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_v2_tablet_tool {
    pub link: wl_list,
    pub wlr_tool: *mut wlr_tablet_tool,
    pub clients: wl_list,
    pub tool_destroy: wl_listener,
    pub current_client: *mut wlr_tablet_tool_client_v2,
    pub focused_surface: *mut wlr_surface,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_tablet_tool_v2_grab,
    pub default_grab: wlr_tablet_tool_v2_grab,
    pub proximity_serial: uint32_t,
    pub is_down: bool,
    pub down_serial: uint32_t,
    pub num_buttons: size_t,
    pub pressed_buttons: [uint32_t; 16],
    pub pressed_serials: [uint32_t; 16],
    pub events: C2RustUnnamed_16,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_16 {
    pub set_cursor: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_tool_client_v2 {
    pub seat_link: wl_list,
    pub tool_link: wl_list,
    pub client: *mut wl_client,
    pub resource: *mut wl_resource,
    pub tool: *mut wlr_tablet_v2_tablet_tool,
    pub seat: *mut wlr_tablet_seat_client_v2,
    pub frame_source: *mut wl_event_source,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_manager_v2 {
    pub wl_global: *mut wl_global,
    pub clients: wl_list,
    pub seats: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_17,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_17 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_v2_event_cursor {
    pub surface: *mut wlr_surface,
    pub serial: uint32_t,
    pub hotspot_x: int32_t,
    pub hotspot_y: int32_t,
    pub seat_client: *mut wlr_seat_client,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_tablet_seat_v2 {
    pub link: wl_list,
    pub wlr_seat: *mut wlr_seat,
    pub manager: *mut wlr_tablet_manager_v2,
    pub tablets: wl_list,
    pub tools: wl_list,
    pub pads: wl_list,
    pub clients: wl_list,
    pub seat_destroy: wl_listener,
}
/*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct implicit_grab_state {
    pub original: *mut wlr_surface,
    pub released: bool,
    pub focused: *mut wlr_surface,
    pub tablet: *mut wlr_tablet_v2_tablet,
}
/* *
 * @ingroup iface_zwp_tablet_seat_v2
 * Sends an tool_added event to the client owning the resource.
 * @param resource_ The client's resource
 * @param id the newly added tablet tool
 */
#[inline]
unsafe extern "C" fn zwp_tablet_seat_v2_send_tool_added(mut resource_:
                                                            *mut wl_resource,
                                                        mut id:
                                                            *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, id);
}
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 */
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 * Sends an type event to the client owning the resource.
 * @param resource_ The client's resource
 * @param tool_type the physical tool type
 */
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_type(mut resource_:
                                                      *mut wl_resource,
                                                  mut tool_type: uint32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, tool_type);
}
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 * Sends an hardware_serial event to the client owning the resource.
 * @param resource_ The client's resource
 * @param hardware_serial_hi the unique serial number of the tool, most significant bits
 * @param hardware_serial_lo the unique serial number of the tool, least significant bits
 */
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_hardware_serial(mut resource_:
                                                                 *mut wl_resource,
                                                             mut hardware_serial_hi:
                                                                 uint32_t,
                                                             mut hardware_serial_lo:
                                                                 uint32_t) {
    wl_resource_post_event(resource_, 1i32 as uint32_t, hardware_serial_hi,
                           hardware_serial_lo);
}
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 * Sends an hardware_id_wacom event to the client owning the resource.
 * @param resource_ The client's resource
 * @param hardware_id_hi the hardware id, most significant bits
 * @param hardware_id_lo the hardware id, least significant bits
 */
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_hardware_id_wacom(mut resource_:
                                                                   *mut wl_resource,
                                                               mut hardware_id_hi:
                                                                   uint32_t,
                                                               mut hardware_id_lo:
                                                                   uint32_t) {
    wl_resource_post_event(resource_, 2i32 as uint32_t, hardware_id_hi,
                           hardware_id_lo);
}
/* *
 * @ingroup iface_zwp_tablet_tool_v2
 * Sends an capability event to the client owning the resource.
 * @param resource_ The client's resource
 * @param capability the capability
 */
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_capability(mut resource_:
                                                            *mut wl_resource,
                                                        mut capability:
                                                            uint32_t) {
    wl_resource_post_event(resource_, 3i32 as uint32_t, capability);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_frame(mut resource_:
                                                       *mut wl_resource,
                                                   mut time: uint32_t) {
    wl_resource_post_event(resource_, 18i32 as uint32_t, time);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_button(mut resource_:
                                                        *mut wl_resource,
                                                    mut serial: uint32_t,
                                                    mut button: uint32_t,
                                                    mut state: uint32_t) {
    wl_resource_post_event(resource_, 17i32 as uint32_t, serial, button,
                           state);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_wheel(mut resource_:
                                                       *mut wl_resource,
                                                   mut degrees: wl_fixed_t,
                                                   mut clicks: int32_t) {
    wl_resource_post_event(resource_, 16i32 as uint32_t, degrees, clicks);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_slider(mut resource_:
                                                        *mut wl_resource,
                                                    mut position: int32_t) {
    wl_resource_post_event(resource_, 15i32 as uint32_t, position);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_rotation(mut resource_:
                                                          *mut wl_resource,
                                                      mut degrees:
                                                          wl_fixed_t) {
    wl_resource_post_event(resource_, 14i32 as uint32_t, degrees);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_tilt(mut resource_:
                                                      *mut wl_resource,
                                                  mut tilt_x: wl_fixed_t,
                                                  mut tilt_y: wl_fixed_t) {
    wl_resource_post_event(resource_, 13i32 as uint32_t, tilt_x, tilt_y);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_distance(mut resource_:
                                                          *mut wl_resource,
                                                      mut distance:
                                                          uint32_t) {
    wl_resource_post_event(resource_, 12i32 as uint32_t, distance);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_pressure(mut resource_:
                                                          *mut wl_resource,
                                                      mut pressure:
                                                          uint32_t) {
    wl_resource_post_event(resource_, 11i32 as uint32_t, pressure);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_motion(mut resource_:
                                                        *mut wl_resource,
                                                    mut x: wl_fixed_t,
                                                    mut y: wl_fixed_t) {
    wl_resource_post_event(resource_, 10i32 as uint32_t, x, y);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_up(mut resource_:
                                                    *mut wl_resource) {
    wl_resource_post_event(resource_, 9i32 as uint32_t);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_down(mut resource_:
                                                      *mut wl_resource,
                                                  mut serial: uint32_t) {
    wl_resource_post_event(resource_, 8i32 as uint32_t, serial);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_proximity_out(mut resource_:
                                                               *mut wl_resource) {
    wl_resource_post_event(resource_, 7i32 as uint32_t);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_proximity_in(mut resource_:
                                                              *mut wl_resource,
                                                          mut serial:
                                                              uint32_t,
                                                          mut tablet:
                                                              *mut wl_resource,
                                                          mut surface:
                                                              *mut wl_resource) {
    wl_resource_post_event(resource_, 6i32 as uint32_t, serial, tablet,
                           surface);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_removed(mut resource_:
                                                         *mut wl_resource) {
    wl_resource_post_event(resource_, 5i32 as uint32_t);
}
#[inline]
unsafe extern "C" fn zwp_tablet_tool_v2_send_done(mut resource_:
                                                      *mut wl_resource) {
    wl_resource_post_event(resource_, 4i32 as uint32_t);
}
#[inline]
unsafe extern "C" fn wl_fixed_from_double(mut d: libc::c_double)
 -> wl_fixed_t {
    let mut u: C2RustUnnamed = C2RustUnnamed{d: 0.,};
    u.d = d + (3i64 << 51i32 - 8i32) as libc::c_double;
    return u.i as wl_fixed_t;
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
#[inline]
unsafe extern "C" fn wl_signal_emit(mut signal: *mut wl_signal,
                                    mut data: *mut libc::c_void) {
    let mut l: *mut wl_listener = 0 as *mut wl_listener;
    let mut next: *mut wl_listener = 0 as *mut wl_listener;
    l =
        ((*signal).listener_list.next as *mut libc::c_char).offset(-0) as
            *mut wl_listener;
    next =
        ((*l).link.next as *mut libc::c_char).offset(-0) as *mut wl_listener;
    while &mut (*l).link as *mut wl_list !=
              &mut (*signal).listener_list as *mut wl_list {
        (*l).notify.expect("non-null function pointer")(l, data);
        l = next;
        next =
            ((*l).link.next as *mut libc::c_char).offset(-0) as
                *mut wl_listener
    };
}
static mut tablet_tool_cursor_surface_role: wlr_surface_role =
    {
        let mut init =
            wlr_surface_role{name:
                                 b"wp_tablet_tool-cursor\x00" as *const u8 as
                                     *const libc::c_char,
                             commit: None,
                             precommit: None,};
        init
    };
unsafe extern "C" fn handle_tablet_tool_v2_set_cursor(mut client:
                                                          *mut wl_client,
                                                      mut resource:
                                                          *mut wl_resource,
                                                      mut serial: uint32_t,
                                                      mut surface_resource:
                                                          *mut wl_resource,
                                                      mut hotspot_x: int32_t,
                                                      mut hotspot_y:
                                                          int32_t) {
    let mut tool: *mut wlr_tablet_tool_client_v2 =
        tablet_tool_client_from_resource(resource);
    if tool.is_null() || (*tool).tool.is_null() { return }
    let mut surface: *mut wlr_surface = 0 as *mut wlr_surface;
    if !surface_resource.is_null() {
        surface = wlr_surface_from_resource(surface_resource);
        if !wlr_surface_set_role(surface, &tablet_tool_cursor_surface_role,
                                 0 as *mut libc::c_void, surface_resource,
                                 ZWP_TABLET_TOOL_V2_ERROR_ROLE as libc::c_int
                                     as uint32_t) {
            return
        }
    }
    let mut evt: wlr_tablet_v2_event_cursor =
        {
            let mut init =
                wlr_tablet_v2_event_cursor{surface: surface,
                                           serial: serial,
                                           hotspot_x: hotspot_x,
                                           hotspot_y: hotspot_y,
                                           seat_client:
                                               (*(*tool).seat).seat_client,};
            init
        };
    wl_signal_emit(&mut (*(*tool).tool).events.set_cursor,
                   &mut evt as *mut wlr_tablet_v2_event_cursor as
                       *mut libc::c_void);
}
unsafe extern "C" fn handle_tablet_tool_v2_destroy(mut client: *mut wl_client,
                                                   mut resource:
                                                       *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut tablet_tool_impl: zwp_tablet_tool_v2_interface =
    unsafe {
        {
            let mut init =
                zwp_tablet_tool_v2_interface{set_cursor:
                                                 Some(handle_tablet_tool_v2_set_cursor
                                                          as
                                                          unsafe extern "C" fn(_:
                                                                                   *mut wl_client,
                                                                               _:
                                                                                   *mut wl_resource,
                                                                               _:
                                                                                   uint32_t,
                                                                               _:
                                                                                   *mut wl_resource,
                                                                               _:
                                                                                   int32_t,
                                                                               _:
                                                                                   int32_t)
                                                              -> ()),
                                             destroy:
                                                 Some(handle_tablet_tool_v2_destroy
                                                          as
                                                          unsafe extern "C" fn(_:
                                                                                   *mut wl_client,
                                                                               _:
                                                                                   *mut wl_resource)
                                                              -> ()),};
            init
        }
    };
unsafe extern "C" fn tablet_type_from_wlr_type(mut wlr_type:
                                                   wlr_tablet_tool_type)
 -> zwp_tablet_tool_v2_type {
    match wlr_type as libc::c_uint {
        1 => { return ZWP_TABLET_TOOL_V2_TYPE_PEN }
        2 => { return ZWP_TABLET_TOOL_V2_TYPE_ERASER }
        3 => { return ZWP_TABLET_TOOL_V2_TYPE_BRUSH }
        4 => { return ZWP_TABLET_TOOL_V2_TYPE_PENCIL }
        5 => { return ZWP_TABLET_TOOL_V2_TYPE_AIRBRUSH }
        6 => { return ZWP_TABLET_TOOL_V2_TYPE_MOUSE }
        7 => { return ZWP_TABLET_TOOL_V2_TYPE_LENS }
        _ => {
            /* We skip these devices earlier on */
            if 0i32 != 0 &&
                   !(b"Unreachable\x00" as *const u8 as
                         *const libc::c_char).is_null() {
            } else {
                __assert_fail(b"false && \"Unreachable\"\x00" as *const u8 as
                                  *const libc::c_char,
                              b"../types/tablet_v2/wlr_tablet_v2_tool.c\x00"
                                  as *const u8 as *const libc::c_char,
                              78i32 as libc::c_uint,
                              (*::std::mem::transmute::<&[u8; 82],
                                                        &[libc::c_char; 82]>(b"enum zwp_tablet_tool_v2_type tablet_type_from_wlr_type(enum wlr_tablet_tool_type)\x00")).as_ptr());
            };
        }
    }
    if 0i32 != 0 &&
           !(b"Unreachable\x00" as *const u8 as *const libc::c_char).is_null()
       {
    } else {
        __assert_fail(b"false && \"Unreachable\"\x00" as *const u8 as
                          *const libc::c_char,
                      b"../types/tablet_v2/wlr_tablet_v2_tool.c\x00" as
                          *const u8 as *const libc::c_char,
                      81i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 82],
                                                &[libc::c_char; 82]>(b"enum zwp_tablet_tool_v2_type tablet_type_from_wlr_type(enum wlr_tablet_tool_type)\x00")).as_ptr());
    };
    panic!("Reached end of non-void function without returning");
}
#[no_mangle]
pub unsafe extern "C" fn destroy_tablet_tool_v2(mut resource:
                                                    *mut wl_resource) {
    let mut client: *mut wlr_tablet_tool_client_v2 =
        tablet_tool_client_from_resource(resource);
    if client.is_null() { return }
    if !(*client).frame_source.is_null() {
        wl_event_source_remove((*client).frame_source);
    }
    if !(*client).tool.is_null() && (*(*client).tool).current_client == client
       {
        (*(*client).tool).current_client = 0 as *mut wlr_tablet_tool_client_v2
    }
    wl_list_remove(&mut (*client).seat_link);
    wl_list_remove(&mut (*client).tool_link);
    free(client as *mut libc::c_void);
    wl_resource_set_user_data(resource, 0 as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn add_tablet_tool_client(mut seat:
                                                    *mut wlr_tablet_seat_client_v2,
                                                mut tool:
                                                    *mut wlr_tablet_v2_tablet_tool) {
    let mut client: *mut wlr_tablet_tool_client_v2 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_tablet_tool_client_v2>() as
                   libc::c_ulong) as *mut wlr_tablet_tool_client_v2;
    if client.is_null() { return }
    (*client).tool = tool;
    (*client).seat = seat;
    (*client).resource =
        wl_resource_create((*seat).wl_client, &zwp_tablet_tool_v2_interface,
                           1i32, 0i32 as uint32_t);
    if (*client).resource.is_null() {
        free(client as *mut libc::c_void);
        return
    }
    wl_resource_set_implementation((*client).resource,
                                   &mut tablet_tool_impl as
                                       *mut zwp_tablet_tool_v2_interface as
                                       *const libc::c_void,
                                   client as *mut libc::c_void,
                                   Some(destroy_tablet_tool_v2 as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    zwp_tablet_seat_v2_send_tool_added((*seat).resource, (*client).resource);
    // Send the expected events
    if (*(*tool).wlr_tool).hardware_serial != 0 {
        zwp_tablet_tool_v2_send_hardware_serial((*client).resource,
                                                ((*(*tool).wlr_tool).hardware_serial
                                                     >> 32i32) as uint32_t,
                                                ((*(*tool).wlr_tool).hardware_serial
                                                     &
                                                     0xffffffffu32 as
                                                         libc::c_ulong) as
                                                    uint32_t);
    }
    if (*(*tool).wlr_tool).hardware_wacom != 0 {
        zwp_tablet_tool_v2_send_hardware_id_wacom((*client).resource,
                                                  ((*(*tool).wlr_tool).hardware_wacom
                                                       >> 32i32) as uint32_t,
                                                  ((*(*tool).wlr_tool).hardware_wacom
                                                       &
                                                       0xffffffffu32 as
                                                           libc::c_ulong) as
                                                      uint32_t);
    }
    zwp_tablet_tool_v2_send_type((*client).resource,
                                 tablet_type_from_wlr_type((*(*tool).wlr_tool).type_0)
                                     as uint32_t);
    if (*(*tool).wlr_tool).tilt {
        zwp_tablet_tool_v2_send_capability((*client).resource,
                                           ZWP_TABLET_TOOL_V2_CAPABILITY_TILT
                                               as libc::c_int as uint32_t);
    }
    if (*(*tool).wlr_tool).pressure {
        zwp_tablet_tool_v2_send_capability((*client).resource,
                                           ZWP_TABLET_TOOL_V2_CAPABILITY_PRESSURE
                                               as libc::c_int as uint32_t);
    }
    if (*(*tool).wlr_tool).distance {
        zwp_tablet_tool_v2_send_capability((*client).resource,
                                           ZWP_TABLET_TOOL_V2_CAPABILITY_DISTANCE
                                               as libc::c_int as uint32_t);
    }
    if (*(*tool).wlr_tool).rotation {
        zwp_tablet_tool_v2_send_capability((*client).resource,
                                           ZWP_TABLET_TOOL_V2_CAPABILITY_ROTATION
                                               as libc::c_int as uint32_t);
    }
    if (*(*tool).wlr_tool).slider {
        zwp_tablet_tool_v2_send_capability((*client).resource,
                                           ZWP_TABLET_TOOL_V2_CAPABILITY_SLIDER
                                               as libc::c_int as uint32_t);
    }
    if (*(*tool).wlr_tool).wheel {
        zwp_tablet_tool_v2_send_capability((*client).resource,
                                           ZWP_TABLET_TOOL_V2_CAPABILITY_WHEEL
                                               as libc::c_int as uint32_t);
    }
    zwp_tablet_tool_v2_send_done((*client).resource);
    (*client).client = (*seat).wl_client;
    wl_list_insert(&mut (*seat).tools, &mut (*client).seat_link);
    wl_list_insert(&mut (*tool).clients, &mut (*client).tool_link);
}
unsafe extern "C" fn handle_wlr_tablet_tool_destroy(mut listener:
                                                        *mut wl_listener,
                                                    mut data:
                                                        *mut libc::c_void) {
    let mut tool: *mut wlr_tablet_v2_tablet_tool =
        (listener as *mut libc::c_char).offset(-40) as
            *mut wlr_tablet_v2_tablet_tool;
    let mut pos: *mut wlr_tablet_tool_client_v2 =
        0 as *mut wlr_tablet_tool_client_v2;
    let mut tmp: *mut wlr_tablet_tool_client_v2 =
        0 as *mut wlr_tablet_tool_client_v2;
    pos =
        ((*tool).clients.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_tool_client_v2;
    tmp =
        ((*pos).tool_link.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_tool_client_v2;
    while &mut (*pos).tool_link as *mut wl_list !=
              &mut (*tool).clients as *mut wl_list {
        zwp_tablet_tool_v2_send_removed((*pos).resource);
        (*pos).tool = 0 as *mut wlr_tablet_v2_tablet_tool;
        pos = tmp;
        tmp =
            ((*pos).tool_link.next as *mut libc::c_char).offset(-16) as
                *mut wlr_tablet_tool_client_v2
    }
    wl_list_remove(&mut (*tool).clients);
    wl_list_remove(&mut (*tool).link);
    wl_list_remove(&mut (*tool).tool_destroy.link);
    wl_list_remove(&mut (*tool).events.set_cursor.listener_list);
    free(tool as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_tool_create(mut manager:
                                                    *mut wlr_tablet_manager_v2,
                                                mut wlr_seat: *mut wlr_seat,
                                                mut wlr_tool:
                                                    *mut wlr_tablet_tool)
 -> *mut wlr_tablet_v2_tablet_tool {
    match (*wlr_tool).type_0 as libc::c_uint {
        1 | 2 | 3 | 4 | 5 | 6 | 7 => { }
        _ => {
            /* Unsupported */
            return 0 as *mut wlr_tablet_v2_tablet_tool
        }
    }
    let mut seat: *mut wlr_tablet_seat_v2 =
        get_or_create_tablet_seat(manager, wlr_seat);
    if seat.is_null() { return 0 as *mut wlr_tablet_v2_tablet_tool }
    let mut tool: *mut wlr_tablet_v2_tablet_tool =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_tablet_v2_tablet_tool>() as
                   libc::c_ulong) as *mut wlr_tablet_v2_tablet_tool;
    if tool.is_null() { return 0 as *mut wlr_tablet_v2_tablet_tool }
    (*tool).wlr_tool = wlr_tool;
    wl_list_init(&mut (*tool).clients);
    (*tool).default_grab.tool = tool;
    (*tool).default_grab.interface = &default_tool_grab_interface;
    (*tool).grab = &mut (*tool).default_grab;
    (*tool).tool_destroy.notify =
        Some(handle_wlr_tablet_tool_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_signal_add(&mut (*wlr_tool).events.destroy, &mut (*tool).tool_destroy);
    wl_list_insert(&mut (*seat).tools, &mut (*tool).link);
    // We need to create a tablet client for all clients on the seat
    let mut pos: *mut wlr_tablet_seat_client_v2 =
        0 as *mut wlr_tablet_seat_client_v2;
    pos =
        ((*seat).clients.next as *mut libc::c_char).offset(-0) as
            *mut wlr_tablet_seat_client_v2;
    while &mut (*pos).seat_link as *mut wl_list !=
              &mut (*seat).clients as *mut wl_list {
        // Tell the clients about the new tool
        add_tablet_tool_client(pos, tool);
        pos =
            ((*pos).seat_link.next as *mut libc::c_char).offset(-0) as
                *mut wlr_tablet_seat_client_v2
    }
    wl_signal_init(&mut (*tool).events.set_cursor);
    return tool;
}
// wlr_tablet_manager_v2::seats
// wlr_tablet_v2_tablet::link
// wlr_tablet_seat_v2_client::link
//wlr_tablet_tool_client_v2::link
//wlr_tablet_client_v2::link
//wlr_tablet_pad_client_v2::link
// wlr_tablet_seat_client_v2::tablet
// wlr_tablet_v2_tablet::clients
#[no_mangle]
pub unsafe extern "C" fn tablet_tool_client_from_resource(mut resource:
                                                              *mut wl_resource)
 -> *mut wlr_tablet_tool_client_v2 {
    if wl_resource_instance_of(resource, &zwp_tablet_tool_v2_interface,
                               &mut tablet_tool_impl as
                                   *mut zwp_tablet_tool_v2_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_tablet_tool_v2_interface, &tablet_tool_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/tablet_v2/wlr_tablet_v2_tool.c\x00" as
                          *const u8 as *const libc::c_char,
                      252i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 89],
                                                &[libc::c_char; 89]>(b"struct wlr_tablet_tool_client_v2 *tablet_tool_client_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_tablet_tool_client_v2;
}
/* Actual protocol foo */
// Button 0 is KEY_RESERVED in input-event-codes on linux (and freebsd)
unsafe extern "C" fn tablet_tool_button_update(mut tool:
                                                   *mut wlr_tablet_v2_tablet_tool,
                                               mut button: uint32_t,
                                               mut state:
                                                   zwp_tablet_pad_v2_button_state)
 -> ssize_t {
    let mut found: bool = 0i32 != 0;
    let mut i: size_t = 0i32 as size_t;
    while i < (*tool).num_buttons {
        if (*tool).pressed_buttons[i as usize] == button {
            found = 1i32 != 0;
            _wlr_log(WLR_DEBUG,
                     b"[%s:%d] Found the button \\o/: %u\x00" as *const u8 as
                         *const libc::c_char,
                     b"../types/tablet_v2/wlr_tablet_v2_tool.c\x00" as
                         *const u8 as *const libc::c_char, 267i32, button);
            break ;
        } else { i = i.wrapping_add(1) }
    }
    if state as libc::c_uint ==
           ZWP_TABLET_PAD_V2_BUTTON_STATE_PRESSED as libc::c_int as
               libc::c_uint && found as libc::c_int != 0 {
        /* Already have the button saved, durr */
        return -1i32 as ssize_t
    }
    if state as libc::c_uint ==
           ZWP_TABLET_PAD_V2_BUTTON_STATE_PRESSED as libc::c_int as
               libc::c_uint && !found {
        if (*tool).num_buttons < 16i32 as libc::c_ulong {
            let fresh0 = (*tool).num_buttons;
            (*tool).num_buttons = (*tool).num_buttons.wrapping_add(1);
            i = fresh0;
            (*tool).pressed_buttons[i as usize] = button;
            (*tool).pressed_serials[i as usize] = -1i32 as uint32_t
        } else {
            i = -1i32 as size_t;
            _wlr_log(WLR_ERROR,
                     b"[%s:%d] You pressed more than %d tablet tool buttons. This is currently not supported by wlroots. Please report this with a description of your tablet, since this is either a bug, or fancy hardware\x00"
                         as *const u8 as *const libc::c_char,
                     b"../types/tablet_v2/wlr_tablet_v2_tool.c\x00" as
                         *const u8 as *const libc::c_char, 288i32, 16i32);
        }
    }
    if state as libc::c_uint ==
           ZWP_TABLET_PAD_V2_BUTTON_STATE_RELEASED as libc::c_int as
               libc::c_uint && found as libc::c_int != 0 {
        _wlr_log(WLR_DEBUG,
                 b"[%s:%d] Removed the button \\o/: %u\x00" as *const u8 as
                     *const libc::c_char,
                 b"../types/tablet_v2/wlr_tablet_v2_tool.c\x00" as *const u8
                     as *const libc::c_char, 292i32, button);
        (*tool).pressed_buttons[i as usize] = 0i32 as uint32_t;
        (*tool).pressed_serials[i as usize] = 0i32 as uint32_t;
        (*tool).num_buttons =
            push_zeroes_to_end((*tool).pressed_buttons.as_mut_ptr(),
                               16i32 as size_t);
        (*tool).num_buttons =
            push_zeroes_to_end((*tool).pressed_serials.as_mut_ptr(),
                               16i32 as size_t)
    }
    if (*tool).num_buttons <= 16i32 as libc::c_ulong {
    } else {
        __assert_fail(b"tool->num_buttons <= WLR_TABLET_V2_TOOL_BUTTONS_CAP\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/tablet_v2/wlr_tablet_v2_tool.c\x00" as
                          *const u8 as *const libc::c_char,
                      299i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 117],
                                                &[libc::c_char; 117]>(b"ssize_t tablet_tool_button_update(struct wlr_tablet_v2_tablet_tool *, uint32_t, enum zwp_tablet_pad_v2_button_state)\x00")).as_ptr());
    };
    return i as ssize_t;
}
#[inline]
unsafe extern "C" fn timespec_to_msec(mut a: *const timespec) -> int64_t {
    return (*a).tv_sec * 1000i32 as libc::c_long +
               (*a).tv_nsec / 1000000i32 as libc::c_long;
}
unsafe extern "C" fn send_tool_frame(mut data: *mut libc::c_void) {
    let mut tool: *mut wlr_tablet_tool_client_v2 =
        data as *mut wlr_tablet_tool_client_v2;
    let mut now: timespec = timespec{tv_sec: 0, tv_nsec: 0,};
    clock_gettime(1i32, &mut now);
    zwp_tablet_tool_v2_send_frame((*tool).resource,
                                  timespec_to_msec(&mut now) as uint32_t);
    (*tool).frame_source = 0 as *mut wl_event_source;
}
unsafe extern "C" fn queue_tool_frame(mut tool:
                                          *mut wlr_tablet_tool_client_v2) {
    let mut display: *mut wl_display = wl_client_get_display((*tool).client);
    let mut loop_0: *mut wl_event_loop = wl_display_get_event_loop(display);
    if (*tool).frame_source.is_null() {
        (*tool).frame_source =
            wl_event_loop_add_idle(loop_0,
                                   Some(send_tool_frame as
                                            unsafe extern "C" fn(_:
                                                                     *mut libc::c_void)
                                                -> ()),
                                   tool as *mut libc::c_void)
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_proximity_in(mut tool:
                                                                         *mut wlr_tablet_v2_tablet_tool,
                                                                     mut tablet:
                                                                         *mut wlr_tablet_v2_tablet,
                                                                     mut surface:
                                                                         *mut wlr_surface) {
    let mut client: *mut wl_client =
        wl_resource_get_client((*surface).resource);
    if (*tool).focused_surface == surface { return }
    wlr_send_tablet_v2_tablet_tool_proximity_out(tool);
    let mut tablet_tmp: *mut wlr_tablet_client_v2 =
        0 as *mut wlr_tablet_client_v2;
    let mut tablet_client: *mut wlr_tablet_client_v2 =
        0 as *mut wlr_tablet_client_v2;
    tablet_tmp =
        ((*tablet).clients.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_client_v2;
    while &mut (*tablet_tmp).tablet_link as *mut wl_list !=
              &mut (*tablet).clients as *mut wl_list {
        if (*tablet_tmp).client == client {
            tablet_client = tablet_tmp;
            break ;
        } else {
            tablet_tmp =
                ((*tablet_tmp).tablet_link.next as
                     *mut libc::c_char).offset(-16) as
                    *mut wlr_tablet_client_v2
        }
    }
    // Couldn't find the client binding for the surface's client. Either
	// the client didn't bind tablet_v2 at all, or not for the relevant
	// seat
    if tablet_client.is_null() { return }
    let mut tool_tmp: *mut wlr_tablet_tool_client_v2 =
        0 as *mut wlr_tablet_tool_client_v2;
    let mut tool_client: *mut wlr_tablet_tool_client_v2 =
        0 as *mut wlr_tablet_tool_client_v2;
    tool_tmp =
        ((*tool).clients.next as *mut libc::c_char).offset(-16) as
            *mut wlr_tablet_tool_client_v2;
    while &mut (*tool_tmp).tool_link as *mut wl_list !=
              &mut (*tool).clients as *mut wl_list {
        if (*tool_tmp).client == client {
            tool_client = tool_tmp;
            break ;
        } else {
            tool_tmp =
                ((*tool_tmp).tool_link.next as *mut libc::c_char).offset(-16)
                    as *mut wlr_tablet_tool_client_v2
        }
    }
    // Couldn't find the client binding for the surface's client. Either
	// the client didn't bind tablet_v2 at all, or not for the relevant
	// seat
    if tool_client.is_null() { return }
    (*tool).current_client = tool_client;
    let mut serial: uint32_t =
        wlr_seat_client_next_serial((*(*tool_client).seat).seat_client);
    (*tool).focused_surface = surface;
    (*tool).proximity_serial = serial;
    zwp_tablet_tool_v2_send_proximity_in((*tool_client).resource, serial,
                                         (*tablet_client).resource,
                                         (*surface).resource);
    /* Send all the pressed buttons */
    let mut i: size_t = 0i32 as size_t;
    while i < (*tool).num_buttons {
        wlr_send_tablet_v2_tablet_tool_button(tool,
                                              (*tool).pressed_buttons[i as
                                                                          usize],
                                              ZWP_TABLET_PAD_V2_BUTTON_STATE_PRESSED);
        i = i.wrapping_add(1)
    }
    if (*tool).is_down { wlr_send_tablet_v2_tablet_tool_down(tool); }
    queue_tool_frame(tool_client);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_motion(mut tool:
                                                                   *mut wlr_tablet_v2_tablet_tool,
                                                               mut x:
                                                                   libc::c_double,
                                                               mut y:
                                                                   libc::c_double) {
    if (*tool).current_client.is_null() { return }
    zwp_tablet_tool_v2_send_motion((*(*tool).current_client).resource,
                                   wl_fixed_from_double(x),
                                   wl_fixed_from_double(y));
    queue_tool_frame((*tool).current_client);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_proximity_out(mut tool:
                                                                          *mut wlr_tablet_v2_tablet_tool) {
    if !(*tool).current_client.is_null() {
        let mut i: size_t = 0i32 as size_t;
        while i < (*tool).num_buttons {
            zwp_tablet_tool_v2_send_button((*(*tool).current_client).resource,
                                           (*tool).pressed_serials[i as
                                                                       usize],
                                           (*tool).pressed_buttons[i as
                                                                       usize],
                                           ZWP_TABLET_PAD_V2_BUTTON_STATE_RELEASED
                                               as libc::c_int as uint32_t);
            i = i.wrapping_add(1)
        }
        if (*tool).is_down {
            zwp_tablet_tool_v2_send_up((*(*tool).current_client).resource);
        }
        if !(*(*tool).current_client).frame_source.is_null() {
            wl_event_source_remove((*(*tool).current_client).frame_source);
            send_tool_frame((*tool).current_client as *mut libc::c_void);
        }
        zwp_tablet_tool_v2_send_proximity_out((*(*tool).current_client).resource);
        (*tool).current_client = 0 as *mut wlr_tablet_tool_client_v2;
        (*tool).focused_surface = 0 as *mut wlr_surface
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_pressure(mut tool:
                                                                     *mut wlr_tablet_v2_tablet_tool,
                                                                 mut pressure:
                                                                     libc::c_double) {
    if !(*tool).current_client.is_null() {
        zwp_tablet_tool_v2_send_pressure((*(*tool).current_client).resource,
                                         (pressure *
                                              65535i32 as libc::c_double) as
                                             uint32_t);
        queue_tool_frame((*tool).current_client);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_distance(mut tool:
                                                                     *mut wlr_tablet_v2_tablet_tool,
                                                                 mut distance:
                                                                     libc::c_double) {
    if !(*tool).current_client.is_null() {
        zwp_tablet_tool_v2_send_distance((*(*tool).current_client).resource,
                                         (distance *
                                              65535i32 as libc::c_double) as
                                             uint32_t);
        queue_tool_frame((*tool).current_client);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_tilt(mut tool:
                                                                 *mut wlr_tablet_v2_tablet_tool,
                                                             mut x:
                                                                 libc::c_double,
                                                             mut y:
                                                                 libc::c_double) {
    if (*tool).current_client.is_null() { return }
    zwp_tablet_tool_v2_send_tilt((*(*tool).current_client).resource,
                                 wl_fixed_from_double(x),
                                 wl_fixed_from_double(y));
    queue_tool_frame((*tool).current_client);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_rotation(mut tool:
                                                                     *mut wlr_tablet_v2_tablet_tool,
                                                                 mut degrees:
                                                                     libc::c_double) {
    if (*tool).current_client.is_null() { return }
    zwp_tablet_tool_v2_send_rotation((*(*tool).current_client).resource,
                                     wl_fixed_from_double(degrees));
    queue_tool_frame((*tool).current_client);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_slider(mut tool:
                                                                   *mut wlr_tablet_v2_tablet_tool,
                                                               mut position:
                                                                   libc::c_double) {
    if (*tool).current_client.is_null() { return }
    zwp_tablet_tool_v2_send_slider((*(*tool).current_client).resource,
                                   (position * 65535i32 as libc::c_double) as
                                       int32_t);
    queue_tool_frame((*tool).current_client);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_button(mut tool:
                                                                   *mut wlr_tablet_v2_tablet_tool,
                                                               mut button:
                                                                   uint32_t,
                                                               mut state:
                                                                   zwp_tablet_pad_v2_button_state) {
    let mut index: ssize_t = tablet_tool_button_update(tool, button, state);
    if !(*tool).current_client.is_null() {
        let mut serial: uint32_t =
            wlr_seat_client_next_serial((*(*(*tool).current_client).seat).seat_client);
        if index >= 0i32 as libc::c_long {
            (*tool).pressed_serials[index as usize] = serial
        }
        zwp_tablet_tool_v2_send_button((*(*tool).current_client).resource,
                                       serial, button, state as uint32_t);
        queue_tool_frame((*tool).current_client);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_wheel(mut tool:
                                                                  *mut wlr_tablet_v2_tablet_tool,
                                                              mut degrees:
                                                                  libc::c_double,
                                                              mut clicks:
                                                                  int32_t) {
    if !(*tool).current_client.is_null() {
        zwp_tablet_tool_v2_send_wheel((*(*tool).current_client).resource,
                                      clicks, degrees as int32_t);
        queue_tool_frame((*tool).current_client);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_down(mut tool:
                                                                 *mut wlr_tablet_v2_tablet_tool) {
    if (*tool).is_down { return }
    (*tool).is_down = 1i32 != 0;
    if !(*tool).current_client.is_null() {
        let mut serial: uint32_t =
            wlr_seat_client_next_serial((*(*(*tool).current_client).seat).seat_client);
        zwp_tablet_tool_v2_send_down((*(*tool).current_client).resource,
                                     serial);
        queue_tool_frame((*tool).current_client);
        (*tool).down_serial = serial
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_send_tablet_v2_tablet_tool_up(mut tool:
                                                               *mut wlr_tablet_v2_tablet_tool) {
    if !(*tool).is_down { return }
    (*tool).is_down = 0i32 != 0;
    (*tool).down_serial = 0i32 as uint32_t;
    if !(*tool).current_client.is_null() {
        zwp_tablet_tool_v2_send_up((*(*tool).current_client).resource);
        queue_tool_frame((*tool).current_client);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_proximity_in(mut tool:
                                                                           *mut wlr_tablet_v2_tablet_tool,
                                                                       mut tablet:
                                                                           *mut wlr_tablet_v2_tablet,
                                                                       mut surface:
                                                                           *mut wlr_surface) {
    if (*(*(*tool).grab).interface).proximity_in.is_some() {
        (*(*(*tool).grab).interface).proximity_in.expect("non-null function pointer")((*tool).grab,
                                                                                      tablet,
                                                                                      surface);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_down(mut tool:
                                                                   *mut wlr_tablet_v2_tablet_tool) {
    if (*(*(*tool).grab).interface).down.is_some() {
        (*(*(*tool).grab).interface).down.expect("non-null function pointer")((*tool).grab);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_up(mut tool:
                                                                 *mut wlr_tablet_v2_tablet_tool) {
    if (*(*(*tool).grab).interface).up.is_some() {
        (*(*(*tool).grab).interface).up.expect("non-null function pointer")((*tool).grab);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_motion(mut tool:
                                                                     *mut wlr_tablet_v2_tablet_tool,
                                                                 mut x:
                                                                     libc::c_double,
                                                                 mut y:
                                                                     libc::c_double) {
    if (*(*(*tool).grab).interface).motion.is_some() {
        (*(*(*tool).grab).interface).motion.expect("non-null function pointer")((*tool).grab,
                                                                                x,
                                                                                y);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_pressure(mut tool:
                                                                       *mut wlr_tablet_v2_tablet_tool,
                                                                   mut pressure:
                                                                       libc::c_double) {
    if (*(*(*tool).grab).interface).pressure.is_some() {
        (*(*(*tool).grab).interface).pressure.expect("non-null function pointer")((*tool).grab,
                                                                                  pressure);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_distance(mut tool:
                                                                       *mut wlr_tablet_v2_tablet_tool,
                                                                   mut distance:
                                                                       libc::c_double) {
    if (*(*(*tool).grab).interface).distance.is_some() {
        (*(*(*tool).grab).interface).distance.expect("non-null function pointer")((*tool).grab,
                                                                                  distance);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_tilt(mut tool:
                                                                   *mut wlr_tablet_v2_tablet_tool,
                                                               mut x:
                                                                   libc::c_double,
                                                               mut y:
                                                                   libc::c_double) {
    if (*(*(*tool).grab).interface).tilt.is_some() {
        (*(*(*tool).grab).interface).tilt.expect("non-null function pointer")((*tool).grab,
                                                                              x,
                                                                              y);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_rotation(mut tool:
                                                                       *mut wlr_tablet_v2_tablet_tool,
                                                                   mut degrees:
                                                                       libc::c_double) {
    if (*(*(*tool).grab).interface).rotation.is_some() {
        (*(*(*tool).grab).interface).rotation.expect("non-null function pointer")((*tool).grab,
                                                                                  degrees);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_slider(mut tool:
                                                                     *mut wlr_tablet_v2_tablet_tool,
                                                                 mut position:
                                                                     libc::c_double) {
    if (*(*(*tool).grab).interface).slider.is_some() {
        (*(*(*tool).grab).interface).slider.expect("non-null function pointer")((*tool).grab,
                                                                                position);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_wheel(mut tool:
                                                                    *mut wlr_tablet_v2_tablet_tool,
                                                                mut degrees:
                                                                    libc::c_double,
                                                                mut clicks:
                                                                    int32_t) {
    if (*(*(*tool).grab).interface).wheel.is_some() {
        (*(*(*tool).grab).interface).wheel.expect("non-null function pointer")((*tool).grab,
                                                                               degrees,
                                                                               clicks);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_proximity_out(mut tool:
                                                                            *mut wlr_tablet_v2_tablet_tool) {
    if (*(*(*tool).grab).interface).proximity_out.is_some() {
        (*(*(*tool).grab).interface).proximity_out.expect("non-null function pointer")((*tool).grab);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_v2_tablet_tool_notify_button(mut tool:
                                                                     *mut wlr_tablet_v2_tablet_tool,
                                                                 mut button:
                                                                     uint32_t,
                                                                 mut state:
                                                                     zwp_tablet_pad_v2_button_state) {
    if (*(*(*tool).grab).interface).button.is_some() {
        (*(*(*tool).grab).interface).button.expect("non-null function pointer")((*tool).grab,
                                                                                button,
                                                                                state);
    };
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_tool_v2_start_grab(mut tool:
                                                           *mut wlr_tablet_v2_tablet_tool,
                                                       mut grab:
                                                           *mut wlr_tablet_tool_v2_grab) {
    wlr_tablet_tool_v2_end_grab(tool);
    (*tool).grab = grab;
}
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_tool_v2_end_grab(mut tool:
                                                         *mut wlr_tablet_v2_tablet_tool) {
    if (*(*(*tool).grab).interface).cancel.is_some() {
        (*(*(*tool).grab).interface).cancel.expect("non-null function pointer")((*tool).grab);
    }
    (*tool).grab = &mut (*tool).default_grab;
}
unsafe extern "C" fn default_tool_proximity_in(mut grab:
                                                   *mut wlr_tablet_tool_v2_grab,
                                               mut tablet:
                                                   *mut wlr_tablet_v2_tablet,
                                               mut surface:
                                                   *mut wlr_surface) {
    wlr_send_tablet_v2_tablet_tool_proximity_in((*grab).tool, tablet,
                                                surface);
}
unsafe extern "C" fn default_tool_down(mut grab:
                                           *mut wlr_tablet_tool_v2_grab) {
    wlr_send_tablet_v2_tablet_tool_down((*grab).tool);
}
unsafe extern "C" fn default_tool_up(mut grab: *mut wlr_tablet_tool_v2_grab) {
    wlr_send_tablet_v2_tablet_tool_up((*grab).tool);
}
unsafe extern "C" fn default_tool_motion(mut grab:
                                             *mut wlr_tablet_tool_v2_grab,
                                         mut x: libc::c_double,
                                         mut y: libc::c_double) {
    wlr_send_tablet_v2_tablet_tool_motion((*grab).tool, x, y);
}
unsafe extern "C" fn default_tool_pressure(mut grab:
                                               *mut wlr_tablet_tool_v2_grab,
                                           mut pressure: libc::c_double) {
    wlr_send_tablet_v2_tablet_tool_pressure((*grab).tool, pressure);
}
unsafe extern "C" fn default_tool_distance(mut grab:
                                               *mut wlr_tablet_tool_v2_grab,
                                           mut distance: libc::c_double) {
    wlr_send_tablet_v2_tablet_tool_distance((*grab).tool, distance);
}
unsafe extern "C" fn default_tool_tilt(mut grab: *mut wlr_tablet_tool_v2_grab,
                                       mut x: libc::c_double,
                                       mut y: libc::c_double) {
    wlr_send_tablet_v2_tablet_tool_tilt((*grab).tool, x, y);
}
unsafe extern "C" fn default_tool_rotation(mut grab:
                                               *mut wlr_tablet_tool_v2_grab,
                                           mut degrees: libc::c_double) {
    wlr_send_tablet_v2_tablet_tool_rotation((*grab).tool, degrees);
}
unsafe extern "C" fn default_tool_slider(mut grab:
                                             *mut wlr_tablet_tool_v2_grab,
                                         mut position: libc::c_double) {
    wlr_send_tablet_v2_tablet_tool_slider((*grab).tool, position);
}
unsafe extern "C" fn default_tool_wheel(mut grab:
                                            *mut wlr_tablet_tool_v2_grab,
                                        mut degrees: libc::c_double,
                                        mut clicks: int32_t) {
    wlr_send_tablet_v2_tablet_tool_wheel((*grab).tool, degrees, clicks);
}
unsafe extern "C" fn default_tool_proximity_out(mut grab:
                                                    *mut wlr_tablet_tool_v2_grab) {
    wlr_send_tablet_v2_tablet_tool_proximity_out((*grab).tool);
}
unsafe extern "C" fn default_tool_button(mut grab:
                                             *mut wlr_tablet_tool_v2_grab,
                                         mut button: uint32_t,
                                         mut state:
                                             zwp_tablet_pad_v2_button_state) {
    wlr_send_tablet_v2_tablet_tool_button((*grab).tool, button, state);
}
unsafe extern "C" fn default_tool_cancel(mut grab:
                                             *mut wlr_tablet_tool_v2_grab) {
    /* Do nothing. Default grab can't be canceled */
}
static mut default_tool_grab_interface: wlr_tablet_tool_v2_grab_interface =
    unsafe {
        {
            let mut init =
                wlr_tablet_tool_v2_grab_interface{proximity_in:
                                                      Some(default_tool_proximity_in
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        *mut wlr_tablet_v2_tablet,
                                                                                    _:
                                                                                        *mut wlr_surface)
                                                                   -> ()),
                                                  down:
                                                      Some(default_tool_down
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),
                                                  up:
                                                      Some(default_tool_up as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),
                                                  motion:
                                                      Some(default_tool_motion
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  pressure:
                                                      Some(default_tool_pressure
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  distance:
                                                      Some(default_tool_distance
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  tilt:
                                                      Some(default_tool_tilt
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  rotation:
                                                      Some(default_tool_rotation
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  slider:
                                                      Some(default_tool_slider
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  wheel:
                                                      Some(default_tool_wheel
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double,
                                                                                    _:
                                                                                        int32_t)
                                                                   -> ()),
                                                  proximity_out:
                                                      Some(default_tool_proximity_out
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),
                                                  button:
                                                      Some(default_tool_button
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        zwp_tablet_pad_v2_button_state)
                                                                   -> ()),
                                                  cancel:
                                                      Some(default_tool_cancel
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),};
            init
        }
    };
unsafe extern "C" fn check_and_release_implicit_grab(mut grab:
                                                         *mut wlr_tablet_tool_v2_grab) {
    let mut state: *mut implicit_grab_state =
        (*grab).data as *mut implicit_grab_state;
    /* Still button or tip pressed. We should hold the grab */
    if (*(*grab).tool).is_down as libc::c_int != 0 ||
           (*(*grab).tool).num_buttons > 0i32 as libc::c_ulong ||
           (*state).released as libc::c_int != 0 {
        return
    }
    (*state).released = 1i32 != 0;
    /* We should still focus the same surface. Do nothing */
    if (*state).original == (*state).focused {
        wlr_tablet_tool_v2_end_grab((*grab).tool);
        return
    }
    wlr_send_tablet_v2_tablet_tool_proximity_out((*grab).tool);
    if !(*state).focused.is_null() {
        wlr_send_tablet_v2_tablet_tool_proximity_in((*grab).tool,
                                                    (*state).tablet,
                                                    (*state).focused);
    }
    wlr_tablet_tool_v2_end_grab((*grab).tool);
}
unsafe extern "C" fn implicit_tool_proximity_in(mut grab:
                                                    *mut wlr_tablet_tool_v2_grab,
                                                mut tablet:
                                                    *mut wlr_tablet_v2_tablet,
                                                mut surface:
                                                    *mut wlr_surface) {
    /* As long as we got an implicit grab, proximity won't change
	 * But should track the currently focused surface to change to it when
	 * the grab is released.
	 */
    let mut state: *mut implicit_grab_state =
        (*grab).data as *mut implicit_grab_state;
    (*state).focused = surface;
    (*state).tablet = tablet;
}
unsafe extern "C" fn implicit_tool_proximity_out(mut grab:
                                                     *mut wlr_tablet_tool_v2_grab) {
    let mut state: *mut implicit_grab_state =
        (*grab).data as *mut implicit_grab_state;
    (*state).focused = 0 as *mut wlr_surface;
}
unsafe extern "C" fn implicit_tool_down(mut grab:
                                            *mut wlr_tablet_tool_v2_grab) {
    wlr_send_tablet_v2_tablet_tool_down((*grab).tool);
}
unsafe extern "C" fn implicit_tool_up(mut grab:
                                          *mut wlr_tablet_tool_v2_grab) {
    wlr_send_tablet_v2_tablet_tool_up((*grab).tool);
    check_and_release_implicit_grab(grab);
}
/* Only send the motion event, when we are over the surface for now */
unsafe extern "C" fn implicit_tool_motion(mut grab:
                                              *mut wlr_tablet_tool_v2_grab,
                                          mut x: libc::c_double,
                                          mut y: libc::c_double) {
    let mut state: *mut implicit_grab_state =
        (*grab).data as *mut implicit_grab_state;
    if (*state).focused != (*state).original { return }
    wlr_send_tablet_v2_tablet_tool_motion((*grab).tool, x, y);
}
unsafe extern "C" fn implicit_tool_button(mut grab:
                                              *mut wlr_tablet_tool_v2_grab,
                                          mut button: uint32_t,
                                          mut state:
                                              zwp_tablet_pad_v2_button_state) {
    wlr_send_tablet_v2_tablet_tool_button((*grab).tool, button, state);
    check_and_release_implicit_grab(grab);
}
unsafe extern "C" fn implicit_tool_cancel(mut grab:
                                              *mut wlr_tablet_tool_v2_grab) {
    check_and_release_implicit_grab(grab);
    free((*grab).data);
    free(grab as *mut libc::c_void);
}
static mut implicit_tool_grab_interface: wlr_tablet_tool_v2_grab_interface =
    unsafe {
        {
            let mut init =
                wlr_tablet_tool_v2_grab_interface{proximity_in:
                                                      Some(implicit_tool_proximity_in
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        *mut wlr_tablet_v2_tablet,
                                                                                    _:
                                                                                        *mut wlr_surface)
                                                                   -> ()),
                                                  down:
                                                      Some(implicit_tool_down
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),
                                                  up:
                                                      Some(implicit_tool_up as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),
                                                  motion:
                                                      Some(implicit_tool_motion
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  pressure:
                                                      Some(default_tool_pressure
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  distance:
                                                      Some(default_tool_distance
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  tilt:
                                                      Some(default_tool_tilt
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  rotation:
                                                      Some(default_tool_rotation
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  slider:
                                                      Some(default_tool_slider
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double)
                                                                   -> ()),
                                                  wheel:
                                                      Some(default_tool_wheel
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        libc::c_double,
                                                                                    _:
                                                                                        int32_t)
                                                                   -> ()),
                                                  proximity_out:
                                                      Some(implicit_tool_proximity_out
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),
                                                  button:
                                                      Some(implicit_tool_button
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        zwp_tablet_pad_v2_button_state)
                                                                   -> ()),
                                                  cancel:
                                                      Some(implicit_tool_cancel
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wlr_tablet_tool_v2_grab)
                                                                   -> ()),};
            init
        }
    };
unsafe extern "C" fn tool_has_implicit_grab(mut tool:
                                                *mut wlr_tablet_v2_tablet_tool)
 -> bool {
    return (*(*tool).grab).interface ==
               &implicit_tool_grab_interface as
                   *const wlr_tablet_tool_v2_grab_interface;
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* This can probably be even lower,the tools don't have a lot of buttons */
// wlr_tablet_manager_client_v2::link
// wlr_tablet_seat_v2::link
// wlr_tablet_seat_v2::tablets
// wlr_tablet_client_v2::tablet_link
// wlr_tablet_seat_v2::tablets
// wlr_tablet_tool_client_v2::tool_link
// struct wlr_tablet_v2_event_cursor
// wlr_tablet_seat_v2::pads
// wlr_tablet_pad_client_v2::pad_link
// struct wlr_tablet_v2_event_feedback
// struct wlr_tablet_v2_event_feedback
// struct wlr_tablet_v2_event_feedback
#[no_mangle]
pub unsafe extern "C" fn wlr_tablet_tool_v2_start_implicit_grab(mut tool:
                                                                    *mut wlr_tablet_v2_tablet_tool) {
    if tool_has_implicit_grab(tool) as libc::c_int != 0 ||
           (*tool).focused_surface.is_null() {
        return
    }
    /* No current implicit grab */
    if !((*tool).is_down as libc::c_int != 0 ||
             (*tool).num_buttons > 0i32 as libc::c_ulong) {
        return
    }
    let mut grab: *mut wlr_tablet_tool_v2_grab =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_tablet_tool_v2_grab>() as
                   libc::c_ulong) as *mut wlr_tablet_tool_v2_grab;
    if grab.is_null() { return }
    (*grab).interface = &implicit_tool_grab_interface;
    (*grab).tool = tool;
    let mut state: *mut implicit_grab_state =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<implicit_grab_state>() as libc::c_ulong)
            as *mut implicit_grab_state;
    if state.is_null() { free(grab as *mut libc::c_void); return }
    (*state).original = (*tool).focused_surface;
    (*grab).data = state as *mut libc::c_void;
    wlr_tablet_tool_v2_start_grab(tool, grab);
}
