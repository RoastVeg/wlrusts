use libc;
extern "C" {
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type xkb_context;
    pub type xkb_keymap;
    pub type xkb_state;
    pub type wlr_keyboard_group;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    pub type wlr_pointer_impl;
    pub type wlr_tablet_pad_impl;
    pub type wlr_tablet_impl;
    pub type wlr_touch_impl;
    pub type wlr_switch_impl;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type wlr_data_source;
    pub type wlr_drag;
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn mmap(__addr: *mut libc::c_void, __len: size_t, __prot: libc::c_int,
            __flags: libc::c_int, __fd: libc::c_int, __offset: __off64_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn munmap(__addr: *mut libc::c_void, __len: size_t) -> libc::c_int;
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_error(resource: *mut wl_resource, code: uint32_t,
                              msg: *const libc::c_char, _: ...);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn xkb_context_new(flags: xkb_context_flags) -> *mut xkb_context;
    #[no_mangle]
    fn xkb_context_unref(context: *mut xkb_context);
    #[no_mangle]
    fn xkb_keymap_new_from_string(context: *mut xkb_context,
                                  string: *const libc::c_char,
                                  format: xkb_keymap_format,
                                  flags: xkb_keymap_compile_flags)
     -> *mut xkb_keymap;
    #[no_mangle]
    fn xkb_keymap_unref(keymap: *mut xkb_keymap);
    #[no_mangle]
    fn wlr_keyboard_set_keymap(kb: *mut wlr_keyboard,
                               keymap: *mut xkb_keymap);
    #[no_mangle]
    fn wlr_seat_client_from_resource(resource: *mut wl_resource)
     -> *mut wlr_seat_client;
    #[no_mangle]
    fn wlr_input_device_init(wlr_device: *mut wlr_input_device,
                             type_0: wlr_input_device_type,
                             impl_0: *const wlr_input_device_impl,
                             name: *const libc::c_char, vendor: libc::c_int,
                             product: libc::c_int);
    #[no_mangle]
    fn wlr_input_device_destroy(dev: *mut wlr_input_device);
    #[no_mangle]
    fn wlr_keyboard_notify_modifiers(keyboard: *mut wlr_keyboard,
                                     mods_depressed: uint32_t,
                                     mods_latched: uint32_t,
                                     mods_locked: uint32_t, group: uint32_t);
    #[no_mangle]
    fn wlr_keyboard_init(keyboard: *mut wlr_keyboard,
                         impl_0: *const wlr_keyboard_impl);
    #[no_mangle]
    fn wlr_keyboard_notify_key(keyboard: *mut wlr_keyboard,
                               event: *mut wlr_event_keyboard_key);
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
    /* *
 * @page page_iface_zwp_virtual_keyboard_v1 zwp_virtual_keyboard_v1
 * @section page_iface_zwp_virtual_keyboard_v1_desc Description
 *
 * The virtual keyboard provides an application with requests which emulate
 * the behaviour of a physical keyboard.
 *
 * This interface can be used by clients on its own to provide raw input
 * events, or it can accompany the input method protocol.
 * @section page_iface_zwp_virtual_keyboard_v1_api API
 * See @ref iface_zwp_virtual_keyboard_v1.
 */
/* *
 * @defgroup iface_zwp_virtual_keyboard_v1 The zwp_virtual_keyboard_v1 interface
 *
 * The virtual keyboard provides an application with requests which emulate
 * the behaviour of a physical keyboard.
 *
 * This interface can be used by clients on its own to provide raw input
 * events, or it can accompany the input method protocol.
 */
    #[no_mangle]
    static zwp_virtual_keyboard_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_virtual_keyboard_manager_v1 zwp_virtual_keyboard_manager_v1
 * @section page_iface_zwp_virtual_keyboard_manager_v1_desc Description
 *
 * A virtual keyboard manager allows an application to provide keyboard
 * input events as if they came from a physical keyboard.
 * @section page_iface_zwp_virtual_keyboard_manager_v1_api API
 * See @ref iface_zwp_virtual_keyboard_manager_v1.
 */
/* *
 * @defgroup iface_zwp_virtual_keyboard_manager_v1 The zwp_virtual_keyboard_manager_v1 interface
 *
 * A virtual keyboard manager allows an application to provide keyboard
 * input events as if they came from a physical keyboard.
 */
    #[no_mangle]
    static zwp_virtual_keyboard_manager_v1_interface: wl_interface;
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __off64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;

#[repr(C)]#[derive(Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
pub type wlr_input_device_type = libc::c_uint;
pub const WLR_INPUT_DEVICE_SWITCH: wlr_input_device_type = 5;
pub const WLR_INPUT_DEVICE_TABLET_PAD: wlr_input_device_type = 4;
pub const WLR_INPUT_DEVICE_TABLET_TOOL: wlr_input_device_type = 3;
pub const WLR_INPUT_DEVICE_TOUCH: wlr_input_device_type = 2;
pub const WLR_INPUT_DEVICE_POINTER: wlr_input_device_type = 1;
pub const WLR_INPUT_DEVICE_KEYBOARD: wlr_input_device_type = 0;
pub type xkb_mod_index_t = uint32_t;
pub type xkb_mod_mask_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
pub type xkb_context_flags = libc::c_uint;
pub const XKB_CONTEXT_NO_ENVIRONMENT_NAMES: xkb_context_flags = 2;
pub const XKB_CONTEXT_NO_DEFAULT_INCLUDES: xkb_context_flags = 1;
pub const XKB_CONTEXT_NO_FLAGS: xkb_context_flags = 0;
pub type xkb_keymap_compile_flags = libc::c_uint;
pub const XKB_KEYMAP_COMPILE_NO_FLAGS: xkb_keymap_compile_flags = 0;
pub type xkb_keymap_format = libc::c_uint;
pub const XKB_KEYMAP_FORMAT_TEXT_V1: xkb_keymap_format = 1;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard_impl {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_keyboard) -> ()>,
    pub led_update: Option<unsafe extern "C" fn(_: *mut wlr_keyboard,
                                                _: uint32_t) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut crate::src::types::wlr_keyboard_group::wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_0,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_0 {
    pub rate: int32_t,
    pub delay: int32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
pub type wlr_key_state = libc::c_uint;
pub const WLR_KEY_PRESSED: wlr_key_state = 1;
pub const WLR_KEY_RELEASED: wlr_key_state = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_event_keyboard_key {
    pub time_msec: uint32_t,
    pub keycode: uint32_t,
    pub update_state: bool,
    pub state: wlr_key_state,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_pointer {
    pub impl_0: *const crate::src::backend::headless::input_device::wlr_pointer_impl,
    pub events: C2RustUnnamed_1,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_1 {
    pub motion: wl_signal,
    pub motion_absolute: wl_signal,
    pub button: wl_signal,
    pub axis: wl_signal,
    pub frame: wl_signal,
    pub swipe_begin: wl_signal,
    pub swipe_update: wl_signal,
    pub swipe_end: wl_signal,
    pub pinch_begin: wl_signal,
    pub pinch_update: wl_signal,
    pub pinch_end: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_input_device {
    pub impl_0: *const wlr_input_device_impl,
    pub type_0: wlr_input_device_type,
    pub vendor: libc::c_uint,
    pub product: libc::c_uint,
    pub name: *mut libc::c_char,
    pub width_mm: libc::c_double,
    pub height_mm: libc::c_double,
    pub output_name: *mut libc::c_char,
    pub c2rust_unnamed: C2RustUnnamed_3,
    pub events: C2RustUnnamed_2,
    pub data: *mut libc::c_void,
    pub link: wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_2 {
    pub destroy: wl_signal,
}

#[repr ( C )]#[derive(Copy, Clone)]
pub union C2RustUnnamed_3 {
    pub _device: *mut libc::c_void,
    pub keyboard: *mut wlr_keyboard,
    pub pointer: *mut wlr_pointer,
    pub switch_device: *mut wlr_switch,
    pub touch: *mut wlr_touch,
    pub tablet: *mut wlr_tablet,
    pub tablet_pad: *mut wlr_tablet_pad,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/*
 * NOTE: the wlr tablet pad implementation does not currently support tablets
 * with more than one mode. I don't own any such hardware so I cannot test it
 * and it is too complicated to make a meaningful implementation of blindly.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_tablet_pad {
    pub impl_0: *mut crate::src::backend::headless::input_device::wlr_tablet_pad_impl,
    pub events: C2RustUnnamed_4,
    pub button_count: size_t,
    pub ring_count: size_t,
    pub strip_count: size_t,
    pub groups: wl_list,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_list {
    pub capacity: size_t,
    pub length: size_t,
    pub items: *mut *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_4 {
    pub button: wl_signal,
    pub ring: wl_signal,
    pub strip: wl_signal,
    pub attach_tablet: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/*
 * Copy+Paste from libinput, but this should neither use libinput, nor
 * tablet-unstable-v2 headers, so we can't include them
 */
/* * A generic pen */
/* * Eraser */
/* * A paintbrush-like tool */
/* * Physical drawing tool, e.g. Wacom Inking Pen */
/* * An airbrush-like tool */
/* * A mouse bound to the tablet */
/* * A mouse tool with a lens */
/* * A rotary device with positional and rotation data */
// Capabilities

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_tablet {
    pub impl_0: *mut crate::src::backend::headless::input_device::wlr_tablet_impl,
    pub events: C2RustUnnamed_5,
    pub name: *mut libc::c_char,
    pub paths: wlr_list,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_5 {
    pub axis: wl_signal,
    pub proximity: wl_signal,
    pub tip: wl_signal,
    pub button: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_touch {
    pub impl_0: *const crate::src::backend::headless::input_device::wlr_touch_impl,
    pub events: C2RustUnnamed_6,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_6 {
    pub down: wl_signal,
    pub up: wl_signal,
    pub motion: wl_signal,
    pub cancel: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_switch {
    pub impl_0: *mut crate::src::backend::headless::input_device::wlr_switch_impl,
    pub events: C2RustUnnamed_7,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_7 {
    pub toggle: wl_signal,
}
/* Note: these are circular dependencies */

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_input_device_impl {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_input_device) -> ()>,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
/*
 * 32 bit regions
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut crate::src::backend::drm::atomic::wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// mHz
// only when using a software cursor without a surface
// only when using a cursor surface

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut crate::src::backend::drm::atomic::wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_8,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_8 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_9,
    pub serials: wlr_serial_ringset,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_9 {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut crate::src::types::data_device::wlr_data_device::wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut crate::src::types::wlr_data_control_v1::wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut crate::src::types::data_device::wlr_data_device::wlr_drag,
    pub drag_source: *mut crate::src::types::data_device::wlr_data_device::wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_10,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_10 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_11,
    pub link: wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_11 {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_12,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_12 {
    pub focus_change: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_13,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_13 {
    pub focus_change: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_virtual_keyboard_manager_v1 {
    pub global: *mut wl_global,
    pub virtual_keyboards: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_14,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_14 {
    pub new_virtual_keyboard: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// struct wlr_virtual_keyboard_v1*
// struct wlr_virtual_keyboard_v1*

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_virtual_keyboard_v1 {
    pub resource: *mut wl_resource,
    pub input_device: wlr_input_device,
    pub seat: *mut wlr_seat,
    pub has_keymap: bool,
    pub link: wl_list,
    pub events: C2RustUnnamed_15,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_15 {
    pub destroy: wl_signal,
}
/* ZWP_VIRTUAL_KEYBOARD_MANAGER_V1_ERROR_ENUM */
/* *
 * @ingroup iface_zwp_virtual_keyboard_manager_v1
 * @struct zwp_virtual_keyboard_manager_v1_interface
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwp_virtual_keyboard_manager_v1_interface {
    pub create_virtual_keyboard: Option<unsafe extern "C" fn(_:
                                                                 *mut wl_client,
                                                             _:
                                                                 *mut wl_resource,
                                                             _:
                                                                 *mut wl_resource,
                                                             _: uint32_t)
                                            -> ()>,
}
/* ZWP_VIRTUAL_KEYBOARD_V1_ERROR_ENUM */
/* *
 * @ingroup iface_zwp_virtual_keyboard_v1
 * @struct zwp_virtual_keyboard_v1_interface
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwp_virtual_keyboard_v1_interface {
    pub keymap: Option<unsafe extern "C" fn(_: *mut wl_client,
                                            _: *mut wl_resource, _: uint32_t,
                                            _: int32_t, _: uint32_t) -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wl_client,
                                         _: *mut wl_resource, _: uint32_t,
                                         _: uint32_t, _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wl_client,
                                               _: *mut wl_resource,
                                               _: uint32_t, _: uint32_t,
                                               _: uint32_t, _: uint32_t)
                              -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* *
	 * No keymap was set
	 */
pub const ZWP_VIRTUAL_KEYBOARD_V1_ERROR_NO_KEYMAP:
          zwp_virtual_keyboard_v1_error =
    0;
/*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
pub type zwp_virtual_keyboard_v1_error = libc::c_uint;
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
unsafe extern "C" fn keyboard_led_update(mut wlr_kb: *mut wlr_keyboard,
                                         mut leds: uint32_t) {
    // unsupported by virtual keyboard protocol
}
unsafe extern "C" fn keyboard_destroy(mut wlr_kb: *mut wlr_keyboard) {
    // safe to ignore - keyboard will be destroyed only iff associated virtual
	// keyboard is torn down, no need to tear down the keyboard separately
}
static mut keyboard_impl: wlr_keyboard_impl =
    {
    
        {
            let mut init =
                wlr_keyboard_impl{destroy:
                                      Some(keyboard_destroy as
                                               unsafe extern "C" fn(_:
                                                                        *mut wlr_keyboard)
                                                   -> ()),
                                  led_update:
                                      Some(keyboard_led_update as
                                               unsafe extern "C" fn(_:
                                                                        *mut wlr_keyboard,
                                                                    _:
                                                                        uint32_t)
                                                   -> ()),};
            init
        }
};
unsafe extern "C" fn input_device_destroy(mut dev: *mut wlr_input_device) { }
static mut input_device_impl: wlr_input_device_impl =
    {
    
        {
            let mut init =
                wlr_input_device_impl{destroy:
                                          Some(input_device_destroy as
                                                   unsafe extern "C" fn(_:
                                                                            *mut wlr_input_device)
                                                       -> ()),};
            init
        }
};
unsafe extern "C" fn virtual_keyboard_from_resource(mut resource:
                                                        *mut wl_resource)
 -> *mut wlr_virtual_keyboard_v1 {
    if wl_resource_instance_of(resource, &zwp_virtual_keyboard_v1_interface,
                               &virtual_keyboard_impl as
                                   *const zwp_virtual_keyboard_v1_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_virtual_keyboard_v1_interface, &virtual_keyboard_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_virtual_keyboard_v1.c\x00" as *const u8
                          as *const libc::c_char, 39i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 85],
                                                &[libc::c_char; 85]>(b"struct wlr_virtual_keyboard_v1 *virtual_keyboard_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_virtual_keyboard_v1;
}
unsafe extern "C" fn virtual_keyboard_keymap(mut client: *mut wl_client,
                                             mut resource: *mut wl_resource,
                                             mut format: uint32_t,
                                             mut fd: int32_t,
                                             mut size: uint32_t) {
    let mut keymap: *mut xkb_keymap = 0 as *mut xkb_keymap;
    let mut data: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut keyboard: *mut wlr_virtual_keyboard_v1 =
        virtual_keyboard_from_resource(resource);
    let mut context: *mut xkb_context = xkb_context_new(XKB_CONTEXT_NO_FLAGS);
    if !context.is_null() {
        data =
            mmap(0 as *mut libc::c_void, size as size_t, 0x1i32, 0x2i32, fd,
                 0i32 as __off64_t);
        if !(data == -1i32 as *mut libc::c_void) {
            keymap =
                xkb_keymap_new_from_string(context,
                                           data as *const libc::c_char,
                                           XKB_KEYMAP_FORMAT_TEXT_V1,
                                           XKB_KEYMAP_COMPILE_NO_FLAGS);
            munmap(data, size as size_t);
            if !keymap.is_null() {
                wlr_keyboard_set_keymap((*keyboard).input_device.c2rust_unnamed.keyboard,
                                        keymap);
                (*keyboard).has_keymap = 1i32 != 0;
                xkb_keymap_unref(keymap);
                xkb_context_unref(context);
                return
            }
        }
        xkb_context_unref(context);
    }
    wl_client_post_no_memory(client);
}
unsafe extern "C" fn virtual_keyboard_key(mut client: *mut wl_client,
                                          mut resource: *mut wl_resource,
                                          mut time: uint32_t,
                                          mut key: uint32_t,
                                          mut state: uint32_t) {
    let mut keyboard: *mut wlr_virtual_keyboard_v1 =
        virtual_keyboard_from_resource(resource);
    if !(*keyboard).has_keymap {
        wl_resource_post_error(resource,
                               ZWP_VIRTUAL_KEYBOARD_V1_ERROR_NO_KEYMAP as
                                   libc::c_int as uint32_t,
                               b"Cannot send a keypress before defining a keymap\x00"
                                   as *const u8 as *const libc::c_char);
        return
    }
    let mut event: wlr_event_keyboard_key =
        {
            let mut init =
                wlr_event_keyboard_key{time_msec: time,
                                       keycode: key,
                                       update_state: 0i32 != 0,
                                       state: state as wlr_key_state,};
            init
        };
    wlr_keyboard_notify_key((*keyboard).input_device.c2rust_unnamed.keyboard,
                            &mut event);
}
unsafe extern "C" fn virtual_keyboard_modifiers(mut client: *mut wl_client,
                                                mut resource:
                                                    *mut wl_resource,
                                                mut mods_depressed: uint32_t,
                                                mut mods_latched: uint32_t,
                                                mut mods_locked: uint32_t,
                                                mut group: uint32_t) {
    let mut keyboard: *mut wlr_virtual_keyboard_v1 =
        virtual_keyboard_from_resource(resource);
    if !(*keyboard).has_keymap {
        wl_resource_post_error(resource,
                               ZWP_VIRTUAL_KEYBOARD_V1_ERROR_NO_KEYMAP as
                                   libc::c_int as uint32_t,
                               b"Cannot send a modifier state before defining a keymap\x00"
                                   as *const u8 as *const libc::c_char);
        return
    }
    wlr_keyboard_notify_modifiers((*keyboard).input_device.c2rust_unnamed.keyboard,
                                  mods_depressed, mods_latched, mods_locked,
                                  group);
}
unsafe extern "C" fn virtual_keyboard_destroy_resource(mut resource:
                                                           *mut wl_resource) {
    let mut keyboard: *mut wlr_virtual_keyboard_v1 =
        virtual_keyboard_from_resource(resource);
    wlr_signal_emit_safe(&mut (*keyboard).events.destroy,
                         keyboard as *mut libc::c_void);
    wl_list_remove(&mut (*keyboard).link);
    wlr_input_device_destroy(&mut (*keyboard).input_device);
    free(keyboard as *mut libc::c_void);
}
unsafe extern "C" fn virtual_keyboard_destroy(mut client: *mut wl_client,
                                              mut resource:
                                                  *mut wl_resource) {
    wl_resource_destroy(resource);
}
static mut virtual_keyboard_impl: zwp_virtual_keyboard_v1_interface =
    {
    
        {
            let mut init =
                zwp_virtual_keyboard_v1_interface{keymap:
                                                      Some(virtual_keyboard_keymap
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        int32_t,
                                                                                    _:
                                                                                        uint32_t)
                                                                   -> ()),
                                                  key:
                                                      Some(virtual_keyboard_key
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        uint32_t)
                                                                   -> ()),
                                                  modifiers:
                                                      Some(virtual_keyboard_modifiers
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        uint32_t,
                                                                                    _:
                                                                                        uint32_t)
                                                                   -> ()),
                                                  destroy:
                                                      Some(virtual_keyboard_destroy
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource)
                                                                   -> ()),};
            init
        }
};
unsafe extern "C" fn manager_from_resource(mut resource: *mut wl_resource)
 -> *mut wlr_virtual_keyboard_manager_v1 {
    if wl_resource_instance_of(resource,
                               &zwp_virtual_keyboard_manager_v1_interface,
                               &manager_impl as
                                   *const zwp_virtual_keyboard_manager_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_virtual_keyboard_manager_v1_interface, &manager_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_virtual_keyboard_v1.c\x00" as *const u8
                          as *const libc::c_char, 136i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 84],
                                                &[libc::c_char; 84]>(b"struct wlr_virtual_keyboard_manager_v1 *manager_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_virtual_keyboard_manager_v1;
}
unsafe extern "C" fn virtual_keyboard_manager_create_virtual_keyboard(mut client:
                                                                          *mut wl_client,
                                                                      mut resource:
                                                                          *mut wl_resource,
                                                                      mut seat:
                                                                          *mut wl_resource,
                                                                      mut id:
                                                                          uint32_t) {
    let mut manager: *mut wlr_virtual_keyboard_manager_v1 =
        manager_from_resource(resource);
    let mut virtual_keyboard: *mut wlr_virtual_keyboard_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_virtual_keyboard_v1>() as
                   libc::c_ulong) as *mut wlr_virtual_keyboard_v1;
    if virtual_keyboard.is_null() { wl_client_post_no_memory(client); return }
    let mut keyboard: *mut wlr_keyboard =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_keyboard>() as libc::c_ulong) as
            *mut wlr_keyboard;
    if keyboard.is_null() {
        _wlr_log(WLR_ERROR,
                 b"[%s:%d] Cannot allocate wlr_keyboard\x00" as *const u8 as
                     *const libc::c_char,
                 b"../types/wlr_virtual_keyboard_v1.c\x00" as *const u8 as
                     *const libc::c_char, 155i32);
        free(virtual_keyboard as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    wlr_keyboard_init(keyboard, &keyboard_impl);
    let mut keyboard_resource: *mut wl_resource =
        wl_resource_create(client, &zwp_virtual_keyboard_v1_interface,
                           wl_resource_get_version(resource), id);
    if keyboard_resource.is_null() {
        free(keyboard as *mut libc::c_void);
        free(virtual_keyboard as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    wl_resource_set_implementation(keyboard_resource,
                                   &virtual_keyboard_impl as
                                       *const zwp_virtual_keyboard_v1_interface
                                       as *const libc::c_void,
                                   virtual_keyboard as *mut libc::c_void,
                                   Some(virtual_keyboard_destroy_resource as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    wlr_input_device_init(&mut (*virtual_keyboard).input_device,
                          WLR_INPUT_DEVICE_KEYBOARD, &input_device_impl,
                          b"virtual keyboard\x00" as *const u8 as
                              *const libc::c_char, 0i32, 0i32);
    let mut seat_client: *mut wlr_seat_client =
        wlr_seat_client_from_resource(seat);
    (*virtual_keyboard).input_device.c2rust_unnamed.keyboard = keyboard;
    (*virtual_keyboard).resource = keyboard_resource;
    (*virtual_keyboard).seat = (*seat_client).seat;
    wl_signal_init(&mut (*virtual_keyboard).events.destroy);
    wl_list_insert(&mut (*manager).virtual_keyboards,
                   &mut (*virtual_keyboard).link);
    wlr_signal_emit_safe(&mut (*manager).events.new_virtual_keyboard,
                         virtual_keyboard as *mut libc::c_void);
}
static mut manager_impl: zwp_virtual_keyboard_manager_v1_interface =
    {
    
        {
            let mut init =
                zwp_virtual_keyboard_manager_v1_interface{create_virtual_keyboard:
                                                              Some(virtual_keyboard_manager_create_virtual_keyboard
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                uint32_t)
                                                                           ->
                                                                               ()),};
            init
        }
};
unsafe extern "C" fn virtual_keyboard_manager_bind(mut client: *mut wl_client,
                                                   mut data:
                                                       *mut libc::c_void,
                                                   mut version: uint32_t,
                                                   mut id: uint32_t) {
    let mut manager: *mut wlr_virtual_keyboard_manager_v1 =
        data as *mut wlr_virtual_keyboard_manager_v1;
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &zwp_virtual_keyboard_manager_v1_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(client); return }
    wl_resource_set_implementation(resource,
                                   &manager_impl as
                                       *const zwp_virtual_keyboard_manager_v1_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void, None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_virtual_keyboard_manager_v1 =
        (listener as *mut libc::c_char).offset(-24) as
            *mut wlr_virtual_keyboard_manager_v1;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_virtual_keyboard_manager_v1_create(mut display:
                                                                    *mut wl_display)
 -> *mut wlr_virtual_keyboard_manager_v1 {
    let mut manager: *mut wlr_virtual_keyboard_manager_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_virtual_keyboard_manager_v1>() as
                   libc::c_ulong) as *mut wlr_virtual_keyboard_manager_v1;
    if manager.is_null() { return 0 as *mut wlr_virtual_keyboard_manager_v1 }
    (*manager).global =
        wl_global_create(display, &zwp_virtual_keyboard_manager_v1_interface,
                         1i32, manager as *mut libc::c_void,
                         Some(virtual_keyboard_manager_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_virtual_keyboard_manager_v1
    }
    (*manager).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*manager).display_destroy);
    wl_list_init(&mut (*manager).virtual_keyboards);
    wl_signal_init(&mut (*manager).events.new_virtual_keyboard);
    wl_signal_init(&mut (*manager).events.destroy);
    return manager;
}
