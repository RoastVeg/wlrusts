use libc;
extern "C" {
    pub type wl_event_source;
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    pub type wlr_backend_impl;
    pub type wlr_texture;
    pub type wlr_surface;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn fcntl(__fd: libc::c_int, __cmd: libc::c_int, _: ...) -> libc::c_int;
    #[no_mangle]
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn close(__fd: libc::c_int) -> libc::c_int;
    #[no_mangle]
    fn read(__fd: libc::c_int, __buf: *mut libc::c_void, __nbytes: size_t)
     -> ssize_t;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_post_no_memory(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_post_error(resource: *mut wl_resource, code: uint32_t,
                              msg: *const libc::c_char, _: ...);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wlr_output_from_resource(resource: *mut wl_resource)
     -> *mut wlr_output;
    #[no_mangle]
    fn wlr_output_set_gamma(output: *mut wlr_output, size: size_t,
                            r: *const uint16_t, g: *const uint16_t,
                            b: *const uint16_t) -> bool;
    #[no_mangle]
    fn wlr_output_get_gamma_size(output: *mut wlr_output) -> size_t;
    #[no_mangle]
    fn strerror(_: libc::c_int) -> *mut libc::c_char;
    #[no_mangle]
    fn __errno_location() -> *mut libc::c_int;
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
    /* *
 * @page page_iface_zwlr_gamma_control_manager_v1 zwlr_gamma_control_manager_v1
 * @section page_iface_zwlr_gamma_control_manager_v1_desc Description
 *
 * This interface is a manager that allows creating per-output gamma
 * controls.
 * @section page_iface_zwlr_gamma_control_manager_v1_api API
 * See @ref iface_zwlr_gamma_control_manager_v1.
 */
/* *
 * @defgroup iface_zwlr_gamma_control_manager_v1 The zwlr_gamma_control_manager_v1 interface
 *
 * This interface is a manager that allows creating per-output gamma
 * controls.
 */
    #[no_mangle]
    static zwlr_gamma_control_manager_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwlr_gamma_control_v1 zwlr_gamma_control_v1
 * @section page_iface_zwlr_gamma_control_v1_desc Description
 *
 * This interface allows a client to adjust gamma tables for a particular
 * output.
 *
 * The client will receive the gamma size, and will then be able to set gamma
 * tables. At any time the compositor can send a failed event indicating that
 * this object is no longer valid.
 *
 * There must always be at most one gamma control object per output, which
 * has exclusive access to this particular output. When the gamma control
 * object is destroyed, the gamma table is restored to its original value.
 * @section page_iface_zwlr_gamma_control_v1_api API
 * See @ref iface_zwlr_gamma_control_v1.
 */
/* *
 * @defgroup iface_zwlr_gamma_control_v1 The zwlr_gamma_control_v1 interface
 *
 * This interface allows a client to adjust gamma tables for a particular
 * output.
 *
 * The client will receive the gamma size, and will then be able to set gamma
 * tables. At any time the compositor can send a failed event indicating that
 * this object is no longer valid.
 *
 * There must always be at most one gamma control object per output, which
 * has exclusive access to this particular output. When the gamma control
 * object is destroyed, the gamma table is restored to its original value.
 */
    #[no_mangle]
    static zwlr_gamma_control_v1_interface: wl_interface;
}
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __uint64_t = libc::c_ulong;
pub type __ssize_t = libc::c_long;
pub type size_t = libc::c_ulong;
pub type ssize_t = __ssize_t;
pub type int32_t = __int32_t;
pub type uint16_t = __uint16_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
/*
 * 32 bit regions
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_region32_data_t = pixman_region32_data;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
pub type pixman_box32_t = pixman_box32;

#[repr(C)]#[derive(Copy, Clone)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_t = pixman_region32;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_dmabuf_attributes {
    pub width: int32_t,
    pub height: int32_t,
    pub format: uint32_t,
    pub flags: uint32_t,
    pub modifier: uint64_t,
    pub n_planes: libc::c_int,
    pub offset: [uint32_t; 4],
    pub stride: [uint32_t; 4],
    pub fd: [libc::c_int; 4],
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_backend {
    pub impl_0: *const crate::src::backend::backend::wlr_backend_impl,
    pub events: C2RustUnnamed,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed {
    pub destroy: wl_signal,
    pub new_input: wl_signal,
    pub new_output: wl_signal,
}
pub type wl_output_subpixel = libc::c_uint;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_BGR: wl_output_subpixel = 5;
pub const WL_OUTPUT_SUBPIXEL_VERTICAL_RGB: wl_output_subpixel = 4;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_BGR: wl_output_subpixel = 3;
pub const WL_OUTPUT_SUBPIXEL_HORIZONTAL_RGB: wl_output_subpixel = 2;
pub const WL_OUTPUT_SUBPIXEL_NONE: wl_output_subpixel = 1;
pub const WL_OUTPUT_SUBPIXEL_UNKNOWN: wl_output_subpixel = 0;
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut crate::src::backend::drm::atomic::wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_mode {
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub preferred: bool,
    pub link: wl_list,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_cursor {
    pub output: *mut wlr_output,
    pub x: libc::c_double,
    pub y: libc::c_double,
    pub enabled: bool,
    pub visible: bool,
    pub width: uint32_t,
    pub height: uint32_t,
    pub hotspot_x: int32_t,
    pub hotspot_y: int32_t,
    pub link: wl_list,
    pub texture: *mut crate::src::backend::drm::atomic::wlr_texture,
    pub surface: *mut crate::src::types::data_device::wlr_data_device::wlr_surface,
    pub surface_commit: wl_listener,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_0,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_0 {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output {
    pub impl_0: *const wlr_output_impl,
    pub backend: *mut wlr_backend,
    pub display: *mut wl_display,
    pub global: *mut wl_global,
    pub resources: wl_list,
    pub name: [libc::c_char; 24],
    pub make: [libc::c_char; 56],
    pub model: [libc::c_char; 16],
    pub serial: [libc::c_char; 16],
    pub phys_width: int32_t,
    pub phys_height: int32_t,
    pub modes: wl_list,
    pub current_mode: *mut wlr_output_mode,
    pub width: int32_t,
    pub height: int32_t,
    pub refresh: int32_t,
    pub enabled: bool,
    pub scale: libc::c_float,
    pub subpixel: wl_output_subpixel,
    pub transform: wl_output_transform,
    pub needs_frame: bool,
    pub damage: pixman_region32_t,
    pub frame_pending: bool,
    pub transform_matrix: [libc::c_float; 9],
    pub pending: wlr_output_state,
    pub commit_seq: uint32_t,
    pub events: C2RustUnnamed_1,
    pub idle_frame: *mut wl_event_source,
    pub idle_done: *mut wl_event_source,
    pub attach_render_locks: libc::c_int,
    pub cursors: wl_list,
    pub hardware_cursor: *mut wlr_output_cursor,
    pub software_cursor_locks: libc::c_int,
    pub display_destroy: wl_listener,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_1 {
    pub frame: wl_signal,
    pub needs_frame: wl_signal,
    pub precommit: wl_signal,
    pub commit: wl_signal,
    pub present: wl_signal,
    pub enable: wl_signal,
    pub mode: wl_signal,
    pub scale: wl_signal,
    pub transform: wl_signal,
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_state {
    pub committed: uint32_t,
    pub damage: pixman_region32_t,
    pub buffer_type: wlr_output_state_buffer_type,
    pub buffer: *mut wlr_buffer,
}
pub type wlr_output_state_buffer_type = libc::c_uint;
pub const WLR_OUTPUT_STATE_BUFFER_SCANOUT: wlr_output_state_buffer_type = 1;
pub const WLR_OUTPUT_STATE_BUFFER_RENDER: wlr_output_state_buffer_type = 0;

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_output_impl {
    pub enable: Option<unsafe extern "C" fn(_: *mut wlr_output, _: bool)
                           -> bool>,
    pub set_mode: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                              _: *mut wlr_output_mode)
                             -> bool>,
    pub set_custom_mode: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                     _: int32_t, _: int32_t,
                                                     _: int32_t) -> bool>,
    pub set_cursor: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                _: *mut crate::src::backend::drm::atomic::wlr_texture,
                                                _: int32_t,
                                                _: wl_output_transform,
                                                _: int32_t, _: int32_t,
                                                _: bool) -> bool>,
    pub move_cursor: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                 _: libc::c_int,
                                                 _: libc::c_int) -> bool>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wlr_output) -> ()>,
    pub attach_render: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                   _: *mut libc::c_int)
                                  -> bool>,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_output) -> bool>,
    pub set_gamma: Option<unsafe extern "C" fn(_: *mut wlr_output, _: size_t,
                                               _: *const uint16_t,
                                               _: *const uint16_t,
                                               _: *const uint16_t) -> bool>,
    pub get_gamma_size: Option<unsafe extern "C" fn(_: *mut wlr_output)
                                   -> size_t>,
    pub export_dmabuf: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                   _:
                                                       *mut wlr_dmabuf_attributes)
                                  -> bool>,
    pub schedule_frame: Option<unsafe extern "C" fn(_: *mut wlr_output)
                                   -> bool>,
    pub attach_buffer: Option<unsafe extern "C" fn(_: *mut wlr_output,
                                                   _: *mut wlr_buffer)
                                  -> bool>,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_gamma_control_manager_v1 {
    pub global: *mut wl_global,
    pub controls: wl_list,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed_2,
    pub data: *mut libc::c_void,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct C2RustUnnamed_2 {
    pub destroy: wl_signal,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wlr_gamma_control_v1 {
    pub resource: *mut wl_resource,
    pub output: *mut wlr_output,
    pub link: wl_list,
    pub output_destroy_listener: wl_listener,
    pub data: *mut libc::c_void,
}
/* *
 * @ingroup iface_zwlr_gamma_control_manager_v1
 * @struct zwlr_gamma_control_manager_v1_interface
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwlr_gamma_control_manager_v1_interface {
    pub get_gamma_control: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut wl_resource,
                                                       _: uint32_t,
                                                       _: *mut wl_resource)
                                      -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* ZWLR_GAMMA_CONTROL_V1_ERROR_ENUM */
/* *
 * @ingroup iface_zwlr_gamma_control_v1
 * @struct zwlr_gamma_control_v1_interface
 */

#[repr(C)]#[derive(Copy, Clone)]
pub struct zwlr_gamma_control_v1_interface {
    pub set_gamma: Option<unsafe extern "C" fn(_: *mut wl_client,
                                               _: *mut wl_resource,
                                               _: int32_t) -> ()>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
/* *
	 * invalid gamma tables
	 */
pub const ZWLR_GAMMA_CONTROL_V1_ERROR_INVALID_GAMMA:
          zwlr_gamma_control_v1_error =
    1;
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
/* *
 * @ingroup iface_zwlr_gamma_control_manager_v1
 */
/* *
 * @ingroup iface_zwlr_gamma_control_manager_v1
 */
pub type zwlr_gamma_control_v1_error = libc::c_uint;
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
/* *
 * @ingroup iface_zwlr_gamma_control_v1
 */
/* *
 * @ingroup iface_zwlr_gamma_control_v1
 */
/* *
 * @ingroup iface_zwlr_gamma_control_v1
 */
/* *
 * @ingroup iface_zwlr_gamma_control_v1
 */
/* *
 * @ingroup iface_zwlr_gamma_control_v1
 * Sends an gamma_size event to the client owning the resource.
 * @param resource_ The client's resource
 * @param size number of elements in a ramp
 */
#[inline]
unsafe extern "C" fn zwlr_gamma_control_v1_send_gamma_size(mut resource_:
                                                               *mut wl_resource,
                                                           mut size:
                                                               uint32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, size);
}
/* *
 * @ingroup iface_zwlr_gamma_control_v1
 * Sends an failed event to the client owning the resource.
 * @param resource_ The client's resource
 */
#[inline]
unsafe extern "C" fn zwlr_gamma_control_v1_send_failed(mut resource_:
                                                           *mut wl_resource) {
    wl_resource_post_event(resource_, 1i32 as uint32_t);
}
unsafe extern "C" fn gamma_control_handle_destroy(mut client: *mut wl_client,
                                                  mut resource:
                                                      *mut wl_resource) {
    wl_resource_destroy(resource);
}
unsafe extern "C" fn gamma_control_destroy(mut gamma_control:
                                               *mut wlr_gamma_control_v1) {
    if gamma_control.is_null() { return }
    wlr_output_set_gamma((*gamma_control).output, 0i32 as size_t,
                         0 as *const uint16_t, 0 as *const uint16_t,
                         0 as *const uint16_t);
    wl_resource_set_user_data((*gamma_control).resource,
                              0 as *mut libc::c_void);
    wl_list_remove(&mut (*gamma_control).output_destroy_listener.link);
    wl_list_remove(&mut (*gamma_control).link);
    free(gamma_control as *mut libc::c_void);
}
unsafe extern "C" fn gamma_control_send_failed(mut gamma_control:
                                                   *mut wlr_gamma_control_v1) {
    zwlr_gamma_control_v1_send_failed((*gamma_control).resource);
    gamma_control_destroy(gamma_control);
}
unsafe extern "C" fn gamma_control_from_resource(mut resource:
                                                     *mut wl_resource)
 -> *mut wlr_gamma_control_v1 {
    if wl_resource_instance_of(resource, &zwlr_gamma_control_v1_interface,
                               &gamma_control_impl as
                                   *const zwlr_gamma_control_v1_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwlr_gamma_control_v1_interface, &gamma_control_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_gamma_control_v1.c\x00" as *const u8 as
                          *const libc::c_char, 42i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 79],
                                                &[libc::c_char; 79]>(b"struct wlr_gamma_control_v1 *gamma_control_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as *mut wlr_gamma_control_v1;
}
unsafe extern "C" fn gamma_control_handle_resource_destroy(mut resource:
                                                               *mut wl_resource) {
    let mut gamma_control: *mut wlr_gamma_control_v1 =
        gamma_control_from_resource(resource);
    gamma_control_destroy(gamma_control);
}
unsafe extern "C" fn gamma_control_handle_output_destroy(mut listener:
                                                             *mut wl_listener,
                                                         mut data:
                                                             *mut libc::c_void) {
    let mut gamma_control: *mut wlr_gamma_control_v1 =
        (listener as *mut libc::c_char).offset(-32) as
            *mut wlr_gamma_control_v1;
    gamma_control_destroy(gamma_control);
}
unsafe extern "C" fn gamma_control_handle_set_gamma(mut client:
                                                        *mut wl_client,
                                                    mut gamma_control_resource:
                                                        *mut wl_resource,
                                                    mut fd: libc::c_int) {
    let mut r: *mut uint16_t = 0 as *mut uint16_t;
    let mut g: *mut uint16_t = 0 as *mut uint16_t;
    let mut b: *mut uint16_t = 0 as *mut uint16_t;
    let mut ok: bool = false;
    let mut ramp_size: uint32_t = 0;
    let mut table_size: size_t = 0;
    let mut fd_flags: libc::c_int = 0;
    let mut table: *mut uint16_t = 0 as *mut uint16_t;
    let mut n_read: ssize_t = 0;
    let mut gamma_control: *mut wlr_gamma_control_v1 =
        gamma_control_from_resource(gamma_control_resource);
    if !gamma_control.is_null() {
        ramp_size =
            wlr_output_get_gamma_size((*gamma_control).output) as uint32_t;
        table_size =
            (ramp_size.wrapping_mul(3i32 as libc::c_uint) as
                 libc::c_ulong).wrapping_mul(::std::mem::size_of::<uint16_t>()
                                                 as libc::c_ulong);
        // Refuse to block when reading
        fd_flags = fcntl(fd, 3i32, 0i32);
        if fd_flags == -1i32 {
            _wlr_log(WLR_ERROR,
                     b"[%s:%d] failed to get FD flags: %s\x00" as *const u8 as
                         *const libc::c_char,
                     b"../types/wlr_gamma_control_v1.c\x00" as *const u8 as
                         *const libc::c_char, 73i32,
                     strerror(*__errno_location()));
            gamma_control_send_failed(gamma_control);
        } else if fcntl(fd, 4i32, fd_flags | 0o4000i32) == -1i32 {
            _wlr_log(WLR_ERROR,
                     b"[%s:%d] failed to set FD flags: %s\x00" as *const u8 as
                         *const libc::c_char,
                     b"../types/wlr_gamma_control_v1.c\x00" as *const u8 as
                         *const libc::c_char, 78i32,
                     strerror(*__errno_location()));
            gamma_control_send_failed(gamma_control);
        } else {
            // Use the heap since gamma tables can be large
            table = malloc(table_size) as *mut uint16_t;
            if table.is_null() {
                wl_resource_post_no_memory(gamma_control_resource);
            } else {
                n_read = read(fd, table as *mut libc::c_void, table_size);
                if n_read < 0i32 as libc::c_long {
                    _wlr_log(WLR_ERROR,
                             b"[%s:%d] failed to read gamma table: %s\x00" as
                                 *const u8 as *const libc::c_char,
                             b"../types/wlr_gamma_control_v1.c\x00" as
                                 *const u8 as *const libc::c_char, 92i32,
                             strerror(*__errno_location()));
                    gamma_control_send_failed(gamma_control);
                } else if n_read as size_t != table_size {
                    wl_resource_post_error(gamma_control_resource,
                                           ZWLR_GAMMA_CONTROL_V1_ERROR_INVALID_GAMMA
                                               as libc::c_int as uint32_t,
                                           b"The gamma ramps don\'t have the correct size\x00"
                                               as *const u8 as
                                               *const libc::c_char);
                } else {
                    close(fd);
                    fd = -1i32;
                    r = table;
                    g = table.offset(ramp_size as isize);
                    b =
                        table.offset((2i32 as
                                          libc::c_uint).wrapping_mul(ramp_size)
                                         as isize);
                    ok =
                        wlr_output_set_gamma((*gamma_control).output,
                                             ramp_size as size_t, r, g, b);
                    if !ok {
                        gamma_control_send_failed(gamma_control);
                    } else { free(table as *mut libc::c_void); return }
                }
                free(table as *mut libc::c_void);
            }
        }
    }
    close(fd);
}
static mut gamma_control_impl: zwlr_gamma_control_v1_interface =
    {
    
        {
            let mut init =
                zwlr_gamma_control_v1_interface{set_gamma:
                                                    Some(gamma_control_handle_set_gamma
                                                             as
                                                             unsafe extern "C" fn(_:
                                                                                      *mut wl_client,
                                                                                  _:
                                                                                      *mut wl_resource,
                                                                                  _:
                                                                                      libc::c_int)
                                                                 -> ()),
                                                destroy:
                                                    Some(gamma_control_handle_destroy
                                                             as
                                                             unsafe extern "C" fn(_:
                                                                                      *mut wl_client,
                                                                                  _:
                                                                                      *mut wl_resource)
                                                                 -> ()),};
            init
        }
};
unsafe extern "C" fn gamma_control_manager_from_resource(mut resource:
                                                             *mut wl_resource)
 -> *mut wlr_gamma_control_manager_v1 {
    if wl_resource_instance_of(resource,
                               &zwlr_gamma_control_manager_v1_interface,
                               &gamma_control_manager_impl as
                                   *const zwlr_gamma_control_manager_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwlr_gamma_control_manager_v1_interface, &gamma_control_manager_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_gamma_control_v1.c\x00" as *const u8 as
                          *const libc::c_char, 134i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 95],
                                                &[libc::c_char; 95]>(b"struct wlr_gamma_control_manager_v1 *gamma_control_manager_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_gamma_control_manager_v1;
}
unsafe extern "C" fn gamma_control_manager_get_gamma_control(mut client:
                                                                 *mut wl_client,
                                                             mut manager_resource:
                                                                 *mut wl_resource,
                                                             mut id: uint32_t,
                                                             mut output_resource:
                                                                 *mut wl_resource) {
    let mut manager: *mut wlr_gamma_control_manager_v1 =
        gamma_control_manager_from_resource(manager_resource);
    let mut output: *mut wlr_output =
        wlr_output_from_resource(output_resource);
    let mut gamma_control: *mut wlr_gamma_control_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_gamma_control_v1>() as libc::c_ulong)
            as *mut wlr_gamma_control_v1;
    if gamma_control.is_null() { wl_client_post_no_memory(client); return }
    (*gamma_control).output = output;
    let mut version: uint32_t =
        wl_resource_get_version(manager_resource) as uint32_t;
    (*gamma_control).resource =
        wl_resource_create(client, &zwlr_gamma_control_v1_interface,
                           version as libc::c_int, id);
    if (*gamma_control).resource.is_null() {
        free(gamma_control as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    wl_resource_set_implementation((*gamma_control).resource,
                                   &gamma_control_impl as
                                       *const zwlr_gamma_control_v1_interface
                                       as *const libc::c_void,
                                   gamma_control as *mut libc::c_void,
                                   Some(gamma_control_handle_resource_destroy
                                            as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    wl_signal_add(&mut (*output).events.destroy,
                  &mut (*gamma_control).output_destroy_listener);
    (*gamma_control).output_destroy_listener.notify =
        Some(gamma_control_handle_output_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_list_init(&mut (*gamma_control).link);
    if (*(*output).impl_0).set_gamma.is_none() {
        zwlr_gamma_control_v1_send_failed((*gamma_control).resource);
        gamma_control_destroy(gamma_control);
        return
    }
    let mut gc: *mut wlr_gamma_control_v1 = 0 as *mut wlr_gamma_control_v1;
    gc =
        ((*manager).controls.next as *mut libc::c_char).offset(-16) as
            *mut wlr_gamma_control_v1;
    while &mut (*gc).link as *mut wl_list !=
              &mut (*manager).controls as *mut wl_list {
        if (*gc).output == output {
            zwlr_gamma_control_v1_send_failed((*gc).resource);
            gamma_control_destroy(gc);
            return
        }
        gc =
            ((*gc).link.next as *mut libc::c_char).offset(-16) as
                *mut wlr_gamma_control_v1
    }
    wl_list_remove(&mut (*gamma_control).link);
    wl_list_insert(&mut (*manager).controls, &mut (*gamma_control).link);
    zwlr_gamma_control_v1_send_gamma_size((*gamma_control).resource,
                                          wlr_output_get_gamma_size(output) as
                                              uint32_t);
}
unsafe extern "C" fn gamma_control_manager_destroy(mut client: *mut wl_client,
                                                   mut manager_resource:
                                                       *mut wl_resource) {
    wl_resource_destroy(manager_resource);
}
static mut gamma_control_manager_impl: zwlr_gamma_control_manager_v1_interface
       =
    {
    
        {
            let mut init =
                zwlr_gamma_control_manager_v1_interface{get_gamma_control:
                                                            Some(gamma_control_manager_get_gamma_control
                                                                     as
                                                                     unsafe extern "C" fn(_:
                                                                                              *mut wl_client,
                                                                                          _:
                                                                                              *mut wl_resource,
                                                                                          _:
                                                                                              uint32_t,
                                                                                          _:
                                                                                              *mut wl_resource)
                                                                         ->
                                                                             ()),
                                                        destroy:
                                                            Some(gamma_control_manager_destroy
                                                                     as
                                                                     unsafe extern "C" fn(_:
                                                                                              *mut wl_client,
                                                                                          _:
                                                                                              *mut wl_resource)
                                                                         ->
                                                                             ()),};
            init
        }
};
unsafe extern "C" fn gamma_control_manager_bind(mut client: *mut wl_client,
                                                mut data: *mut libc::c_void,
                                                mut version: uint32_t,
                                                mut id: uint32_t) {
    let mut manager: *mut wlr_gamma_control_manager_v1 =
        data as *mut wlr_gamma_control_manager_v1;
    let mut resource: *mut wl_resource =
        wl_resource_create(client, &zwlr_gamma_control_manager_v1_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(client); return }
    wl_resource_set_implementation(resource,
                                   &gamma_control_manager_impl as
                                       *const zwlr_gamma_control_manager_v1_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void, None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_gamma_control_manager_v1 =
        (listener as *mut libc::c_char).offset(-24) as
            *mut wlr_gamma_control_manager_v1;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn wlr_gamma_control_manager_v1_create(mut display:
                                                                 *mut wl_display)
 -> *mut wlr_gamma_control_manager_v1 {
    let mut manager: *mut wlr_gamma_control_manager_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_gamma_control_manager_v1>() as
                   libc::c_ulong) as *mut wlr_gamma_control_manager_v1;
    if manager.is_null() { return 0 as *mut wlr_gamma_control_manager_v1 }
    (*manager).global =
        wl_global_create(display, &zwlr_gamma_control_manager_v1_interface,
                         1i32, manager as *mut libc::c_void,
                         Some(gamma_control_manager_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_gamma_control_manager_v1
    }
    wl_signal_init(&mut (*manager).events.destroy);
    wl_list_init(&mut (*manager).controls);
    (*manager).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*manager).display_destroy);
    return manager;
}
