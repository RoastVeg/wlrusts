use libc;
extern "C" {
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type wlr_texture;
    pub type wlr_renderer;
    pub type xkb_state;
    pub type xkb_keymap;
    pub type wlr_keyboard_group;
    pub type wlr_keyboard_impl;
    pub type wlr_data_source;
    pub type wlr_drag;
    // wlr_touch_point::link
    pub type wlr_primary_selection_source;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn wl_resource_add_destroy_listener(resource: *mut wl_resource,
                                        listener: *mut wl_listener);
    /* *
 * Get a seat client from a pointer resource. Returns NULL if inert.
 */
    #[no_mangle]
    fn wlr_seat_client_from_pointer_resource(resource: *mut wl_resource)
     -> *mut wlr_seat_client;
    /*
 * This is a stable interface of wlroots. Future changes will be limited to:
 *
 * - New functions
 * - New struct members
 * - New enum members
 *
 * Note that wlroots does not make an ABI compatibility promise - in the future,
 * the layout and size of structs used by wlroots may change, requiring code
 * depending on this header to be recompiled (but not edited).
 *
 * Breaking changes are announced by email and follow a 1-year deprecation
 * schedule. Send an email to ~sircmpwn/wlroots-announce+subscribe@lists.sr.ht
 * to receive these announcements.
 */
    // Will log all messages less than or equal to `verbosity`
// If `callback` is NULL, wlr will use its default logger.
// The function can be called multiple times to update the verbosity or
// callback function.
    // Returns the log verbosity provided to wlr_log_init
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    /* *
 * @page page_iface_zwp_relative_pointer_manager_v1 zwp_relative_pointer_manager_v1
 * @section page_iface_zwp_relative_pointer_manager_v1_desc Description
 *
 * A global interface used for getting the relative pointer object for a
 * given pointer.
 * @section page_iface_zwp_relative_pointer_manager_v1_api API
 * See @ref iface_zwp_relative_pointer_manager_v1.
 */
/* *
 * @defgroup iface_zwp_relative_pointer_manager_v1 The zwp_relative_pointer_manager_v1 interface
 *
 * A global interface used for getting the relative pointer object for a
 * given pointer.
 */
    #[no_mangle]
    static zwp_relative_pointer_manager_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_relative_pointer_v1 zwp_relative_pointer_v1
 * @section page_iface_zwp_relative_pointer_v1_desc Description
 *
 * A wp_relative_pointer object is an extension to the wl_pointer interface
 * used for emitting relative pointer events. It shares the same focus as
 * wl_pointer objects of the same seat and will only emit events when it has
 * focus.
 * @section page_iface_zwp_relative_pointer_v1_api API
 * See @ref iface_zwp_relative_pointer_v1.
 */
/* *
 * @defgroup iface_zwp_relative_pointer_v1 The zwp_relative_pointer_v1 interface
 *
 * A wp_relative_pointer object is an extension to the wl_pointer interface
 * used for emitting relative pointer events. It shares the same focus as
 * wl_pointer objects of the same seat and will only emit events when it has
 * focus.
 */
    #[no_mangle]
    static zwp_relative_pointer_v1_interface: wl_interface;
}
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __time_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type size_t = libc::c_ulong;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
pub type wl_fixed_t = int32_t;
#[derive ( Copy, Clone )]
#[repr ( C )]
pub union C2RustUnnamed {
    pub d: libc::c_double,
    pub i: int64_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * This protocol specifies a set of interfaces used for making clients able to
 * receive relative pointer events not obstructed by barriers (such as the
 * monitor edge or pointer constraints).
 */
/* *
 * A global interface used for getting the relative pointer object for a given
 * pointer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_relative_pointer_manager_v1 {
    pub global: *mut wl_global,
    pub relative_pointers: wl_list,
    pub events: C2RustUnnamed_0,
    pub display_destroy_listener: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub destroy: wl_signal,
    pub new_relative_pointer: wl_signal,
}
/* *
 * A wp_relative_pointer object is an extension to the wl_pointer interface
 * used for emitting relative pointer events. It shares the same focus as
 * wl_pointer objects of the same seat and will only emit events when it has
 * focus.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_relative_pointer_v1 {
    pub resource: *mut wl_resource,
    pub pointer_resource: *mut wl_resource,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub events: C2RustUnnamed_1,
    pub seat_destroy: wl_listener,
    pub pointer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat {
    pub global: *mut wl_global,
    pub display: *mut wl_display,
    pub clients: wl_list,
    pub name: *mut libc::c_char,
    pub capabilities: uint32_t,
    pub last_event: timespec,
    pub selection_source: *mut wlr_data_source,
    pub selection_serial: uint32_t,
    pub selection_offers: wl_list,
    pub primary_selection_source: *mut wlr_primary_selection_source,
    pub primary_selection_serial: uint32_t,
    pub drag: *mut wlr_drag,
    pub drag_source: *mut wlr_data_source,
    pub drag_serial: uint32_t,
    pub drag_offers: wl_list,
    pub pointer_state: wlr_seat_pointer_state,
    pub keyboard_state: wlr_seat_keyboard_state,
    pub touch_state: wlr_seat_touch_state,
    pub display_destroy: wl_listener,
    pub selection_source_destroy: wl_listener,
    pub primary_selection_source_destroy: wl_listener,
    pub drag_source_destroy: wl_listener,
    pub events: C2RustUnnamed_2,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub pointer_grab_begin: wl_signal,
    pub pointer_grab_end: wl_signal,
    pub keyboard_grab_begin: wl_signal,
    pub keyboard_grab_end: wl_signal,
    pub touch_grab_begin: wl_signal,
    pub touch_grab_end: wl_signal,
    pub request_set_cursor: wl_signal,
    pub request_set_selection: wl_signal,
    pub set_selection: wl_signal,
    pub request_set_primary_selection: wl_signal,
    pub set_primary_selection: wl_signal,
    pub request_start_drag: wl_signal,
    pub start_drag: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_state {
    pub seat: *mut wlr_seat,
    pub touch_points: wl_list,
    pub grab_serial: uint32_t,
    pub grab_id: uint32_t,
    pub grab: *mut wlr_seat_touch_grab,
    pub default_grab: *mut wlr_seat_touch_grab,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_touch_grab {
    pub interface: *const wlr_touch_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_grab_interface {
    pub down: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                          _: uint32_t,
                                          _: *mut wlr_touch_point)
                         -> uint32_t>,
    pub up: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                        _: uint32_t, _: *mut wlr_touch_point)
                       -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                            _: uint32_t,
                                            _: *mut wlr_touch_point) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab,
                                           _: uint32_t,
                                           _: *mut wlr_touch_point) -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_touch_grab)
                           -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_touch_point {
    pub touch_id: int32_t,
    pub surface: *mut wlr_surface,
    pub client: *mut wlr_seat_client,
    pub focus_surface: *mut wlr_surface,
    pub focus_client: *mut wlr_seat_client,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub surface_destroy: wl_listener,
    pub focus_surface_destroy: wl_listener,
    pub client_destroy: wl_listener,
    pub events: C2RustUnnamed_3,
    pub link: wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_client {
    pub client: *mut wl_client,
    pub seat: *mut wlr_seat,
    pub link: wl_list,
    pub resources: wl_list,
    pub pointers: wl_list,
    pub keyboards: wl_list,
    pub touches: wl_list,
    pub data_devices: wl_list,
    pub events: C2RustUnnamed_4,
    pub serials: wlr_serial_ringset,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_ringset {
    pub data: [wlr_serial_range; 128],
    pub end: libc::c_int,
    pub count: libc::c_int,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_serial_range {
    pub min_incl: uint32_t,
    pub max_incl: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// mHz
// only when using a software cursor without a surface
// only when using a cursor surface
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_5,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
pub type pixman_region32_t = pixman_region32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * A client buffer.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * Contains state for a single client's bound wl_seat resource and can be used
 * to issue input events to that client. The lifetime of these objects is
 * managed by wlr_seat; some may be NULL.
 */
// lists of wl_resource
// set of serials which were sent to the client on this seat
	// for use by wlr_seat_client_{next_serial,validate_event_serial}
// XXX this will conflict with the actual touch cancel which is different so
	// we need to rename this
/* *
 * Passed to `wlr_seat_touch_start_grab()` to start a grab of the touch device.
 * The grabber is responsible for handling touch events for the seat.
 */
/* *
 * Passed to `wlr_seat_keyboard_start_grab()` to start a grab of the keyboard.
 * The grabber is responsible for handling keyboard events for the seat.
 */
/* *
 * Passed to `wlr_seat_pointer_start_grab()` to start a grab of the pointer. The
 * grabber is responsible for handling pointer events for the seat.
 */
// wlr_seat_pointer_focus_change_event
// TODO: May be useful to be able to simulate keyboard input events
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_state {
    pub seat: *mut wlr_seat,
    pub keyboard: *mut wlr_keyboard,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub keyboard_destroy: wl_listener,
    pub keyboard_keymap: wl_listener,
    pub keyboard_repeat_info: wl_listener,
    pub surface_destroy: wl_listener,
    pub grab: *mut wlr_seat_keyboard_grab,
    pub default_grab: *mut wlr_seat_keyboard_grab,
    pub events: C2RustUnnamed_6,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_keyboard_grab {
    pub interface: *const wlr_keyboard_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                           _: *mut wlr_surface,
                                           _: *mut uint32_t, _: size_t,
                                           _: *mut wlr_keyboard_modifiers)
                          -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab,
                                               _: *mut wlr_keyboard_modifiers)
                              -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_keyboard_grab)
                           -> ()>,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard_modifiers {
    pub depressed: xkb_mod_mask_t,
    pub latched: xkb_mod_mask_t,
    pub locked: xkb_mod_mask_t,
    pub group: xkb_mod_mask_t,
}
pub type xkb_mod_mask_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_keyboard {
    pub impl_0: *const wlr_keyboard_impl,
    pub group: *mut wlr_keyboard_group,
    pub keymap_string: *mut libc::c_char,
    pub keymap_size: size_t,
    pub keymap: *mut xkb_keymap,
    pub xkb_state: *mut xkb_state,
    pub led_indexes: [xkb_led_index_t; 3],
    pub mod_indexes: [xkb_mod_index_t; 8],
    pub keycodes: [uint32_t; 32],
    pub num_keycodes: size_t,
    pub modifiers: wlr_keyboard_modifiers,
    pub repeat_info: C2RustUnnamed_8,
    pub events: C2RustUnnamed_7,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub key: wl_signal,
    pub modifiers: wl_signal,
    pub keymap: wl_signal,
    pub repeat_info: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub rate: int32_t,
    pub delay: int32_t,
}
pub type xkb_mod_index_t = uint32_t;
pub type xkb_led_index_t = uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_state {
    pub seat: *mut wlr_seat,
    pub focused_client: *mut wlr_seat_client,
    pub focused_surface: *mut wlr_surface,
    pub sx: libc::c_double,
    pub sy: libc::c_double,
    pub grab: *mut wlr_seat_pointer_grab,
    pub default_grab: *mut wlr_seat_pointer_grab,
    pub buttons: [uint32_t; 16],
    pub button_count: size_t,
    pub grab_button: uint32_t,
    pub grab_serial: uint32_t,
    pub grab_time: uint32_t,
    pub surface_destroy: wl_listener,
    pub events: C2RustUnnamed_9,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub focus_change: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_seat_pointer_grab {
    pub interface: *const wlr_pointer_grab_interface,
    pub seat: *mut wlr_seat,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_pointer_grab_interface {
    pub enter: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                           _: *mut wlr_surface,
                                           _: libc::c_double,
                                           _: libc::c_double) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: libc::c_double,
                                            _: libc::c_double) -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                            _: uint32_t, _: uint32_t,
                                            _: wlr_button_state) -> uint32_t>,
    pub axis: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab,
                                          _: uint32_t,
                                          _: wlr_axis_orientation,
                                          _: libc::c_double, _: int32_t,
                                          _: wlr_axis_source) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                          -> ()>,
    pub cancel: Option<unsafe extern "C" fn(_: *mut wlr_seat_pointer_grab)
                           -> ()>,
}
pub type wlr_axis_source = libc::c_uint;
pub const WLR_AXIS_SOURCE_WHEEL_TILT: wlr_axis_source = 3;
pub const WLR_AXIS_SOURCE_CONTINUOUS: wlr_axis_source = 2;
pub const WLR_AXIS_SOURCE_FINGER: wlr_axis_source = 1;
pub const WLR_AXIS_SOURCE_WHEEL: wlr_axis_source = 0;
pub type wlr_axis_orientation = libc::c_uint;
pub const WLR_AXIS_ORIENTATION_HORIZONTAL: wlr_axis_orientation = 1;
pub const WLR_AXIS_ORIENTATION_VERTICAL: wlr_axis_orientation = 0;
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
pub type wlr_button_state = libc::c_uint;
pub const WLR_BUTTON_PRESSED: wlr_button_state = 1;
pub const WLR_BUTTON_RELEASED: wlr_button_state = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
/* *
 * @ingroup iface_zwp_relative_pointer_manager_v1
 * @struct zwp_relative_pointer_manager_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_relative_pointer_manager_v1_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub get_relative_pointer: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                          _: *mut wl_resource,
                                                          _: uint32_t,
                                                          _: *mut wl_resource)
                                         -> ()>,
}
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
/* *
 * @ingroup iface_zwp_relative_pointer_manager_v1
 */
/* *
 * @ingroup iface_zwp_relative_pointer_manager_v1
 */
/* *
 * @ingroup iface_zwp_relative_pointer_v1
 * @struct zwp_relative_pointer_v1_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct zwp_relative_pointer_v1_interface {
    pub destroy: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
}
#[inline]
unsafe extern "C" fn wl_fixed_from_double(mut d: libc::c_double)
 -> wl_fixed_t {
    let mut u: C2RustUnnamed = C2RustUnnamed{d: 0.,};
    u.d = d + (3i64 << 51i32 - 8i32) as libc::c_double;
    return u.i as wl_fixed_t;
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
/* *
 * @ingroup iface_zwp_relative_pointer_v1
 */
/* *
 * @ingroup iface_zwp_relative_pointer_v1
 */
/* *
 * @ingroup iface_zwp_relative_pointer_v1
 * Sends an relative_motion event to the client owning the resource.
 * @param resource_ The client's resource
 * @param utime_hi high 32 bits of a 64 bit timestamp with microsecond granularity
 * @param utime_lo low 32 bits of a 64 bit timestamp with microsecond granularity
 * @param dx the x component of the motion vector
 * @param dy the y component of the motion vector
 * @param dx_unaccel the x component of the unaccelerated motion vector
 * @param dy_unaccel the y component of the unaccelerated motion vector
 */
#[inline]
unsafe extern "C" fn zwp_relative_pointer_v1_send_relative_motion(mut resource_:
                                                                      *mut wl_resource,
                                                                  mut utime_hi:
                                                                      uint32_t,
                                                                  mut utime_lo:
                                                                      uint32_t,
                                                                  mut dx:
                                                                      wl_fixed_t,
                                                                  mut dy:
                                                                      wl_fixed_t,
                                                                  mut dx_unaccel:
                                                                      wl_fixed_t,
                                                                  mut dy_unaccel:
                                                                      wl_fixed_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, utime_hi, utime_lo,
                           dx, dy, dx_unaccel, dy_unaccel);
}
/* *
 * Get a relative pointer from its resource. Returns NULL if inert.
 */
/* *
 * helper functions
 */
#[no_mangle]
pub unsafe extern "C" fn wlr_relative_pointer_v1_from_resource(mut resource:
                                                                   *mut wl_resource)
 -> *mut wlr_relative_pointer_v1 {
    if wl_resource_instance_of(resource, &zwp_relative_pointer_v1_interface,
                               &relative_pointer_v1_impl as
                                   *const zwp_relative_pointer_v1_interface as
                                   *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_relative_pointer_v1_interface, &relative_pointer_v1_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_relative_pointer_v1.c\x00" as *const u8
                          as *const libc::c_char, 24i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 92],
                                                &[libc::c_char; 92]>(b"struct wlr_relative_pointer_v1 *wlr_relative_pointer_v1_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_relative_pointer_v1;
}
unsafe extern "C" fn relative_pointer_manager_from_resource(mut resource:
                                                                *mut wl_resource)
 -> *mut wlr_relative_pointer_manager_v1 {
    if wl_resource_instance_of(resource,
                               &zwp_relative_pointer_manager_v1_interface,
                               &relative_pointer_manager_v1_impl as
                                   *const zwp_relative_pointer_manager_v1_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &zwp_relative_pointer_manager_v1_interface, &relative_pointer_manager_v1_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_relative_pointer_v1.c\x00" as *const u8
                          as *const libc::c_char, 31i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 101],
                                                &[libc::c_char; 101]>(b"struct wlr_relative_pointer_manager_v1 *relative_pointer_manager_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_relative_pointer_manager_v1;
}
/* *
 * relative_pointer handler functions
 */
unsafe extern "C" fn relative_pointer_destroy(mut relative_pointer:
                                                  *mut wlr_relative_pointer_v1) {
    wlr_signal_emit_safe(&mut (*relative_pointer).events.destroy,
                         relative_pointer as *mut libc::c_void);
    wl_list_remove(&mut (*relative_pointer).link);
    wl_list_remove(&mut (*relative_pointer).seat_destroy.link);
    wl_list_remove(&mut (*relative_pointer).pointer_destroy.link);
    wl_resource_set_user_data((*relative_pointer).resource,
                              0 as *mut libc::c_void);
    free(relative_pointer as *mut libc::c_void);
}
unsafe extern "C" fn relative_pointer_v1_handle_resource_destroy(mut resource:
                                                                     *mut wl_resource) {
    let mut relative_pointer: *mut wlr_relative_pointer_v1 =
        wlr_relative_pointer_v1_from_resource(resource);
    if relative_pointer.is_null() { return }
    relative_pointer_destroy(relative_pointer);
}
unsafe extern "C" fn relative_pointer_v1_handle_destroy(mut client:
                                                            *mut wl_client,
                                                        mut resource:
                                                            *mut wl_resource) {
    let mut relative_pointer: *mut wlr_relative_pointer_v1 =
        wlr_relative_pointer_v1_from_resource(resource);
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] relative_pointer_v1 %p released by client %p\x00" as
                 *const u8 as *const libc::c_char,
             b"../types/wlr_relative_pointer_v1.c\x00" as *const u8 as
                 *const libc::c_char, 66i32, relative_pointer, client);
    wl_resource_destroy(resource);
}
unsafe extern "C" fn relative_pointer_handle_seat_destroy(mut listener:
                                                              *mut wl_listener,
                                                          mut data:
                                                              *mut libc::c_void) {
    let mut relative_pointer: *mut wlr_relative_pointer_v1 =
        (listener as *mut libc::c_char).offset(-56) as
            *mut wlr_relative_pointer_v1;
    relative_pointer_destroy(relative_pointer);
}
unsafe extern "C" fn relative_pointer_handle_pointer_destroy(mut listener:
                                                                 *mut wl_listener,
                                                             mut data:
                                                                 *mut libc::c_void) {
    let mut relative_pointer: *mut wlr_relative_pointer_v1 =
        (listener as *mut libc::c_char).offset(-80) as
            *mut wlr_relative_pointer_v1;
    relative_pointer_destroy(relative_pointer);
}
/* *
 * relative_pointer_manager handler functions
 */
unsafe extern "C" fn relative_pointer_manager_v1_handle_destroy(mut client:
                                                                    *mut wl_client,
                                                                mut resource:
                                                                    *mut wl_resource) {
    wl_resource_destroy(resource);
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] relative_pointer_v1 manager unbound from client %p\x00"
                 as *const u8 as *const libc::c_char,
             b"../types/wlr_relative_pointer_v1.c\x00" as *const u8 as
                 *const libc::c_char, 96i32, client);
}
unsafe extern "C" fn relative_pointer_manager_v1_handle_get_relative_pointer(mut client:
                                                                                 *mut wl_client,
                                                                             mut resource:
                                                                                 *mut wl_resource,
                                                                             mut id:
                                                                                 uint32_t,
                                                                             mut pointer:
                                                                                 *mut wl_resource) {
    let mut seat_client: *mut wlr_seat_client =
        wlr_seat_client_from_pointer_resource(pointer);
    let mut relative_pointer: *mut wlr_relative_pointer_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_relative_pointer_v1>() as
                   libc::c_ulong) as *mut wlr_relative_pointer_v1;
    if relative_pointer.is_null() { wl_client_post_no_memory(client); return }
    let mut relative_pointer_resource: *mut wl_resource =
        wl_resource_create(client, &zwp_relative_pointer_v1_interface,
                           wl_resource_get_version(resource), id);
    if relative_pointer_resource.is_null() {
        free(relative_pointer as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    (*relative_pointer).resource = relative_pointer_resource;
    (*relative_pointer).seat = (*seat_client).seat;
    (*relative_pointer).pointer_resource = pointer;
    wl_signal_init(&mut (*relative_pointer).events.destroy);
    wl_resource_set_implementation(relative_pointer_resource,
                                   &relative_pointer_v1_impl as
                                       *const zwp_relative_pointer_v1_interface
                                       as *const libc::c_void,
                                   relative_pointer as *mut libc::c_void,
                                   Some(relative_pointer_v1_handle_resource_destroy
                                            as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    let mut manager: *mut wlr_relative_pointer_manager_v1 =
        relative_pointer_manager_from_resource(resource);
    wl_list_insert(&mut (*manager).relative_pointers,
                   &mut (*relative_pointer).link);
    wl_signal_add(&mut (*(*relative_pointer).seat).events.destroy,
                  &mut (*relative_pointer).seat_destroy);
    (*relative_pointer).seat_destroy.notify =
        Some(relative_pointer_handle_seat_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_resource_add_destroy_listener((*relative_pointer).pointer_resource,
                                     &mut (*relative_pointer).pointer_destroy);
    (*relative_pointer).pointer_destroy.notify =
        Some(relative_pointer_handle_pointer_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wlr_signal_emit_safe(&mut (*manager).events.new_relative_pointer,
                         relative_pointer as *mut libc::c_void);
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] relative_pointer_v1 %p created for client %p\x00" as
                 *const u8 as *const libc::c_char,
             b"../types/wlr_relative_pointer_v1.c\x00" as *const u8 as
                 *const libc::c_char, 146i32, relative_pointer, client);
}
unsafe extern "C" fn relative_pointer_manager_v1_bind(mut wl_client:
                                                          *mut wl_client,
                                                      mut data:
                                                          *mut libc::c_void,
                                                      mut version: uint32_t,
                                                      mut id: uint32_t) {
    let mut manager: *mut wlr_relative_pointer_manager_v1 =
        data as *mut wlr_relative_pointer_manager_v1;
    let mut manager_resource: *mut wl_resource =
        wl_resource_create(wl_client,
                           &zwp_relative_pointer_manager_v1_interface,
                           version as libc::c_int, id);
    if manager_resource.is_null() {
        wl_client_post_no_memory(wl_client);
        return
    }
    wl_resource_set_implementation(manager_resource,
                                   &relative_pointer_manager_v1_impl as
                                       *const zwp_relative_pointer_manager_v1_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void, None);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_relative_pointer_manager_v1 =
        (listener as *mut libc::c_char).offset(-56) as
            *mut wlr_relative_pointer_manager_v1;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy_listener.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
/* *
 * Implementations
 */
static mut relative_pointer_manager_v1_impl:
       zwp_relative_pointer_manager_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_relative_pointer_manager_v1_interface{destroy:
                                                              Some(relative_pointer_manager_v1_handle_destroy
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),
                                                          get_relative_pointer:
                                                              Some(relative_pointer_manager_v1_handle_get_relative_pointer
                                                                       as
                                                                       unsafe extern "C" fn(_:
                                                                                                *mut wl_client,
                                                                                            _:
                                                                                                *mut wl_resource,
                                                                                            _:
                                                                                                uint32_t,
                                                                                            _:
                                                                                                *mut wl_resource)
                                                                           ->
                                                                               ()),};
            init
        }
    };
static mut relative_pointer_v1_impl: zwp_relative_pointer_v1_interface =
    unsafe {
        {
            let mut init =
                zwp_relative_pointer_v1_interface{destroy:
                                                      Some(relative_pointer_v1_handle_destroy
                                                               as
                                                               unsafe extern "C" fn(_:
                                                                                        *mut wl_client,
                                                                                    _:
                                                                                        *mut wl_resource)
                                                                   -> ()),};
            init
        }
    };
/* *
 * Public functions
 */
#[no_mangle]
pub unsafe extern "C" fn wlr_relative_pointer_manager_v1_create(mut display:
                                                                    *mut wl_display)
 -> *mut wlr_relative_pointer_manager_v1 {
    let mut manager: *mut wlr_relative_pointer_manager_v1 =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_relative_pointer_manager_v1>() as
                   libc::c_ulong) as *mut wlr_relative_pointer_manager_v1;
    if manager.is_null() { return 0 as *mut wlr_relative_pointer_manager_v1 }
    wl_list_init(&mut (*manager).relative_pointers);
    (*manager).global =
        wl_global_create(display, &zwp_relative_pointer_manager_v1_interface,
                         1i32, manager as *mut libc::c_void,
                         Some(relative_pointer_manager_v1_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_relative_pointer_manager_v1
    }
    wl_signal_init(&mut (*manager).events.destroy);
    wl_signal_init(&mut (*manager).events.new_relative_pointer);
    (*manager).display_destroy_listener.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display,
                                    &mut (*manager).display_destroy_listener);
    return manager;
}
/* *
 * Send a relative motion event to the seat. Time is given in microseconds
 * (unlike wl_pointer which uses milliseconds).
 */
#[no_mangle]
pub unsafe extern "C" fn wlr_relative_pointer_manager_v1_send_relative_motion(mut manager:
                                                                                  *mut wlr_relative_pointer_manager_v1,
                                                                              mut seat:
                                                                                  *mut wlr_seat,
                                                                              mut time_usec:
                                                                                  uint64_t,
                                                                              mut dx:
                                                                                  libc::c_double,
                                                                              mut dy:
                                                                                  libc::c_double,
                                                                              mut dx_unaccel:
                                                                                  libc::c_double,
                                                                              mut dy_unaccel:
                                                                                  libc::c_double) {
    let mut focused: *mut wlr_seat_client =
        (*seat).pointer_state.focused_client;
    if focused.is_null() { return }
    let mut pointer: *mut wlr_relative_pointer_v1 =
        0 as *mut wlr_relative_pointer_v1;
    pointer =
        ((*manager).relative_pointers.next as *mut libc::c_char).offset(-24)
            as *mut wlr_relative_pointer_v1;
    while &mut (*pointer).link as *mut wl_list !=
              &mut (*manager).relative_pointers as *mut wl_list {
        let mut seat_client: *mut wlr_seat_client =
            wlr_seat_client_from_pointer_resource((*pointer).pointer_resource);
        if !(seat != (*pointer).seat || focused != seat_client) {
            zwp_relative_pointer_v1_send_relative_motion((*pointer).resource,
                                                         (time_usec >> 32i32)
                                                             as uint32_t,
                                                         time_usec as
                                                             uint32_t,
                                                         wl_fixed_from_double(dx),
                                                         wl_fixed_from_double(dy),
                                                         wl_fixed_from_double(dx_unaccel),
                                                         wl_fixed_from_double(dy_unaccel));
        }
        pointer =
            ((*pointer).link.next as *mut libc::c_char).offset(-24) as
                *mut wlr_relative_pointer_v1
    };
}
