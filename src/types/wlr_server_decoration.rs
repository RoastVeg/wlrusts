use libc;
extern "C" {
    pub type wl_display;
    /* Generated by wayland-scanner 1.17.0 */
    pub type wl_client;
    pub type wl_global;
    pub type wlr_texture;
    /*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
    /* *
 * A client buffer.
 */
    /* *
	 * The buffer resource, if any. Will be NULL if the client destroys it.
	 */
    /* *
	 * The buffer's texture, if any. A buffer will not have a texture if the
	 * client destroys the buffer before it has been released.
	 */
    pub type wlr_renderer;
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    #[no_mangle]
    fn free(__ptr: *mut libc::c_void);
    #[no_mangle]
    fn wl_list_init(list: *mut wl_list);
    #[no_mangle]
    fn wl_list_insert(list: *mut wl_list, elm: *mut wl_list);
    #[no_mangle]
    fn wl_list_remove(elm: *mut wl_list);
    #[no_mangle]
    fn wl_display_add_destroy_listener(display: *mut wl_display,
                                       listener: *mut wl_listener);
    #[no_mangle]
    fn wl_resource_instance_of(resource: *mut wl_resource,
                               interface: *const wl_interface,
                               implementation: *const libc::c_void)
     -> libc::c_int;
    #[no_mangle]
    fn wl_resource_get_version(resource: *mut wl_resource) -> libc::c_int;
    #[no_mangle]
    fn wl_resource_get_user_data(resource: *mut wl_resource)
     -> *mut libc::c_void;
    #[no_mangle]
    fn wl_resource_set_user_data(resource: *mut wl_resource,
                                 data: *mut libc::c_void);
    #[no_mangle]
    fn wl_resource_from_link(resource: *mut wl_list) -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_get_link(resource: *mut wl_resource) -> *mut wl_list;
    #[no_mangle]
    fn wl_resource_destroy(resource: *mut wl_resource);
    #[no_mangle]
    fn wl_resource_set_implementation(resource: *mut wl_resource,
                                      implementation: *const libc::c_void,
                                      data: *mut libc::c_void,
                                      destroy: wl_resource_destroy_func_t);
    #[no_mangle]
    fn wl_resource_create(client: *mut wl_client,
                          interface: *const wl_interface,
                          version: libc::c_int, id: uint32_t)
     -> *mut wl_resource;
    #[no_mangle]
    fn wl_resource_post_event(resource: *mut wl_resource, opcode: uint32_t,
                              _: ...);
    #[no_mangle]
    fn wl_client_post_no_memory(client: *mut wl_client);
    #[no_mangle]
    fn wl_global_destroy(global: *mut wl_global);
    #[no_mangle]
    fn wl_global_create(display: *mut wl_display,
                        interface: *const wl_interface, version: libc::c_int,
                        data: *mut libc::c_void, bind: wl_global_bind_func_t)
     -> *mut wl_global;
    #[no_mangle]
    fn wlr_surface_from_resource(resource: *mut wl_resource)
     -> *mut wlr_surface;
    #[no_mangle]
    fn _wlr_log(verbosity: wlr_log_importance, format: *const libc::c_char,
                _: ...);
    /* *
 * @page page_iface_org_kde_kwin_server_decoration_manager org_kde_kwin_server_decoration_manager
 * @section page_iface_org_kde_kwin_server_decoration_manager_desc Description
 *
 * This interface allows to coordinate whether the server should create
 * a server-side window decoration around a wl_surface representing a
 * shell surface (wl_shell_surface or similar). By announcing support
 * for this interface the server indicates that it supports server
 * side decorations.
 * @section page_iface_org_kde_kwin_server_decoration_manager_api API
 * See @ref iface_org_kde_kwin_server_decoration_manager.
 */
/* *
 * @defgroup iface_org_kde_kwin_server_decoration_manager The org_kde_kwin_server_decoration_manager interface
 *
 * This interface allows to coordinate whether the server should create
 * a server-side window decoration around a wl_surface representing a
 * shell surface (wl_shell_surface or similar). By announcing support
 * for this interface the server indicates that it supports server
 * side decorations.
 */
    #[no_mangle]
    static org_kde_kwin_server_decoration_manager_interface: wl_interface;
    /* *
 * @page page_iface_org_kde_kwin_server_decoration org_kde_kwin_server_decoration
 * @section page_iface_org_kde_kwin_server_decoration_api API
 * See @ref iface_org_kde_kwin_server_decoration.
 */
/* *
 * @defgroup iface_org_kde_kwin_server_decoration The org_kde_kwin_server_decoration interface
 */
    #[no_mangle]
    static org_kde_kwin_server_decoration_interface: wl_interface;
    #[no_mangle]
    fn wlr_signal_emit_safe(signal: *mut wl_signal, data: *mut libc::c_void);
}
pub type size_t = libc::c_ulong;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_object {
    pub interface: *const wl_interface,
    pub implementation: *const libc::c_void,
    pub id: uint32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type wl_global_bind_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_client, _: *mut libc::c_void,
                                _: uint32_t, _: uint32_t) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_resource {
    pub object: wl_object,
    pub destroy: wl_resource_destroy_func_t,
    pub link: wl_list,
    pub destroy_signal: wl_signal,
    pub client: *mut wl_client,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_signal {
    pub listener_list: wl_list,
}
pub type wl_resource_destroy_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_resource) -> ()>;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_server_decoration_manager {
    pub global: *mut wl_global,
    pub resources: wl_list,
    pub decorations: wl_list,
    pub default_mode: uint32_t,
    pub display_destroy: wl_listener,
    pub events: C2RustUnnamed,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub new_decoration: wl_signal,
    pub destroy: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_server_decoration {
    pub resource: *mut wl_resource,
    pub surface: *mut wlr_surface,
    pub link: wl_list,
    pub mode: uint32_t,
    pub events: C2RustUnnamed_0,
    pub surface_destroy_listener: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub destroy: wl_signal,
    pub mode: wl_signal,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface {
    pub resource: *mut wl_resource,
    pub renderer: *mut wlr_renderer,
    pub buffer: *mut wlr_buffer,
    pub sx: libc::c_int,
    pub sy: libc::c_int,
    pub buffer_damage: pixman_region32_t,
    pub opaque_region: pixman_region32_t,
    pub input_region: pixman_region32_t,
    pub current: wlr_surface_state,
    pub pending: wlr_surface_state,
    pub previous: wlr_surface_state,
    pub role: *const wlr_surface_role,
    pub role_data: *mut libc::c_void,
    pub events: C2RustUnnamed_1,
    pub subsurfaces: wl_list,
    pub subsurface_pending_list: wl_list,
    pub renderer_destroy: wl_listener,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub commit: wl_signal,
    pub new_subsurface: wl_signal,
    pub destroy: wl_signal,
}
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
// enum wlr_surface_state_field
// relative to previous position
// clipped to bounds
// wl_resource
// in surface-local coordinates
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_role {
    pub name: *const libc::c_char,
    pub commit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
    pub precommit: Option<unsafe extern "C" fn(_: *mut wlr_surface) -> ()>,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_surface_state {
    pub committed: uint32_t,
    pub buffer_resource: *mut wl_resource,
    pub dx: int32_t,
    pub dy: int32_t,
    pub surface_damage: pixman_region32_t,
    pub buffer_damage: pixman_region32_t,
    pub opaque: pixman_region32_t,
    pub input: pixman_region32_t,
    pub transform: wl_output_transform,
    pub scale: int32_t,
    pub frame_callback_list: wl_list,
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub buffer_width: libc::c_int,
    pub buffer_height: libc::c_int,
    pub buffer_destroy: wl_listener,
}
pub type wl_output_transform = libc::c_uint;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_270: wl_output_transform = 7;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_180: wl_output_transform = 6;
pub const WL_OUTPUT_TRANSFORM_FLIPPED_90: wl_output_transform = 5;
pub const WL_OUTPUT_TRANSFORM_FLIPPED: wl_output_transform = 4;
pub const WL_OUTPUT_TRANSFORM_270: wl_output_transform = 3;
pub const WL_OUTPUT_TRANSFORM_180: wl_output_transform = 2;
pub const WL_OUTPUT_TRANSFORM_90: wl_output_transform = 1;
pub const WL_OUTPUT_TRANSFORM_NORMAL: wl_output_transform = 0;
pub type pixman_region32_t = pixman_region32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32 {
    pub extents: pixman_box32_t,
    pub data: *mut pixman_region32_data_t,
}
pub type pixman_region32_data_t = pixman_region32_data;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_region32_data {
    pub size: libc::c_long,
    pub numRects: libc::c_long,
}
pub type pixman_box32_t = pixman_box32;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct pixman_box32 {
    pub x1: int32_t,
    pub y1: int32_t,
    pub x2: int32_t,
    pub y2: int32_t,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_buffer {
    pub resource: *mut wl_resource,
    pub texture: *mut wlr_texture,
    pub released: bool,
    pub n_refs: size_t,
    pub resource_destroy: wl_listener,
}
/* *
	 * Undecorated: The surface is not decorated at all, neither server nor client-side. An example is a popup surface which should not be decorated.
	 */
pub const ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_MODE_NONE:
          org_kde_kwin_server_decoration_manager_mode =
    0;
/* ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_MODE_ENUM */
/* *
 * @ingroup iface_org_kde_kwin_server_decoration_manager
 * @struct org_kde_kwin_server_decoration_manager_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct org_kde_kwin_server_decoration_manager_interface {
    pub create: Option<unsafe extern "C" fn(_: *mut wl_client,
                                            _: *mut wl_resource, _: uint32_t,
                                            _: *mut wl_resource) -> ()>,
}
pub type wlr_log_importance = libc::c_uint;
pub const WLR_LOG_IMPORTANCE_LAST: wlr_log_importance = 4;
pub const WLR_DEBUG: wlr_log_importance = 3;
pub const WLR_INFO: wlr_log_importance = 2;
pub const WLR_ERROR: wlr_log_importance = 1;
pub const WLR_SILENT: wlr_log_importance = 0;
/* ORG_KDE_KWIN_SERVER_DECORATION_MODE_ENUM */
/* *
 * @ingroup iface_org_kde_kwin_server_decoration
 * @struct org_kde_kwin_server_decoration_interface
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct org_kde_kwin_server_decoration_interface {
    pub release: Option<unsafe extern "C" fn(_: *mut wl_client,
                                             _: *mut wl_resource) -> ()>,
    pub request_mode: Option<unsafe extern "C" fn(_: *mut wl_client,
                                                  _: *mut wl_resource,
                                                  _: uint32_t) -> ()>,
}
/* *
 * @ingroup iface_org_kde_kwin_server_decoration_manager
 * Possible values to use in request_mode and the event mode.
 */
pub type org_kde_kwin_server_decoration_manager_mode = libc::c_uint;
/* *
	 * Server-side decoration: The server embeds the surface into a decoration frame.
	 */
pub const ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_MODE_SERVER:
          org_kde_kwin_server_decoration_manager_mode =
    2;
/* *
	 * Client-side decoration: The decoration is part of the surface and the client.
	 */
pub const ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_MODE_CLIENT:
          org_kde_kwin_server_decoration_manager_mode =
    1;
#[inline]
unsafe extern "C" fn wl_signal_add(mut signal: *mut wl_signal,
                                   mut listener: *mut wl_listener) {
    wl_list_insert((*signal).listener_list.prev, &mut (*listener).link);
}
#[inline]
unsafe extern "C" fn wl_signal_init(mut signal: *mut wl_signal) {
    wl_list_init(&mut (*signal).listener_list);
}
/* *
 * @ingroup iface_org_kde_kwin_server_decoration_manager
 */
/* *
 * @ingroup iface_org_kde_kwin_server_decoration_manager
 */
/* *
 * @ingroup iface_org_kde_kwin_server_decoration_manager
 * Sends an default_mode event to the client owning the resource.
 * @param resource_ The client's resource
 * @param mode The default decoration mode applied to newly created server decorations.
 */
#[inline]
unsafe extern "C" fn org_kde_kwin_server_decoration_manager_send_default_mode(mut resource_:
                                                                                  *mut wl_resource,
                                                                              mut mode:
                                                                                  uint32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, mode);
}
/* *
 * @ingroup iface_org_kde_kwin_server_decoration
 */
/* *
 * @ingroup iface_org_kde_kwin_server_decoration
 */
/* *
 * @ingroup iface_org_kde_kwin_server_decoration
 */
/* *
 * @ingroup iface_org_kde_kwin_server_decoration
 * Sends an mode event to the client owning the resource.
 * @param resource_ The client's resource
 * @param mode The decoration mode applied to the surface by the server.
 */
#[inline]
unsafe extern "C" fn org_kde_kwin_server_decoration_send_mode(mut resource_:
                                                                  *mut wl_resource,
                                                              mut mode:
                                                                  uint32_t) {
    wl_resource_post_event(resource_, 0i32 as uint32_t, mode);
}
unsafe extern "C" fn decoration_from_resource(mut resource: *mut wl_resource)
 -> *mut wlr_server_decoration {
    if wl_resource_instance_of(resource,
                               &org_kde_kwin_server_decoration_interface,
                               &server_decoration_impl as
                                   *const org_kde_kwin_server_decoration_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &org_kde_kwin_server_decoration_interface, &server_decoration_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_server_decoration.c\x00" as *const u8 as
                          *const libc::c_char, 15i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 77],
                                                &[libc::c_char; 77]>(b"struct wlr_server_decoration *decoration_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as *mut wlr_server_decoration;
}
unsafe extern "C" fn server_decoration_handle_release(mut client:
                                                          *mut wl_client,
                                                      mut resource:
                                                          *mut wl_resource) {
    wl_resource_destroy(resource);
}
unsafe extern "C" fn server_decoration_handle_request_mode(mut client:
                                                               *mut wl_client,
                                                           mut resource:
                                                               *mut wl_resource,
                                                           mut mode:
                                                               uint32_t) {
    let mut decoration: *mut wlr_server_decoration =
        decoration_from_resource(resource);
    if (*decoration).mode == mode { return }
    (*decoration).mode = mode;
    wlr_signal_emit_safe(&mut (*decoration).events.mode,
                         decoration as *mut libc::c_void);
    org_kde_kwin_server_decoration_send_mode((*decoration).resource,
                                             (*decoration).mode);
}
unsafe extern "C" fn server_decoration_destroy(mut decoration:
                                                   *mut wlr_server_decoration) {
    wlr_signal_emit_safe(&mut (*decoration).events.destroy,
                         decoration as *mut libc::c_void);
    wl_list_remove(&mut (*decoration).surface_destroy_listener.link);
    wl_resource_set_user_data((*decoration).resource, 0 as *mut libc::c_void);
    wl_list_remove(&mut (*decoration).link);
    free(decoration as *mut libc::c_void);
}
unsafe extern "C" fn server_decoration_destroy_resource(mut resource:
                                                            *mut wl_resource) {
    let mut decoration: *mut wlr_server_decoration =
        decoration_from_resource(resource);
    if !decoration.is_null() { server_decoration_destroy(decoration); };
}
unsafe extern "C" fn server_decoration_handle_surface_destroy(mut listener:
                                                                  *mut wl_listener,
                                                              mut data:
                                                                  *mut libc::c_void) {
    let mut decoration: *mut wlr_server_decoration =
        (listener as *mut libc::c_char).offset(-72) as
            *mut wlr_server_decoration;
    server_decoration_destroy(decoration);
}
static mut server_decoration_impl: org_kde_kwin_server_decoration_interface =
    unsafe {
        {
            let mut init =
                org_kde_kwin_server_decoration_interface{release:
                                                             Some(server_decoration_handle_release
                                                                      as
                                                                      unsafe extern "C" fn(_:
                                                                                               *mut wl_client,
                                                                                           _:
                                                                                               *mut wl_resource)
                                                                          ->
                                                                              ()),
                                                         request_mode:
                                                             Some(server_decoration_handle_request_mode
                                                                      as
                                                                      unsafe extern "C" fn(_:
                                                                                               *mut wl_client,
                                                                                           _:
                                                                                               *mut wl_resource,
                                                                                           _:
                                                                                               uint32_t)
                                                                          ->
                                                                              ()),};
            init
        }
    };
unsafe extern "C" fn manager_from_resource(mut resource: *mut wl_resource)
 -> *mut wlr_server_decoration_manager {
    if wl_resource_instance_of(resource,
                               &org_kde_kwin_server_decoration_manager_interface,
                               &server_decoration_manager_impl as
                                   *const org_kde_kwin_server_decoration_manager_interface
                                   as *const libc::c_void) != 0 {
    } else {
        __assert_fail(b"wl_resource_instance_of(resource, &org_kde_kwin_server_decoration_manager_interface, &server_decoration_manager_impl)\x00"
                          as *const u8 as *const libc::c_char,
                      b"../types/wlr_server_decoration.c\x00" as *const u8 as
                          *const libc::c_char, 74i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 82],
                                                &[libc::c_char; 82]>(b"struct wlr_server_decoration_manager *manager_from_resource(struct wl_resource *)\x00")).as_ptr());
    };
    return wl_resource_get_user_data(resource) as
               *mut wlr_server_decoration_manager;
}
unsafe extern "C" fn server_decoration_manager_handle_create(mut client:
                                                                 *mut wl_client,
                                                             mut manager_resource:
                                                                 *mut wl_resource,
                                                             mut id: uint32_t,
                                                             mut surface_resource:
                                                                 *mut wl_resource) {
    let mut manager: *mut wlr_server_decoration_manager =
        manager_from_resource(manager_resource);
    let mut surface: *mut wlr_surface =
        wlr_surface_from_resource(surface_resource);
    let mut decoration: *mut wlr_server_decoration =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_server_decoration>() as
                   libc::c_ulong) as *mut wlr_server_decoration;
    if decoration.is_null() { wl_client_post_no_memory(client); return }
    (*decoration).surface = surface;
    (*decoration).mode = (*manager).default_mode;
    let mut version: libc::c_int = wl_resource_get_version(manager_resource);
    (*decoration).resource =
        wl_resource_create(client, &org_kde_kwin_server_decoration_interface,
                           version, id);
    if (*decoration).resource.is_null() {
        free(decoration as *mut libc::c_void);
        wl_client_post_no_memory(client);
        return
    }
    wl_resource_set_implementation((*decoration).resource,
                                   &server_decoration_impl as
                                       *const org_kde_kwin_server_decoration_interface
                                       as *const libc::c_void,
                                   decoration as *mut libc::c_void,
                                   Some(server_decoration_destroy_resource as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    _wlr_log(WLR_DEBUG,
             b"[%s:%d] new server_decoration %p (res %p)\x00" as *const u8 as
                 *const libc::c_char,
             b"../types/wlr_server_decoration.c\x00" as *const u8 as
                 *const libc::c_char, 107i32, decoration,
             (*decoration).resource);
    wl_signal_init(&mut (*decoration).events.destroy);
    wl_signal_init(&mut (*decoration).events.mode);
    wl_signal_add(&mut (*surface).events.destroy,
                  &mut (*decoration).surface_destroy_listener);
    (*decoration).surface_destroy_listener.notify =
        Some(server_decoration_handle_surface_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_list_insert(&mut (*manager).decorations, &mut (*decoration).link);
    org_kde_kwin_server_decoration_send_mode((*decoration).resource,
                                             (*decoration).mode);
    wlr_signal_emit_safe(&mut (*manager).events.new_decoration,
                         decoration as *mut libc::c_void);
}
static mut server_decoration_manager_impl:
       org_kde_kwin_server_decoration_manager_interface =
    unsafe {
        {
            let mut init =
                org_kde_kwin_server_decoration_manager_interface{create:
                                                                     Some(server_decoration_manager_handle_create
                                                                              as
                                                                              unsafe extern "C" fn(_:
                                                                                                       *mut wl_client,
                                                                                                   _:
                                                                                                       *mut wl_resource,
                                                                                                   _:
                                                                                                       uint32_t,
                                                                                                   _:
                                                                                                       *mut wl_resource)
                                                                                  ->
                                                                                      ()),};
            init
        }
    };
#[no_mangle]
pub unsafe extern "C" fn wlr_server_decoration_manager_set_default_mode(mut manager:
                                                                            *mut wlr_server_decoration_manager,
                                                                        mut default_mode:
                                                                            uint32_t) {
    (*manager).default_mode = default_mode;
    let mut resource: *mut wl_resource = 0 as *mut wl_resource;
    resource = 0 as *mut wl_resource;
    resource = wl_resource_from_link((*manager).resources.next);
    while wl_resource_get_link(resource) !=
              &mut (*manager).resources as *mut wl_list {
        org_kde_kwin_server_decoration_manager_send_default_mode(resource,
                                                                 (*manager).default_mode);
        resource =
            wl_resource_from_link((*wl_resource_get_link(resource)).next)
    };
}
unsafe extern "C" fn server_decoration_manager_destroy_resource(mut resource:
                                                                    *mut wl_resource) {
    wl_list_remove(wl_resource_get_link(resource));
}
unsafe extern "C" fn server_decoration_manager_bind(mut client:
                                                        *mut wl_client,
                                                    mut data:
                                                        *mut libc::c_void,
                                                    mut version: uint32_t,
                                                    mut id: uint32_t) {
    let mut manager: *mut wlr_server_decoration_manager =
        data as *mut wlr_server_decoration_manager;
    if !client.is_null() && !manager.is_null() {
    } else {
        __assert_fail(b"client && manager\x00" as *const u8 as
                          *const libc::c_char,
                      b"../types/wlr_server_decoration.c\x00" as *const u8 as
                          *const libc::c_char, 149i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 84],
                                                &[libc::c_char; 84]>(b"void server_decoration_manager_bind(struct wl_client *, void *, uint32_t, uint32_t)\x00")).as_ptr());
    };
    let mut resource: *mut wl_resource =
        wl_resource_create(client,
                           &org_kde_kwin_server_decoration_manager_interface,
                           version as libc::c_int, id);
    if resource.is_null() { wl_client_post_no_memory(client); return }
    wl_resource_set_implementation(resource,
                                   &server_decoration_manager_impl as
                                       *const org_kde_kwin_server_decoration_manager_interface
                                       as *const libc::c_void,
                                   manager as *mut libc::c_void,
                                   Some(server_decoration_manager_destroy_resource
                                            as
                                            unsafe extern "C" fn(_:
                                                                     *mut wl_resource)
                                                -> ()));
    wl_list_insert(&mut (*manager).resources, wl_resource_get_link(resource));
    org_kde_kwin_server_decoration_manager_send_default_mode(resource,
                                                             (*manager).default_mode);
}
unsafe extern "C" fn handle_display_destroy(mut listener: *mut wl_listener,
                                            mut data: *mut libc::c_void) {
    let mut manager: *mut wlr_server_decoration_manager =
        (listener as *mut libc::c_char).offset(-48) as
            *mut wlr_server_decoration_manager;
    wlr_signal_emit_safe(&mut (*manager).events.destroy,
                         manager as *mut libc::c_void);
    wl_list_remove(&mut (*manager).display_destroy.link);
    wl_global_destroy((*manager).global);
    free(manager as *mut libc::c_void);
}
/*
 * This protocol is obsolete and will be removed in a future version. The
 * recommended replacement is xdg-decoration.
 */
/*
 * This an unstable interface of wlroots. No guarantees are made regarding the
 * future consistency of this API.
 */
/* *
 * Possible values to use in request_mode and the event mode. Same as
 * org_kde_kwin_server_decoration_manager_mode.
 */
/* *
	 * Undecorated: The surface is not decorated at all, neither server nor
	 * client-side. An example is a popup surface which should not be
	 * decorated.
	 */
/* *
	 * Client-side decoration: The decoration is part of the surface and the
	 * client.
	 */
/* *
	 * Server-side decoration: The server embeds the surface into a decoration
	 * frame.
	 */
/* *
 * A decoration negotiation interface which implements the KDE protocol.
 */
// wl_resource_get_link
// wlr_server_decoration::link
// enum wlr_server_decoration_manager_mode
// enum wlr_server_decoration_manager_mode
#[no_mangle]
pub unsafe extern "C" fn wlr_server_decoration_manager_create(mut display:
                                                                  *mut wl_display)
 -> *mut wlr_server_decoration_manager {
    let mut manager: *mut wlr_server_decoration_manager =
        calloc(1i32 as libc::c_ulong,
               ::std::mem::size_of::<wlr_server_decoration_manager>() as
                   libc::c_ulong) as *mut wlr_server_decoration_manager;
    if manager.is_null() { return 0 as *mut wlr_server_decoration_manager }
    (*manager).global =
        wl_global_create(display,
                         &org_kde_kwin_server_decoration_manager_interface,
                         1i32, manager as *mut libc::c_void,
                         Some(server_decoration_manager_bind as
                                  unsafe extern "C" fn(_: *mut wl_client,
                                                       _: *mut libc::c_void,
                                                       _: uint32_t,
                                                       _: uint32_t) -> ()));
    if (*manager).global.is_null() {
        free(manager as *mut libc::c_void);
        return 0 as *mut wlr_server_decoration_manager
    }
    (*manager).default_mode =
        ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_MODE_NONE as libc::c_int as
            uint32_t;
    wl_list_init(&mut (*manager).resources);
    wl_list_init(&mut (*manager).decorations);
    wl_signal_init(&mut (*manager).events.new_decoration);
    wl_signal_init(&mut (*manager).events.destroy);
    (*manager).display_destroy.notify =
        Some(handle_display_destroy as
                 unsafe extern "C" fn(_: *mut wl_listener,
                                      _: *mut libc::c_void) -> ());
    wl_display_add_destroy_listener(display, &mut (*manager).display_destroy);
    return manager;
}
