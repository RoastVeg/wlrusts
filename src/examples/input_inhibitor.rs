use libc;
extern "C" {
    pub type wl_proxy;
    pub type wl_display;
    pub type wl_compositor;
    pub type wl_keyboard;
    pub type wl_registry;
    pub type wl_seat;
    pub type wl_surface;
    pub type xdg_wm_base;
    /* Generated by wayland-scanner 1.17.0 */
    /* *
 * @page page_wlr_input_inhibit_unstable_v1 The wlr_input_inhibit_unstable_v1 protocol
 * @section page_ifaces_wlr_input_inhibit_unstable_v1 Interfaces
 * - @subpage page_iface_zwlr_input_inhibit_manager_v1 - inhibits input events to other clients
 * - @subpage page_iface_zwlr_input_inhibitor_v1 - inhibits input to other clients
 * @section page_copyright_wlr_input_inhibit_unstable_v1 Copyright
 * <pre>
 *
 * Copyright Â© 2018 Drew DeVault
 *
 * Permission to use, copy, modify, distribute, and sell this
 * software and its documentation for any purpose is hereby granted
 * without fee, provided that the above copyright notice appear in
 * all copies and that both that copyright notice and this permission
 * notice appear in supporting documentation, and that the name of
 * the copyright holders not be used in advertising or publicity
 * pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 * </pre>
 */
    pub type zwlr_input_inhibit_manager_v1;
    pub type zwlr_input_inhibitor_v1;
    pub type wl_egl_window;
    pub type xdg_surface;
    pub type xdg_toplevel;
    pub type wlr_egl_surface;
    #[no_mangle]
    fn glClear(mask: GLbitfield);
    #[no_mangle]
    fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat,
                    alpha: GLfloat);
    #[no_mangle]
    fn glViewport(x: GLint, y: GLint, width_0: GLsizei, height_0: GLsizei);
    #[no_mangle]
    fn __assert_fail(__assertion: *const libc::c_char,
                     __file: *const libc::c_char, __line: libc::c_uint,
                     __function: *const libc::c_char) -> !;
    #[no_mangle]
    fn exit(_: libc::c_int) -> !;
    #[no_mangle]
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    #[no_mangle]
    fn wl_proxy_marshal(p: *mut wl_proxy, opcode: uint32_t, _: ...);
    #[no_mangle]
    fn wl_proxy_marshal_constructor(proxy: *mut wl_proxy, opcode: uint32_t,
                                    interface: *const wl_interface, _: ...)
     -> *mut wl_proxy;
    #[no_mangle]
    fn wl_proxy_marshal_constructor_versioned(proxy: *mut wl_proxy,
                                              opcode: uint32_t,
                                              interface: *const wl_interface,
                                              version: uint32_t, _: ...)
     -> *mut wl_proxy;
    #[no_mangle]
    fn wl_proxy_add_listener(proxy: *mut wl_proxy,
                             implementation:
                                 *mut Option<unsafe extern "C" fn() -> ()>,
                             data: *mut libc::c_void) -> libc::c_int;
    #[no_mangle]
    fn wl_display_connect(name: *const libc::c_char) -> *mut wl_display;
    #[no_mangle]
    fn wl_display_dispatch(display: *mut wl_display) -> libc::c_int;
    #[no_mangle]
    fn wl_display_roundtrip(display: *mut wl_display) -> libc::c_int;
    #[no_mangle]
    static wl_registry_interface: wl_interface;
    #[no_mangle]
    static wl_compositor_interface: wl_interface;
    #[no_mangle]
    static wl_surface_interface: wl_interface;
    #[no_mangle]
    static wl_seat_interface: wl_interface;
    #[no_mangle]
    static wl_keyboard_interface: wl_interface;
    #[no_mangle]
    fn wl_egl_window_create(surface: *mut wl_surface, width_0: libc::c_int,
                            height_0: libc::c_int) -> *mut wl_egl_window;
    #[no_mangle]
    fn wl_egl_window_resize(egl_window_0: *mut wl_egl_window,
                            width_0: libc::c_int, height_0: libc::c_int,
                            dx: libc::c_int, dy: libc::c_int);
    #[no_mangle]
    fn eglSwapBuffers(dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean;
    #[no_mangle]
    fn eglMakeCurrent(dpy: EGLDisplay, draw: EGLSurface, read: EGLSurface,
                      ctx: EGLContext) -> EGLBoolean;
    #[no_mangle]
    fn wlr_egl_create_surface(egl_0: *mut wlr_egl, window: *mut libc::c_void)
     -> EGLSurface;
    #[no_mangle]
    fn wlr_egl_init(egl_0: *mut wlr_egl, platform: EGLenum,
                    remote_display: *mut libc::c_void,
                    config_attribs: *mut EGLint, visual_id: EGLint) -> bool;
    /* *
 * @page page_iface_zwlr_input_inhibit_manager_v1 zwlr_input_inhibit_manager_v1
 * @section page_iface_zwlr_input_inhibit_manager_v1_desc Description
 *
 * Clients can use this interface to prevent input events from being sent to
 * any surfaces but its own, which is useful for example in lock screen
 * software. It is assumed that access to this interface will be locked down
 * to whitelisted clients by the compositor.
 * @section page_iface_zwlr_input_inhibit_manager_v1_api API
 * See @ref iface_zwlr_input_inhibit_manager_v1.
 */
/* *
 * @defgroup iface_zwlr_input_inhibit_manager_v1 The zwlr_input_inhibit_manager_v1 interface
 *
 * Clients can use this interface to prevent input events from being sent to
 * any surfaces but its own, which is useful for example in lock screen
 * software. It is assumed that access to this interface will be locked down
 * to whitelisted clients by the compositor.
 */
    #[no_mangle]
    static zwlr_input_inhibit_manager_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwlr_input_inhibitor_v1 zwlr_input_inhibitor_v1
 * @section page_iface_zwlr_input_inhibitor_v1_desc Description
 *
 * While this resource exists, input to clients other than the owner of the
 * inhibitor resource will not receive input events. The client that owns
 * this resource will receive all input events normally. The compositor will
 * also disable all of its own input processing (such as keyboard shortcuts)
 * while the inhibitor is active.
 *
 * The compositor may continue to send input events to selected clients,
 * such as an on-screen keyboard (via the input-method protocol).
 * @section page_iface_zwlr_input_inhibitor_v1_api API
 * See @ref iface_zwlr_input_inhibitor_v1.
 */
/* *
 * @defgroup iface_zwlr_input_inhibitor_v1 The zwlr_input_inhibitor_v1 interface
 *
 * While this resource exists, input to clients other than the owner of the
 * inhibitor resource will not receive input events. The client that owns
 * this resource will receive all input events normally. The compositor will
 * also disable all of its own input processing (such as keyboard shortcuts)
 * while the inhibitor is active.
 *
 * The compositor may continue to send input events to selected clients,
 * such as an on-screen keyboard (via the input-method protocol).
 */
    #[no_mangle]
    static zwlr_input_inhibitor_v1_interface: wl_interface;
    /* *
 * @page page_iface_xdg_wm_base xdg_wm_base
 * @section page_iface_xdg_wm_base_desc Description
 *
 * The xdg_wm_base interface is exposed as a global object enabling clients
 * to turn their wl_surfaces into windows in a desktop environment. It
 * defines the basic functionality needed for clients and the compositor to
 * create windows that can be dragged, resized, maximized, etc, as well as
 * creating transient windows such as popup menus.
 * @section page_iface_xdg_wm_base_api API
 * See @ref iface_xdg_wm_base.
 */
/* *
 * @defgroup iface_xdg_wm_base The xdg_wm_base interface
 *
 * The xdg_wm_base interface is exposed as a global object enabling clients
 * to turn their wl_surfaces into windows in a desktop environment. It
 * defines the basic functionality needed for clients and the compositor to
 * create windows that can be dragged, resized, maximized, etc, as well as
 * creating transient windows such as popup menus.
 */
    #[no_mangle]
    static xdg_wm_base_interface: wl_interface;
    /* *
 * @page page_iface_xdg_surface xdg_surface
 * @section page_iface_xdg_surface_desc Description
 *
 * An interface that may be implemented by a wl_surface, for
 * implementations that provide a desktop-style user interface.
 *
 * It provides a base set of functionality required to construct user
 * interface elements requiring management by the compositor, such as
 * toplevel windows, menus, etc. The types of functionality are split into
 * xdg_surface roles.
 *
 * Creating an xdg_surface does not set the role for a wl_surface. In order
 * to map an xdg_surface, the client must create a role-specific object
 * using, e.g., get_toplevel, get_popup. The wl_surface for any given
 * xdg_surface can have at most one role, and may not be assigned any role
 * not based on xdg_surface.
 *
 * A role must be assigned before any other requests are made to the
 * xdg_surface object.
 *
 * The client must call wl_surface.commit on the corresponding wl_surface
 * for the xdg_surface state to take effect.
 *
 * Creating an xdg_surface from a wl_surface which has a buffer attached or
 * committed is a client error, and any attempts by a client to attach or
 * manipulate a buffer prior to the first xdg_surface.configure call must
 * also be treated as errors.
 *
 * Mapping an xdg_surface-based role surface is defined as making it
 * possible for the surface to be shown by the compositor. Note that
 * a mapped surface is not guaranteed to be visible once it is mapped.
 *
 * For an xdg_surface to be mapped by the compositor, the following
 * conditions must be met:
 * (1) the client has assigned an xdg_surface-based role to the surface
 * (2) the client has set and committed the xdg_surface state and the
 * role-dependent state to the surface
 * (3) the client has committed a buffer to the surface
 *
 * A newly-unmapped surface is considered to have met condition (1) out
 * of the 3 required conditions for mapping a surface if its role surface
 * has not been destroyed.
 * @section page_iface_xdg_surface_api API
 * See @ref iface_xdg_surface.
 */
/* *
 * @defgroup iface_xdg_surface The xdg_surface interface
 *
 * An interface that may be implemented by a wl_surface, for
 * implementations that provide a desktop-style user interface.
 *
 * It provides a base set of functionality required to construct user
 * interface elements requiring management by the compositor, such as
 * toplevel windows, menus, etc. The types of functionality are split into
 * xdg_surface roles.
 *
 * Creating an xdg_surface does not set the role for a wl_surface. In order
 * to map an xdg_surface, the client must create a role-specific object
 * using, e.g., get_toplevel, get_popup. The wl_surface for any given
 * xdg_surface can have at most one role, and may not be assigned any role
 * not based on xdg_surface.
 *
 * A role must be assigned before any other requests are made to the
 * xdg_surface object.
 *
 * The client must call wl_surface.commit on the corresponding wl_surface
 * for the xdg_surface state to take effect.
 *
 * Creating an xdg_surface from a wl_surface which has a buffer attached or
 * committed is a client error, and any attempts by a client to attach or
 * manipulate a buffer prior to the first xdg_surface.configure call must
 * also be treated as errors.
 *
 * Mapping an xdg_surface-based role surface is defined as making it
 * possible for the surface to be shown by the compositor. Note that
 * a mapped surface is not guaranteed to be visible once it is mapped.
 *
 * For an xdg_surface to be mapped by the compositor, the following
 * conditions must be met:
 * (1) the client has assigned an xdg_surface-based role to the surface
 * (2) the client has set and committed the xdg_surface state and the
 * role-dependent state to the surface
 * (3) the client has committed a buffer to the surface
 *
 * A newly-unmapped surface is considered to have met condition (1) out
 * of the 3 required conditions for mapping a surface if its role surface
 * has not been destroyed.
 */
    #[no_mangle]
    static xdg_surface_interface: wl_interface;
    /* *
 * @page page_iface_xdg_toplevel xdg_toplevel
 * @section page_iface_xdg_toplevel_desc Description
 *
 * This interface defines an xdg_surface role which allows a surface to,
 * among other things, set window-like properties such as maximize,
 * fullscreen, and minimize, set application-specific metadata like title and
 * id, and well as trigger user interactive operations such as interactive
 * resize and move.
 *
 * Unmapping an xdg_toplevel means that the surface cannot be shown
 * by the compositor until it is explicitly mapped again.
 * All active operations (e.g., move, resize) are canceled and all
 * attributes (e.g. title, state, stacking, ...) are discarded for
 * an xdg_toplevel surface when it is unmapped.
 *
 * Attaching a null buffer to a toplevel unmaps the surface.
 * @section page_iface_xdg_toplevel_api API
 * See @ref iface_xdg_toplevel.
 */
/* *
 * @defgroup iface_xdg_toplevel The xdg_toplevel interface
 *
 * This interface defines an xdg_surface role which allows a surface to,
 * among other things, set window-like properties such as maximize,
 * fullscreen, and minimize, set application-specific metadata like title and
 * id, and well as trigger user interactive operations such as interactive
 * resize and move.
 *
 * Unmapping an xdg_toplevel means that the surface cannot be shown
 * by the compositor until it is explicitly mapped again.
 * All active operations (e.g., move, resize) are canceled and all
 * attributes (e.g. title, state, stacking, ...) are discarded for
 * an xdg_toplevel surface when it is unmapped.
 *
 * Attaching a null buffer to a toplevel unmaps the surface.
 */
    #[no_mangle]
    static xdg_toplevel_interface: wl_interface;
}
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __uint64_t = libc::c_ulong;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type khronos_int32_t = int32_t;
pub type khronos_float_t = libc::c_float;
pub type GLfloat = khronos_float_t;
pub type GLbitfield = libc::c_uint;
pub type GLint = libc::c_int;
pub type GLsizei = libc::c_int;
pub type size_t = libc::c_ulong;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_array {
    pub size: size_t,
    pub alloc: size_t,
    pub data: *mut libc::c_void,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type EGLint = khronos_int32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_registry_listener {
    pub global: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_registry, _: uint32_t,
                                            _: *const libc::c_char,
                                            _: uint32_t) -> ()>,
    pub global_remove: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                   _: *mut wl_registry,
                                                   _: uint32_t) -> ()>,
}
pub type wl_shm_format = libc::c_uint;
pub const WL_SHM_FORMAT_YVU444: wl_shm_format = 875714137;
pub const WL_SHM_FORMAT_YUV444: wl_shm_format = 875713881;
pub const WL_SHM_FORMAT_YVU422: wl_shm_format = 909203033;
pub const WL_SHM_FORMAT_YUV422: wl_shm_format = 909202777;
pub const WL_SHM_FORMAT_YVU420: wl_shm_format = 842094169;
pub const WL_SHM_FORMAT_YUV420: wl_shm_format = 842093913;
pub const WL_SHM_FORMAT_YVU411: wl_shm_format = 825316953;
pub const WL_SHM_FORMAT_YUV411: wl_shm_format = 825316697;
pub const WL_SHM_FORMAT_YVU410: wl_shm_format = 961893977;
pub const WL_SHM_FORMAT_YUV410: wl_shm_format = 961959257;
pub const WL_SHM_FORMAT_NV61: wl_shm_format = 825644622;
pub const WL_SHM_FORMAT_NV16: wl_shm_format = 909203022;
pub const WL_SHM_FORMAT_NV21: wl_shm_format = 825382478;
pub const WL_SHM_FORMAT_NV12: wl_shm_format = 842094158;
pub const WL_SHM_FORMAT_AYUV: wl_shm_format = 1448433985;
pub const WL_SHM_FORMAT_VYUY: wl_shm_format = 1498765654;
pub const WL_SHM_FORMAT_UYVY: wl_shm_format = 1498831189;
pub const WL_SHM_FORMAT_YVYU: wl_shm_format = 1431918169;
pub const WL_SHM_FORMAT_YUYV: wl_shm_format = 1448695129;
pub const WL_SHM_FORMAT_BGRA1010102: wl_shm_format = 808665410;
pub const WL_SHM_FORMAT_RGBA1010102: wl_shm_format = 808665426;
pub const WL_SHM_FORMAT_ABGR2101010: wl_shm_format = 808665665;
pub const WL_SHM_FORMAT_ARGB2101010: wl_shm_format = 808669761;
pub const WL_SHM_FORMAT_BGRX1010102: wl_shm_format = 808671298;
pub const WL_SHM_FORMAT_RGBX1010102: wl_shm_format = 808671314;
pub const WL_SHM_FORMAT_XBGR2101010: wl_shm_format = 808665688;
pub const WL_SHM_FORMAT_XRGB2101010: wl_shm_format = 808669784;
pub const WL_SHM_FORMAT_BGRA8888: wl_shm_format = 875708738;
pub const WL_SHM_FORMAT_RGBA8888: wl_shm_format = 875708754;
pub const WL_SHM_FORMAT_ABGR8888: wl_shm_format = 875708993;
pub const WL_SHM_FORMAT_BGRX8888: wl_shm_format = 875714626;
pub const WL_SHM_FORMAT_RGBX8888: wl_shm_format = 875714642;
pub const WL_SHM_FORMAT_XBGR8888: wl_shm_format = 875709016;
pub const WL_SHM_FORMAT_BGR888: wl_shm_format = 875710274;
pub const WL_SHM_FORMAT_RGB888: wl_shm_format = 875710290;
pub const WL_SHM_FORMAT_BGR565: wl_shm_format = 909199170;
pub const WL_SHM_FORMAT_RGB565: wl_shm_format = 909199186;
pub const WL_SHM_FORMAT_BGRA5551: wl_shm_format = 892420418;
pub const WL_SHM_FORMAT_RGBA5551: wl_shm_format = 892420434;
pub const WL_SHM_FORMAT_ABGR1555: wl_shm_format = 892420673;
pub const WL_SHM_FORMAT_ARGB1555: wl_shm_format = 892424769;
pub const WL_SHM_FORMAT_BGRX5551: wl_shm_format = 892426306;
pub const WL_SHM_FORMAT_RGBX5551: wl_shm_format = 892426322;
pub const WL_SHM_FORMAT_XBGR1555: wl_shm_format = 892420696;
pub const WL_SHM_FORMAT_XRGB1555: wl_shm_format = 892424792;
pub const WL_SHM_FORMAT_BGRA4444: wl_shm_format = 842088770;
pub const WL_SHM_FORMAT_RGBA4444: wl_shm_format = 842088786;
pub const WL_SHM_FORMAT_ABGR4444: wl_shm_format = 842089025;
pub const WL_SHM_FORMAT_ARGB4444: wl_shm_format = 842093121;
pub const WL_SHM_FORMAT_BGRX4444: wl_shm_format = 842094658;
pub const WL_SHM_FORMAT_RGBX4444: wl_shm_format = 842094674;
pub const WL_SHM_FORMAT_XBGR4444: wl_shm_format = 842089048;
pub const WL_SHM_FORMAT_XRGB4444: wl_shm_format = 842093144;
pub const WL_SHM_FORMAT_BGR233: wl_shm_format = 944916290;
pub const WL_SHM_FORMAT_RGB332: wl_shm_format = 943867730;
pub const WL_SHM_FORMAT_C8: wl_shm_format = 538982467;
pub const WL_SHM_FORMAT_XRGB8888: wl_shm_format = 1;
pub const WL_SHM_FORMAT_ARGB8888: wl_shm_format = 0;
pub type wl_seat_capability = libc::c_uint;
pub const WL_SEAT_CAPABILITY_TOUCH: wl_seat_capability = 4;
pub const WL_SEAT_CAPABILITY_KEYBOARD: wl_seat_capability = 2;
pub const WL_SEAT_CAPABILITY_POINTER: wl_seat_capability = 1;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_seat_listener {
    pub capabilities: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                  _: *mut wl_seat,
                                                  _: uint32_t) -> ()>,
    pub name: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut wl_seat,
                                          _: *const libc::c_char) -> ()>,
}
pub type wl_keyboard_key_state = libc::c_uint;
pub const WL_KEYBOARD_KEY_STATE_PRESSED: wl_keyboard_key_state = 1;
pub const WL_KEYBOARD_KEY_STATE_RELEASED: wl_keyboard_key_state = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_keyboard_listener {
    pub keymap: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_keyboard, _: uint32_t,
                                            _: int32_t, _: uint32_t) -> ()>,
    pub enter: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_keyboard, _: uint32_t,
                                           _: *mut wl_surface,
                                           _: *mut wl_array) -> ()>,
    pub leave: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_keyboard, _: uint32_t,
                                           _: *mut wl_surface) -> ()>,
    pub key: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                         _: *mut wl_keyboard, _: uint32_t,
                                         _: uint32_t, _: uint32_t,
                                         _: uint32_t) -> ()>,
    pub modifiers: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut wl_keyboard,
                                               _: uint32_t, _: uint32_t,
                                               _: uint32_t, _: uint32_t,
                                               _: uint32_t) -> ()>,
    pub repeat_info: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: *mut wl_keyboard,
                                                 _: int32_t, _: int32_t)
                                -> ()>,
}
pub type EGLBoolean = libc::c_uint;
pub type EGLDisplay = *mut libc::c_void;
pub type EGLConfig = *mut libc::c_void;
pub type EGLSurface = *mut libc::c_void;
pub type EGLContext = *mut libc::c_void;
pub type EGLenum = libc::c_uint;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_drm_format {
    pub format: uint32_t,
    pub len: size_t,
    pub cap: size_t,
    pub modifiers: [uint64_t; 0],
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_drm_format_set {
    pub len: size_t,
    pub cap: size_t,
    pub formats: *mut *mut wlr_drm_format,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_egl {
    pub platform: EGLenum,
    pub display: EGLDisplay,
    pub config: EGLConfig,
    pub context: EGLContext,
    pub exts_str: *const libc::c_char,
    pub exts: C2RustUnnamed,
    pub wl_display: *mut wl_display,
    pub dmabuf_formats: wlr_drm_format_set,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub bind_wayland_display_wl: bool,
    pub buffer_age_ext: bool,
    pub image_base_khr: bool,
    pub image_dma_buf_export_mesa: bool,
    pub image_dmabuf_import_ext: bool,
    pub image_dmabuf_import_modifiers_ext: bool,
    pub swap_buffers_with_damage_ext: bool,
    pub swap_buffers_with_damage_khr: bool,
}
/* XDG_SURFACE_ERROR_ENUM */
/* *
 * @ingroup iface_xdg_surface
 * @struct xdg_surface_listener
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct xdg_surface_listener {
    pub configure: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut xdg_surface,
                                               _: uint32_t) -> ()>,
}
/* *
 * @ingroup iface_xdg_toplevel
 */
/* *
 * @ingroup iface_xdg_toplevel
 */
/* *
 * @ingroup iface_xdg_toplevel
 */
/* *
 * @ingroup iface_xdg_toplevel
 */
/* XDG_TOPLEVEL_STATE_ENUM */
/* *
 * @ingroup iface_xdg_toplevel
 * @struct xdg_toplevel_listener
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct xdg_toplevel_listener {
    pub configure: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut xdg_toplevel,
                                               _: int32_t, _: int32_t,
                                               _: *mut wl_array) -> ()>,
    pub close: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut xdg_toplevel) -> ()>,
}
#[inline]
unsafe extern "C" fn wl_display_get_registry(mut wl_display: *mut wl_display)
 -> *mut wl_registry {
    let mut registry: *mut wl_proxy = 0 as *mut wl_proxy;
    registry =
        wl_proxy_marshal_constructor(wl_display as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &wl_registry_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return registry as *mut wl_registry;
}
#[inline]
unsafe extern "C" fn wl_registry_add_listener(mut wl_registry:
                                                  *mut wl_registry,
                                              mut listener:
                                                  *const wl_registry_listener,
                                              mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(wl_registry as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
#[inline]
unsafe extern "C" fn wl_registry_bind(mut wl_registry: *mut wl_registry,
                                      mut name: uint32_t,
                                      mut interface: *const wl_interface,
                                      mut version: uint32_t)
 -> *mut libc::c_void {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor_versioned(wl_registry as *mut wl_proxy,
                                               0i32 as uint32_t, interface,
                                               version, name,
                                               (*interface).name, version,
                                               0 as *mut libc::c_void);
    return id as *mut libc::c_void;
}
#[inline]
unsafe extern "C" fn wl_compositor_create_surface(mut wl_compositor:
                                                      *mut wl_compositor)
 -> *mut wl_surface {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(wl_compositor as *mut wl_proxy,
                                     0i32 as uint32_t,
                                     &wl_surface_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut wl_surface;
}
#[inline]
unsafe extern "C" fn wl_surface_commit(mut wl_surface: *mut wl_surface) {
    wl_proxy_marshal(wl_surface as *mut wl_proxy, 6i32 as uint32_t);
}
#[inline]
unsafe extern "C" fn wl_seat_add_listener(mut wl_seat: *mut wl_seat,
                                          mut listener:
                                              *const wl_seat_listener,
                                          mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(wl_seat as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
#[inline]
unsafe extern "C" fn wl_seat_get_keyboard(mut wl_seat: *mut wl_seat)
 -> *mut wl_keyboard {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(wl_seat as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &wl_keyboard_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut wl_keyboard;
}
#[inline]
unsafe extern "C" fn wl_keyboard_add_listener(mut wl_keyboard:
                                                  *mut wl_keyboard,
                                              mut listener:
                                                  *const wl_keyboard_listener,
                                              mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(wl_keyboard as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
/* *
 * @ingroup iface_zwlr_input_inhibit_manager_v1
 *
 * Activates the input inhibitor. As long as the inhibitor is active, the
 * compositor will not send input events to other clients.
 */
#[inline]
unsafe extern "C" fn zwlr_input_inhibit_manager_v1_get_inhibitor(mut zwlr_input_inhibit_manager_v1:
                                                                     *mut zwlr_input_inhibit_manager_v1)
 -> *mut zwlr_input_inhibitor_v1 {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(zwlr_input_inhibit_manager_v1 as
                                         *mut wl_proxy, 0i32 as uint32_t,
                                     &zwlr_input_inhibitor_v1_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut zwlr_input_inhibitor_v1;
}
/* *
 * @ingroup iface_xdg_wm_base
 *
 * This creates an xdg_surface for the given surface. While xdg_surface
 * itself is not a role, the corresponding surface may only be assigned
 * a role extending xdg_surface, such as xdg_toplevel or xdg_popup.
 *
 * This creates an xdg_surface for the given surface. An xdg_surface is
 * used as basis to define a role to a given surface, such as xdg_toplevel
 * or xdg_popup. It also manages functionality shared between xdg_surface
 * based surface roles.
 *
 * See the documentation of xdg_surface for more details about what an
 * xdg_surface is and how it is used.
 */
#[inline]
unsafe extern "C" fn xdg_wm_base_get_xdg_surface(mut xdg_wm_base:
                                                     *mut xdg_wm_base,
                                                 mut surface: *mut wl_surface)
 -> *mut xdg_surface {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(xdg_wm_base as *mut wl_proxy,
                                     2i32 as uint32_t,
                                     &xdg_surface_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void, surface);
    return id as *mut xdg_surface;
}
/* *
 * @ingroup iface_xdg_surface
 */
#[inline]
unsafe extern "C" fn xdg_surface_add_listener(mut xdg_surface:
                                                  *mut xdg_surface,
                                              mut listener:
                                                  *const xdg_surface_listener,
                                              mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(xdg_surface as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
/* *
 * @ingroup iface_xdg_surface
 *
 * This creates an xdg_toplevel object for the given xdg_surface and gives
 * the associated wl_surface the xdg_toplevel role.
 *
 * See the documentation of xdg_toplevel for more details about what an
 * xdg_toplevel is and how it is used.
 */
#[inline]
unsafe extern "C" fn xdg_surface_get_toplevel(mut xdg_surface:
                                                  *mut xdg_surface)
 -> *mut xdg_toplevel {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(xdg_surface as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &xdg_toplevel_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut xdg_toplevel;
}
/* *
 * @ingroup iface_xdg_surface
 *
 * When a configure event is received, if a client commits the
 * surface in response to the configure event, then the client
 * must make an ack_configure request sometime before the commit
 * request, passing along the serial of the configure event.
 *
 * For instance, for toplevel surfaces the compositor might use this
 * information to move a surface to the top left only when the client has
 * drawn itself for the maximized or fullscreen state.
 *
 * If the client receives multiple configure events before it
 * can respond to one, it only has to ack the last configure event.
 *
 * A client is not required to commit immediately after sending
 * an ack_configure request - it may even ack_configure several times
 * before its next surface commit.
 *
 * A client may send multiple ack_configure requests before committing, but
 * only the last request sent before a commit indicates which configure
 * event the client really is responding to.
 */
#[inline]
unsafe extern "C" fn xdg_surface_ack_configure(mut xdg_surface:
                                                   *mut xdg_surface,
                                               mut serial: uint32_t) {
    wl_proxy_marshal(xdg_surface as *mut wl_proxy, 4i32 as uint32_t, serial);
}
/* *
 * @ingroup iface_xdg_toplevel
 */
#[inline]
unsafe extern "C" fn xdg_toplevel_add_listener(mut xdg_toplevel:
                                                   *mut xdg_toplevel,
                                               mut listener:
                                                   *const xdg_toplevel_listener,
                                               mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(xdg_toplevel as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
static mut width: libc::c_int = 500i32;
static mut height: libc::c_int = 300i32;
static mut keys: libc::c_int = 0i32;
static mut compositor: *mut wl_compositor =
    0 as *const wl_compositor as *mut wl_compositor;
static mut seat: *mut wl_seat = 0 as *const wl_seat as *mut wl_seat;
static mut wm_base: *mut xdg_wm_base =
    0 as *const xdg_wm_base as *mut xdg_wm_base;
static mut input_inhibit_manager: *mut zwlr_input_inhibit_manager_v1 =
    0 as *const zwlr_input_inhibit_manager_v1 as
        *mut zwlr_input_inhibit_manager_v1;
static mut input_inhibitor: *mut zwlr_input_inhibitor_v1 =
    0 as *const zwlr_input_inhibitor_v1 as *mut zwlr_input_inhibitor_v1;
#[no_mangle]
pub static mut egl: wlr_egl =
    wlr_egl{platform: 0,
            display: 0 as *const libc::c_void as *mut libc::c_void,
            config: 0 as *const libc::c_void as *mut libc::c_void,
            context: 0 as *const libc::c_void as *mut libc::c_void,
            exts_str: 0 as *const libc::c_char,
            exts:
                C2RustUnnamed{bind_wayland_display_wl: false,
                              buffer_age_ext: false,
                              image_base_khr: false,
                              image_dma_buf_export_mesa: false,
                              image_dmabuf_import_ext: false,
                              image_dmabuf_import_modifiers_ext: false,
                              swap_buffers_with_damage_ext: false,
                              swap_buffers_with_damage_khr: false,},
            wl_display: 0 as *const wl_display as *mut wl_display,
            dmabuf_formats:
                wlr_drm_format_set{len: 0,
                                   cap: 0,
                                   formats:
                                       0 as *const *mut wlr_drm_format as
                                           *mut *mut wlr_drm_format,},};
#[no_mangle]
pub static mut egl_window: *mut wl_egl_window =
    0 as *const wl_egl_window as *mut wl_egl_window;
#[no_mangle]
pub static mut egl_surface: *mut wlr_egl_surface =
    0 as *const wlr_egl_surface as *mut wlr_egl_surface;
unsafe extern "C" fn render_frame() {
    eglMakeCurrent(egl.display, egl_surface as EGLSurface,
                   egl_surface as EGLSurface, egl.context);
    glViewport(0i32, 0i32, width, height);
    if keys != 0 {
        glClearColor(1.0f64 as GLfloat, 1.0f64 as GLfloat, 1.0f64 as GLfloat,
                     1.0f64 as GLfloat);
    } else {
        glClearColor(0.8f64 as GLfloat, 0.4f64 as GLfloat, 1.0f64 as GLfloat,
                     1.0f64 as GLfloat);
    }
    glClear(0x4000i32 as GLbitfield);
    eglSwapBuffers(egl.display, egl_surface as EGLSurface);
}
unsafe extern "C" fn xdg_surface_handle_configure(mut data: *mut libc::c_void,
                                                  mut xdg_surface:
                                                      *mut xdg_surface,
                                                  mut serial: uint32_t) {
    xdg_surface_ack_configure(xdg_surface, serial);
    wl_egl_window_resize(egl_window, width, height, 0i32, 0i32);
    render_frame();
}
static mut xdg_surface_listener: xdg_surface_listener =
    unsafe {
        {
            let mut init =
                xdg_surface_listener{configure:
                                         Some(xdg_surface_handle_configure as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut xdg_surface,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),};
            init
        }
    };
unsafe extern "C" fn xdg_toplevel_handle_configure(mut data:
                                                       *mut libc::c_void,
                                                   mut xdg_toplevel:
                                                       *mut xdg_toplevel,
                                                   mut w: int32_t,
                                                   mut h: int32_t,
                                                   mut states:
                                                       *mut wl_array) {
    width = w;
    height = h;
}
unsafe extern "C" fn xdg_toplevel_handle_close(mut data: *mut libc::c_void,
                                               mut xdg_toplevel:
                                                   *mut xdg_toplevel) {
    exit(0i32);
}
static mut xdg_toplevel_listener: xdg_toplevel_listener =
    unsafe {
        {
            let mut init =
                xdg_toplevel_listener{configure:
                                          Some(xdg_toplevel_handle_configure
                                                   as
                                                   unsafe extern "C" fn(_:
                                                                            *mut libc::c_void,
                                                                        _:
                                                                            *mut xdg_toplevel,
                                                                        _:
                                                                            int32_t,
                                                                        _:
                                                                            int32_t,
                                                                        _:
                                                                            *mut wl_array)
                                                       -> ()),
                                      close:
                                          Some(xdg_toplevel_handle_close as
                                                   unsafe extern "C" fn(_:
                                                                            *mut libc::c_void,
                                                                        _:
                                                                            *mut xdg_toplevel)
                                                       -> ()),};
            init
        }
    };
unsafe extern "C" fn wl_keyboard_keymap(mut data: *mut libc::c_void,
                                        mut wl_keyboard: *mut wl_keyboard,
                                        mut format: uint32_t, mut fd: int32_t,
                                        mut size: uint32_t) {
}
unsafe extern "C" fn wl_keyboard_enter(mut data: *mut libc::c_void,
                                       mut wl_keyboard: *mut wl_keyboard,
                                       mut serial: uint32_t,
                                       mut surface: *mut wl_surface,
                                       mut keys_0: *mut wl_array) {
}
unsafe extern "C" fn wl_keyboard_leave(mut data: *mut libc::c_void,
                                       mut wl_keyboard: *mut wl_keyboard,
                                       mut serial: uint32_t,
                                       mut surface: *mut wl_surface) {
}
unsafe extern "C" fn wl_keyboard_modifiers(mut data: *mut libc::c_void,
                                           mut wl_keyboard: *mut wl_keyboard,
                                           mut serial: uint32_t,
                                           mut mods_depressed: uint32_t,
                                           mut mods_latched: uint32_t,
                                           mut mods_locked: uint32_t,
                                           mut group: uint32_t) {
}
unsafe extern "C" fn wl_keyboard_repeat_info(mut data: *mut libc::c_void,
                                             mut wl_keyboard:
                                                 *mut wl_keyboard,
                                             mut rate: int32_t,
                                             mut delay: int32_t) {
}
unsafe extern "C" fn wl_keyboard_key(mut data: *mut libc::c_void,
                                     mut wl_keyboard: *mut wl_keyboard,
                                     mut serial: uint32_t, mut time: uint32_t,
                                     mut key: uint32_t, mut state: uint32_t) {
    if state == WL_KEYBOARD_KEY_STATE_PRESSED as libc::c_int as libc::c_uint {
        keys += 1
    } else { keys -= 1 }
    render_frame();
}
static mut keyboard_listener: wl_keyboard_listener =
    unsafe {
        {
            let mut init =
                wl_keyboard_listener{keymap:
                                         Some(wl_keyboard_keymap as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           int32_t,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     enter:
                                         Some(wl_keyboard_enter as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           *mut wl_surface,
                                                                       _:
                                                                           *mut wl_array)
                                                      -> ()),
                                     leave:
                                         Some(wl_keyboard_leave as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           *mut wl_surface)
                                                      -> ()),
                                     key:
                                         Some(wl_keyboard_key as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     modifiers:
                                         Some(wl_keyboard_modifiers as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     repeat_info:
                                         Some(wl_keyboard_repeat_info as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_keyboard,
                                                                       _:
                                                                           int32_t,
                                                                       _:
                                                                           int32_t)
                                                      -> ()),};
            init
        }
    };
unsafe extern "C" fn seat_handle_capabilities(mut data: *mut libc::c_void,
                                              mut wl_seat: *mut wl_seat,
                                              mut caps: wl_seat_capability) {
    if caps as libc::c_uint &
           WL_SEAT_CAPABILITY_KEYBOARD as libc::c_int as libc::c_uint != 0 {
        let mut keyboard: *mut wl_keyboard = wl_seat_get_keyboard(wl_seat);
        wl_keyboard_add_listener(keyboard, &mut keyboard_listener,
                                 0 as *mut libc::c_void);
    };
}
unsafe extern "C" fn seat_handle_name(mut data: *mut libc::c_void,
                                      mut wl_seat: *mut wl_seat,
                                      mut name: *const libc::c_char) {
    // Who cares
}
#[no_mangle]
pub static mut seat_listener: wl_seat_listener =
    unsafe {
        {
            let mut init =
                wl_seat_listener{capabilities:
                                     ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                             *mut libc::c_void,
                                                                                         _:
                                                                                             *mut wl_seat,
                                                                                         _:
                                                                                             wl_seat_capability)
                                                                        ->
                                                                            ()>,
                                                             Option<unsafe extern "C" fn(_:
                                                                                             *mut libc::c_void,
                                                                                         _:
                                                                                             *mut wl_seat,
                                                                                         _:
                                                                                             uint32_t)
                                                                        ->
                                                                            ()>>(Some(seat_handle_capabilities
                                                                                          as
                                                                                          unsafe extern "C" fn(_:
                                                                                                                   *mut libc::c_void,
                                                                                                               _:
                                                                                                                   *mut wl_seat,
                                                                                                               _:
                                                                                                                   wl_seat_capability)
                                                                                              ->
                                                                                                  ())),
                                 name:
                                     Some(seat_handle_name as
                                              unsafe extern "C" fn(_:
                                                                       *mut libc::c_void,
                                                                   _:
                                                                       *mut wl_seat,
                                                                   _:
                                                                       *const libc::c_char)
                                                  -> ()),};
            init
        }
    };
unsafe extern "C" fn handle_global(mut data: *mut libc::c_void,
                                   mut registry: *mut wl_registry,
                                   mut name: uint32_t,
                                   mut interface: *const libc::c_char,
                                   mut version: uint32_t) {
    if strcmp(interface, wl_compositor_interface.name) == 0i32 {
        compositor =
            wl_registry_bind(registry, name, &wl_compositor_interface,
                             1i32 as uint32_t) as *mut wl_compositor
    } else if strcmp(interface, xdg_wm_base_interface.name) == 0i32 {
        wm_base =
            wl_registry_bind(registry, name, &xdg_wm_base_interface,
                             1i32 as uint32_t) as *mut xdg_wm_base
    } else if strcmp(interface, zwlr_input_inhibit_manager_v1_interface.name)
                  == 0i32 {
        input_inhibit_manager =
            wl_registry_bind(registry, name,
                             &zwlr_input_inhibit_manager_v1_interface,
                             1i32 as uint32_t) as
                *mut zwlr_input_inhibit_manager_v1
    } else if strcmp(interface, wl_seat_interface.name) == 0i32 {
        seat =
            wl_registry_bind(registry, name, &wl_seat_interface, version) as
                *mut wl_seat;
        wl_seat_add_listener(seat, &seat_listener, seat as *mut libc::c_void);
    };
}
unsafe extern "C" fn handle_global_remove(mut data: *mut libc::c_void,
                                          mut registry: *mut wl_registry,
                                          mut name: uint32_t) {
    // who cares
}
static mut registry_listener: wl_registry_listener =
    unsafe {
        {
            let mut init =
                wl_registry_listener{global:
                                         Some(handle_global as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_registry,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           *const libc::c_char,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     global_remove:
                                         Some(handle_global_remove as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_registry,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),};
            init
        }
    };
unsafe fn main_0(mut argc: libc::c_int, mut argv: *mut *mut libc::c_char)
 -> libc::c_int {
    let mut display: *mut wl_display =
        wl_display_connect(0 as *const libc::c_char);
    if !display.is_null() {
    } else {
        __assert_fail(b"display\x00" as *const u8 as *const libc::c_char,
                      b"../examples/input-inhibitor.c\x00" as *const u8 as
                          *const libc::c_char, 149i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 23],
                                                &[libc::c_char; 23]>(b"int main(int, char **)\x00")).as_ptr());
    };
    let mut registry: *mut wl_registry = wl_display_get_registry(display);
    if !registry.is_null() {
    } else {
        __assert_fail(b"registry\x00" as *const u8 as *const libc::c_char,
                      b"../examples/input-inhibitor.c\x00" as *const u8 as
                          *const libc::c_char, 151i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 23],
                                                &[libc::c_char; 23]>(b"int main(int, char **)\x00")).as_ptr());
    };
    wl_registry_add_listener(registry, &registry_listener,
                             0 as *mut libc::c_void);
    wl_display_dispatch(display);
    wl_display_roundtrip(display);
    if !compositor.is_null() && !seat.is_null() && !wm_base.is_null() &&
           !input_inhibit_manager.is_null() {
    } else {
        __assert_fail(b"compositor && seat && wm_base && input_inhibit_manager\x00"
                          as *const u8 as *const libc::c_char,
                      b"../examples/input-inhibitor.c\x00" as *const u8 as
                          *const libc::c_char, 155i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 23],
                                                &[libc::c_char; 23]>(b"int main(int, char **)\x00")).as_ptr());
    };
    input_inhibitor =
        zwlr_input_inhibit_manager_v1_get_inhibitor(input_inhibit_manager);
    if !input_inhibitor.is_null() {
    } else {
        __assert_fail(b"input_inhibitor\x00" as *const u8 as
                          *const libc::c_char,
                      b"../examples/input-inhibitor.c\x00" as *const u8 as
                          *const libc::c_char, 159i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 23],
                                                &[libc::c_char; 23]>(b"int main(int, char **)\x00")).as_ptr());
    };
    wlr_egl_init(&mut egl, 0x31d8i32 as EGLenum, display as *mut libc::c_void,
                 0 as *mut EGLint, WL_SHM_FORMAT_ARGB8888 as libc::c_int);
    let mut surface: *mut wl_surface =
        wl_compositor_create_surface(compositor);
    if !surface.is_null() {
    } else {
        __assert_fail(b"surface\x00" as *const u8 as *const libc::c_char,
                      b"../examples/input-inhibitor.c\x00" as *const u8 as
                          *const libc::c_char, 165i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 23],
                                                &[libc::c_char; 23]>(b"int main(int, char **)\x00")).as_ptr());
    };
    let mut xdg_surface: *mut xdg_surface =
        xdg_wm_base_get_xdg_surface(wm_base, surface);
    if !xdg_surface.is_null() {
    } else {
        __assert_fail(b"xdg_surface\x00" as *const u8 as *const libc::c_char,
                      b"../examples/input-inhibitor.c\x00" as *const u8 as
                          *const libc::c_char, 168i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 23],
                                                &[libc::c_char; 23]>(b"int main(int, char **)\x00")).as_ptr());
    };
    let mut xdg_toplevel: *mut xdg_toplevel =
        xdg_surface_get_toplevel(xdg_surface);
    if !xdg_toplevel.is_null() {
    } else {
        __assert_fail(b"xdg_toplevel\x00" as *const u8 as *const libc::c_char,
                      b"../examples/input-inhibitor.c\x00" as *const u8 as
                          *const libc::c_char, 170i32 as libc::c_uint,
                      (*::std::mem::transmute::<&[u8; 23],
                                                &[libc::c_char; 23]>(b"int main(int, char **)\x00")).as_ptr());
    };
    xdg_surface_add_listener(xdg_surface, &xdg_surface_listener,
                             0 as *mut libc::c_void);
    xdg_toplevel_add_listener(xdg_toplevel, &xdg_toplevel_listener,
                              0 as *mut libc::c_void);
    wl_surface_commit(surface);
    egl_window = wl_egl_window_create(surface, width, height);
    egl_surface =
        wlr_egl_create_surface(&mut egl, egl_window as *mut libc::c_void) as
            *mut wlr_egl_surface;
    wl_display_roundtrip(display);
    render_frame();
    // This space intentionally left blank
    while wl_display_dispatch(display) != -1i32 { }
    return 0i32;
}
#[main]
pub fn main() {
    let mut args: Vec<*mut libc::c_char> = Vec::new();
    for arg in ::std::env::args() {
        args.push(::std::ffi::CString::new(arg).expect("Failed to convert argument into CString.").into_raw());
    };
    args.push(::std::ptr::null_mut());
    unsafe {
        ::std::process::exit(main_0((args.len() - 1) as libc::c_int,
                                    args.as_mut_ptr() as
                                        *mut *mut libc::c_char) as i32)
    }
}
