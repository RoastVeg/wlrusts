use libc;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type wl_proxy;
    pub type wl_display;
    pub type wl_compositor;
    /* Generated by wayland-scanner 1.17.0 */
    /* *
 * @page page_pointer_constraints_unstable_v1 The pointer_constraints_unstable_v1 protocol
 * protocol for constraining pointer motions
 *
 * @section page_desc_pointer_constraints_unstable_v1 Description
 *
 * This protocol specifies a set of interfaces used for adding constraints to
 * the motion of a pointer. Possible constraints include confining pointer
 * motions to a given region, or locking it to its current position.
 *
 * In order to constrain the pointer, a client must first bind the global
 * interface "wp_pointer_constraints" which, if a compositor supports pointer
 * constraints, is exposed by the registry. Using the bound global object, the
 * client uses the request that corresponds to the type of constraint it wants
 * to make. See wp_pointer_constraints for more details.
 *
 * Warning! The protocol described in this file is experimental and backward
 * incompatible changes may be made. Backward compatible changes may be added
 * together with the corresponding interface version bump. Backward
 * incompatible changes are done by bumping the version number in the protocol
 * and interface names and resetting the interface version. Once the protocol
 * is to be declared stable, the 'z' prefix and the version number in the
 * protocol and interface names are removed and the interface version number is
 * reset.
 *
 * @section page_ifaces_pointer_constraints_unstable_v1 Interfaces
 * - @subpage page_iface_zwp_pointer_constraints_v1 - constrain the movement of a pointer
 * - @subpage page_iface_zwp_locked_pointer_v1 - receive relative pointer motion events
 * - @subpage page_iface_zwp_confined_pointer_v1 - confined pointer object
 * @section page_copyright_pointer_constraints_unstable_v1 Copyright
 * <pre>
 *
 * Copyright © 2014      Jonas Ådahl
 * Copyright © 2015      Red Hat Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
    pub type wl_pointer;
    pub type wl_region;
    pub type wl_registry;
    pub type wl_seat;
    pub type wl_surface;
    pub type zwp_pointer_constraints_v1;
    pub type xdg_wm_base;
    pub type wl_egl_window;
    pub type xdg_surface;
    pub type xdg_toplevel;
    pub type zwp_confined_pointer_v1;
    pub type zwp_locked_pointer_v1;
    pub type wlr_egl_surface;
    #[no_mangle]
    fn glClear(mask: GLbitfield);
    #[no_mangle]
    fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat,
                    alpha: GLfloat);
    #[no_mangle]
    fn glViewport(x: GLint, y: GLint, width_0: GLsizei, height_0: GLsizei);
    #[no_mangle]
    static mut stderr: *mut FILE;
    #[no_mangle]
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    #[no_mangle]
    fn exit(_: libc::c_int) -> !;
    #[no_mangle]
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    #[no_mangle]
    fn wl_proxy_marshal(p: *mut wl_proxy, opcode: uint32_t, _: ...);
    #[no_mangle]
    fn wl_proxy_marshal_constructor(proxy: *mut wl_proxy, opcode: uint32_t,
                                    interface: *const wl_interface, _: ...)
     -> *mut wl_proxy;
    #[no_mangle]
    fn wl_proxy_marshal_constructor_versioned(proxy: *mut wl_proxy,
                                              opcode: uint32_t,
                                              interface: *const wl_interface,
                                              version: uint32_t, _: ...)
     -> *mut wl_proxy;
    #[no_mangle]
    fn wl_proxy_add_listener(proxy: *mut wl_proxy,
                             implementation:
                                 *mut Option<unsafe extern "C" fn() -> ()>,
                             data: *mut libc::c_void) -> libc::c_int;
    #[no_mangle]
    fn wl_display_connect(name: *const libc::c_char) -> *mut wl_display;
    #[no_mangle]
    fn wl_display_dispatch(display: *mut wl_display) -> libc::c_int;
    #[no_mangle]
    fn wl_display_roundtrip(display: *mut wl_display) -> libc::c_int;
    #[no_mangle]
    static wl_registry_interface: wl_interface;
    #[no_mangle]
    static wl_compositor_interface: wl_interface;
    #[no_mangle]
    static wl_surface_interface: wl_interface;
    #[no_mangle]
    static wl_seat_interface: wl_interface;
    #[no_mangle]
    static wl_pointer_interface: wl_interface;
    #[no_mangle]
    static wl_region_interface: wl_interface;
    #[no_mangle]
    fn wl_egl_window_create(surface: *mut wl_surface, width_0: libc::c_int,
                            height_0: libc::c_int) -> *mut wl_egl_window;
    #[no_mangle]
    fn wl_egl_window_resize(egl_window_0: *mut wl_egl_window,
                            width_0: libc::c_int, height_0: libc::c_int,
                            dx: libc::c_int, dy: libc::c_int);
    #[no_mangle]
    fn eglSwapBuffers(dpy: EGLDisplay, surface: EGLSurface) -> EGLBoolean;
    #[no_mangle]
    fn eglMakeCurrent(dpy: EGLDisplay, draw_0: EGLSurface, read: EGLSurface,
                      ctx: EGLContext) -> EGLBoolean;
    #[no_mangle]
    fn wlr_egl_init(egl_0: *mut wlr_egl, platform: EGLenum,
                    remote_display: *mut libc::c_void,
                    config_attribs: *mut EGLint, visual_id: EGLint) -> bool;
    #[no_mangle]
    fn wlr_egl_create_surface(egl_0: *mut wlr_egl, window: *mut libc::c_void)
     -> EGLSurface;
    /* *
 * @page page_iface_xdg_wm_base xdg_wm_base
 * @section page_iface_xdg_wm_base_desc Description
 *
 * The xdg_wm_base interface is exposed as a global object enabling clients
 * to turn their wl_surfaces into windows in a desktop environment. It
 * defines the basic functionality needed for clients and the compositor to
 * create windows that can be dragged, resized, maximized, etc, as well as
 * creating transient windows such as popup menus.
 * @section page_iface_xdg_wm_base_api API
 * See @ref iface_xdg_wm_base.
 */
/* *
 * @defgroup iface_xdg_wm_base The xdg_wm_base interface
 *
 * The xdg_wm_base interface is exposed as a global object enabling clients
 * to turn their wl_surfaces into windows in a desktop environment. It
 * defines the basic functionality needed for clients and the compositor to
 * create windows that can be dragged, resized, maximized, etc, as well as
 * creating transient windows such as popup menus.
 */
    #[no_mangle]
    static xdg_wm_base_interface: wl_interface;
    /* *
 * @page page_iface_xdg_surface xdg_surface
 * @section page_iface_xdg_surface_desc Description
 *
 * An interface that may be implemented by a wl_surface, for
 * implementations that provide a desktop-style user interface.
 *
 * It provides a base set of functionality required to construct user
 * interface elements requiring management by the compositor, such as
 * toplevel windows, menus, etc. The types of functionality are split into
 * xdg_surface roles.
 *
 * Creating an xdg_surface does not set the role for a wl_surface. In order
 * to map an xdg_surface, the client must create a role-specific object
 * using, e.g., get_toplevel, get_popup. The wl_surface for any given
 * xdg_surface can have at most one role, and may not be assigned any role
 * not based on xdg_surface.
 *
 * A role must be assigned before any other requests are made to the
 * xdg_surface object.
 *
 * The client must call wl_surface.commit on the corresponding wl_surface
 * for the xdg_surface state to take effect.
 *
 * Creating an xdg_surface from a wl_surface which has a buffer attached or
 * committed is a client error, and any attempts by a client to attach or
 * manipulate a buffer prior to the first xdg_surface.configure call must
 * also be treated as errors.
 *
 * Mapping an xdg_surface-based role surface is defined as making it
 * possible for the surface to be shown by the compositor. Note that
 * a mapped surface is not guaranteed to be visible once it is mapped.
 *
 * For an xdg_surface to be mapped by the compositor, the following
 * conditions must be met:
 * (1) the client has assigned an xdg_surface-based role to the surface
 * (2) the client has set and committed the xdg_surface state and the
 * role-dependent state to the surface
 * (3) the client has committed a buffer to the surface
 *
 * A newly-unmapped surface is considered to have met condition (1) out
 * of the 3 required conditions for mapping a surface if its role surface
 * has not been destroyed.
 * @section page_iface_xdg_surface_api API
 * See @ref iface_xdg_surface.
 */
/* *
 * @defgroup iface_xdg_surface The xdg_surface interface
 *
 * An interface that may be implemented by a wl_surface, for
 * implementations that provide a desktop-style user interface.
 *
 * It provides a base set of functionality required to construct user
 * interface elements requiring management by the compositor, such as
 * toplevel windows, menus, etc. The types of functionality are split into
 * xdg_surface roles.
 *
 * Creating an xdg_surface does not set the role for a wl_surface. In order
 * to map an xdg_surface, the client must create a role-specific object
 * using, e.g., get_toplevel, get_popup. The wl_surface for any given
 * xdg_surface can have at most one role, and may not be assigned any role
 * not based on xdg_surface.
 *
 * A role must be assigned before any other requests are made to the
 * xdg_surface object.
 *
 * The client must call wl_surface.commit on the corresponding wl_surface
 * for the xdg_surface state to take effect.
 *
 * Creating an xdg_surface from a wl_surface which has a buffer attached or
 * committed is a client error, and any attempts by a client to attach or
 * manipulate a buffer prior to the first xdg_surface.configure call must
 * also be treated as errors.
 *
 * Mapping an xdg_surface-based role surface is defined as making it
 * possible for the surface to be shown by the compositor. Note that
 * a mapped surface is not guaranteed to be visible once it is mapped.
 *
 * For an xdg_surface to be mapped by the compositor, the following
 * conditions must be met:
 * (1) the client has assigned an xdg_surface-based role to the surface
 * (2) the client has set and committed the xdg_surface state and the
 * role-dependent state to the surface
 * (3) the client has committed a buffer to the surface
 *
 * A newly-unmapped surface is considered to have met condition (1) out
 * of the 3 required conditions for mapping a surface if its role surface
 * has not been destroyed.
 */
    #[no_mangle]
    static xdg_surface_interface: wl_interface;
    /* *
 * @page page_iface_xdg_toplevel xdg_toplevel
 * @section page_iface_xdg_toplevel_desc Description
 *
 * This interface defines an xdg_surface role which allows a surface to,
 * among other things, set window-like properties such as maximize,
 * fullscreen, and minimize, set application-specific metadata like title and
 * id, and well as trigger user interactive operations such as interactive
 * resize and move.
 *
 * Unmapping an xdg_toplevel means that the surface cannot be shown
 * by the compositor until it is explicitly mapped again.
 * All active operations (e.g., move, resize) are canceled and all
 * attributes (e.g. title, state, stacking, ...) are discarded for
 * an xdg_toplevel surface when it is unmapped.
 *
 * Attaching a null buffer to a toplevel unmaps the surface.
 * @section page_iface_xdg_toplevel_api API
 * See @ref iface_xdg_toplevel.
 */
/* *
 * @defgroup iface_xdg_toplevel The xdg_toplevel interface
 *
 * This interface defines an xdg_surface role which allows a surface to,
 * among other things, set window-like properties such as maximize,
 * fullscreen, and minimize, set application-specific metadata like title and
 * id, and well as trigger user interactive operations such as interactive
 * resize and move.
 *
 * Unmapping an xdg_toplevel means that the surface cannot be shown
 * by the compositor until it is explicitly mapped again.
 * All active operations (e.g., move, resize) are canceled and all
 * attributes (e.g. title, state, stacking, ...) are discarded for
 * an xdg_toplevel surface when it is unmapped.
 *
 * Attaching a null buffer to a toplevel unmaps the surface.
 */
    #[no_mangle]
    static xdg_toplevel_interface: wl_interface;
    /* *
 * @page page_iface_zwp_pointer_constraints_v1 zwp_pointer_constraints_v1
 * @section page_iface_zwp_pointer_constraints_v1_desc Description
 *
 * The global interface exposing pointer constraining functionality. It
 * exposes two requests: lock_pointer for locking the pointer to its
 * position, and confine_pointer for locking the pointer to a region.
 *
 * The lock_pointer and confine_pointer requests create the objects
 * wp_locked_pointer and wp_confined_pointer respectively, and the client can
 * use these objects to interact with the lock.
 *
 * For any surface, only one lock or confinement may be active across all
 * wl_pointer objects of the same seat. If a lock or confinement is requested
 * when another lock or confinement is active or requested on the same surface
 * and with any of the wl_pointer objects of the same seat, an
 * 'already_constrained' error will be raised.
 * @section page_iface_zwp_pointer_constraints_v1_api API
 * See @ref iface_zwp_pointer_constraints_v1.
 */
/* *
 * @defgroup iface_zwp_pointer_constraints_v1 The zwp_pointer_constraints_v1 interface
 *
 * The global interface exposing pointer constraining functionality. It
 * exposes two requests: lock_pointer for locking the pointer to its
 * position, and confine_pointer for locking the pointer to a region.
 *
 * The lock_pointer and confine_pointer requests create the objects
 * wp_locked_pointer and wp_confined_pointer respectively, and the client can
 * use these objects to interact with the lock.
 *
 * For any surface, only one lock or confinement may be active across all
 * wl_pointer objects of the same seat. If a lock or confinement is requested
 * when another lock or confinement is active or requested on the same surface
 * and with any of the wl_pointer objects of the same seat, an
 * 'already_constrained' error will be raised.
 */
    #[no_mangle]
    static zwp_pointer_constraints_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_locked_pointer_v1 zwp_locked_pointer_v1
 * @section page_iface_zwp_locked_pointer_v1_desc Description
 *
 * The wp_locked_pointer interface represents a locked pointer state.
 *
 * While the lock of this object is active, the wl_pointer objects of the
 * associated seat will not emit any wl_pointer.motion events.
 *
 * This object will send the event 'locked' when the lock is activated.
 * Whenever the lock is activated, it is guaranteed that the locked surface
 * will already have received pointer focus and that the pointer will be
 * within the region passed to the request creating this object.
 *
 * To unlock the pointer, send the destroy request. This will also destroy
 * the wp_locked_pointer object.
 *
 * If the compositor decides to unlock the pointer the unlocked event is
 * sent. See wp_locked_pointer.unlock for details.
 *
 * When unlocking, the compositor may warp the cursor position to the set
 * cursor position hint. If it does, it will not result in any relative
 * motion events emitted via wp_relative_pointer.
 *
 * If the surface the lock was requested on is destroyed and the lock is not
 * yet activated, the wp_locked_pointer object is now defunct and must be
 * destroyed.
 * @section page_iface_zwp_locked_pointer_v1_api API
 * See @ref iface_zwp_locked_pointer_v1.
 */
/* *
 * @defgroup iface_zwp_locked_pointer_v1 The zwp_locked_pointer_v1 interface
 *
 * The wp_locked_pointer interface represents a locked pointer state.
 *
 * While the lock of this object is active, the wl_pointer objects of the
 * associated seat will not emit any wl_pointer.motion events.
 *
 * This object will send the event 'locked' when the lock is activated.
 * Whenever the lock is activated, it is guaranteed that the locked surface
 * will already have received pointer focus and that the pointer will be
 * within the region passed to the request creating this object.
 *
 * To unlock the pointer, send the destroy request. This will also destroy
 * the wp_locked_pointer object.
 *
 * If the compositor decides to unlock the pointer the unlocked event is
 * sent. See wp_locked_pointer.unlock for details.
 *
 * When unlocking, the compositor may warp the cursor position to the set
 * cursor position hint. If it does, it will not result in any relative
 * motion events emitted via wp_relative_pointer.
 *
 * If the surface the lock was requested on is destroyed and the lock is not
 * yet activated, the wp_locked_pointer object is now defunct and must be
 * destroyed.
 */
    #[no_mangle]
    static zwp_locked_pointer_v1_interface: wl_interface;
    /* *
 * @page page_iface_zwp_confined_pointer_v1 zwp_confined_pointer_v1
 * @section page_iface_zwp_confined_pointer_v1_desc Description
 *
 * The wp_confined_pointer interface represents a confined pointer state.
 *
 * This object will send the event 'confined' when the confinement is
 * activated. Whenever the confinement is activated, it is guaranteed that
 * the surface the pointer is confined to will already have received pointer
 * focus and that the pointer will be within the region passed to the request
 * creating this object. It is up to the compositor to decide whether this
 * requires some user interaction and if the pointer will warp to within the
 * passed region if outside.
 *
 * To unconfine the pointer, send the destroy request. This will also destroy
 * the wp_confined_pointer object.
 *
 * If the compositor decides to unconfine the pointer the unconfined event is
 * sent. The wp_confined_pointer object is at this point defunct and should
 * be destroyed.
 * @section page_iface_zwp_confined_pointer_v1_api API
 * See @ref iface_zwp_confined_pointer_v1.
 */
/* *
 * @defgroup iface_zwp_confined_pointer_v1 The zwp_confined_pointer_v1 interface
 *
 * The wp_confined_pointer interface represents a confined pointer state.
 *
 * This object will send the event 'confined' when the confinement is
 * activated. Whenever the confinement is activated, it is guaranteed that
 * the surface the pointer is confined to will already have received pointer
 * focus and that the pointer will be within the region passed to the request
 * creating this object. It is up to the compositor to decide whether this
 * requires some user interaction and if the pointer will warp to within the
 * passed region if outside.
 *
 * To unconfine the pointer, send the destroy request. This will also destroy
 * the wp_confined_pointer object.
 *
 * If the compositor decides to unconfine the pointer the unconfined event is
 * sent. The wp_confined_pointer object is at this point defunct and should
 * be destroyed.
 */
    #[no_mangle]
    static zwp_confined_pointer_v1_interface: wl_interface;
}
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __uint64_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type khronos_int32_t = int32_t;
pub type khronos_float_t = libc::c_float;
pub type GLfloat = khronos_float_t;
pub type GLbitfield = libc::c_uint;
pub type GLint = libc::c_int;
pub type GLsizei = libc::c_int;
pub type size_t = libc::c_ulong;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_list {
    pub prev: *mut wl_list,
    pub next: *mut wl_list,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_array {
    pub size: size_t,
    pub alloc: size_t,
    pub data: *mut libc::c_void,
}
pub type wl_fixed_t = int32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_listener {
    pub link: wl_list,
    pub notify: wl_notify_func_t,
}
pub type wl_notify_func_t
    =
    Option<unsafe extern "C" fn(_: *mut wl_listener, _: *mut libc::c_void)
               -> ()>;
pub type EGLint = khronos_int32_t;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_registry_listener {
    pub global: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_registry, _: uint32_t,
                                            _: *const libc::c_char,
                                            _: uint32_t) -> ()>,
    pub global_remove: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                   _: *mut wl_registry,
                                                   _: uint32_t) -> ()>,
}
pub type wl_shm_format = libc::c_uint;
pub const WL_SHM_FORMAT_YVU444: wl_shm_format = 875714137;
pub const WL_SHM_FORMAT_YUV444: wl_shm_format = 875713881;
pub const WL_SHM_FORMAT_YVU422: wl_shm_format = 909203033;
pub const WL_SHM_FORMAT_YUV422: wl_shm_format = 909202777;
pub const WL_SHM_FORMAT_YVU420: wl_shm_format = 842094169;
pub const WL_SHM_FORMAT_YUV420: wl_shm_format = 842093913;
pub const WL_SHM_FORMAT_YVU411: wl_shm_format = 825316953;
pub const WL_SHM_FORMAT_YUV411: wl_shm_format = 825316697;
pub const WL_SHM_FORMAT_YVU410: wl_shm_format = 961893977;
pub const WL_SHM_FORMAT_YUV410: wl_shm_format = 961959257;
pub const WL_SHM_FORMAT_NV61: wl_shm_format = 825644622;
pub const WL_SHM_FORMAT_NV16: wl_shm_format = 909203022;
pub const WL_SHM_FORMAT_NV21: wl_shm_format = 825382478;
pub const WL_SHM_FORMAT_NV12: wl_shm_format = 842094158;
pub const WL_SHM_FORMAT_AYUV: wl_shm_format = 1448433985;
pub const WL_SHM_FORMAT_VYUY: wl_shm_format = 1498765654;
pub const WL_SHM_FORMAT_UYVY: wl_shm_format = 1498831189;
pub const WL_SHM_FORMAT_YVYU: wl_shm_format = 1431918169;
pub const WL_SHM_FORMAT_YUYV: wl_shm_format = 1448695129;
pub const WL_SHM_FORMAT_BGRA1010102: wl_shm_format = 808665410;
pub const WL_SHM_FORMAT_RGBA1010102: wl_shm_format = 808665426;
pub const WL_SHM_FORMAT_ABGR2101010: wl_shm_format = 808665665;
pub const WL_SHM_FORMAT_ARGB2101010: wl_shm_format = 808669761;
pub const WL_SHM_FORMAT_BGRX1010102: wl_shm_format = 808671298;
pub const WL_SHM_FORMAT_RGBX1010102: wl_shm_format = 808671314;
pub const WL_SHM_FORMAT_XBGR2101010: wl_shm_format = 808665688;
pub const WL_SHM_FORMAT_XRGB2101010: wl_shm_format = 808669784;
pub const WL_SHM_FORMAT_BGRA8888: wl_shm_format = 875708738;
pub const WL_SHM_FORMAT_RGBA8888: wl_shm_format = 875708754;
pub const WL_SHM_FORMAT_ABGR8888: wl_shm_format = 875708993;
pub const WL_SHM_FORMAT_BGRX8888: wl_shm_format = 875714626;
pub const WL_SHM_FORMAT_RGBX8888: wl_shm_format = 875714642;
pub const WL_SHM_FORMAT_XBGR8888: wl_shm_format = 875709016;
pub const WL_SHM_FORMAT_BGR888: wl_shm_format = 875710274;
pub const WL_SHM_FORMAT_RGB888: wl_shm_format = 875710290;
pub const WL_SHM_FORMAT_BGR565: wl_shm_format = 909199170;
pub const WL_SHM_FORMAT_RGB565: wl_shm_format = 909199186;
pub const WL_SHM_FORMAT_BGRA5551: wl_shm_format = 892420418;
pub const WL_SHM_FORMAT_RGBA5551: wl_shm_format = 892420434;
pub const WL_SHM_FORMAT_ABGR1555: wl_shm_format = 892420673;
pub const WL_SHM_FORMAT_ARGB1555: wl_shm_format = 892424769;
pub const WL_SHM_FORMAT_BGRX5551: wl_shm_format = 892426306;
pub const WL_SHM_FORMAT_RGBX5551: wl_shm_format = 892426322;
pub const WL_SHM_FORMAT_XBGR1555: wl_shm_format = 892420696;
pub const WL_SHM_FORMAT_XRGB1555: wl_shm_format = 892424792;
pub const WL_SHM_FORMAT_BGRA4444: wl_shm_format = 842088770;
pub const WL_SHM_FORMAT_RGBA4444: wl_shm_format = 842088786;
pub const WL_SHM_FORMAT_ABGR4444: wl_shm_format = 842089025;
pub const WL_SHM_FORMAT_ARGB4444: wl_shm_format = 842093121;
pub const WL_SHM_FORMAT_BGRX4444: wl_shm_format = 842094658;
pub const WL_SHM_FORMAT_RGBX4444: wl_shm_format = 842094674;
pub const WL_SHM_FORMAT_XBGR4444: wl_shm_format = 842089048;
pub const WL_SHM_FORMAT_XRGB4444: wl_shm_format = 842093144;
pub const WL_SHM_FORMAT_BGR233: wl_shm_format = 944916290;
pub const WL_SHM_FORMAT_RGB332: wl_shm_format = 943867730;
pub const WL_SHM_FORMAT_C8: wl_shm_format = 538982467;
pub const WL_SHM_FORMAT_XRGB8888: wl_shm_format = 1;
pub const WL_SHM_FORMAT_ARGB8888: wl_shm_format = 0;
pub type wl_pointer_button_state = libc::c_uint;
pub const WL_POINTER_BUTTON_STATE_PRESSED: wl_pointer_button_state = 1;
pub const WL_POINTER_BUTTON_STATE_RELEASED: wl_pointer_button_state = 0;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wl_pointer_listener {
    pub enter: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_pointer, _: uint32_t,
                                           _: *mut wl_surface, _: wl_fixed_t,
                                           _: wl_fixed_t) -> ()>,
    pub leave: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_pointer, _: uint32_t,
                                           _: *mut wl_surface) -> ()>,
    pub motion: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_pointer, _: uint32_t,
                                            _: wl_fixed_t, _: wl_fixed_t)
                           -> ()>,
    pub button: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                            _: *mut wl_pointer, _: uint32_t,
                                            _: uint32_t, _: uint32_t,
                                            _: uint32_t) -> ()>,
    pub axis: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut wl_pointer, _: uint32_t,
                                          _: uint32_t, _: wl_fixed_t) -> ()>,
    pub frame: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut wl_pointer) -> ()>,
    pub axis_source: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: *mut wl_pointer,
                                                 _: uint32_t) -> ()>,
    pub axis_stop: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut wl_pointer,
                                               _: uint32_t, _: uint32_t)
                              -> ()>,
    pub axis_discrete: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                   _: *mut wl_pointer,
                                                   _: uint32_t, _: int32_t)
                                  -> ()>,
}
pub type EGLBoolean = libc::c_uint;
pub type EGLDisplay = *mut libc::c_void;
pub type EGLConfig = *mut libc::c_void;
pub type EGLSurface = *mut libc::c_void;
pub type EGLContext = *mut libc::c_void;
pub type EGLenum = libc::c_uint;
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_drm_format {
    pub format: uint32_t,
    pub len: size_t,
    pub cap: size_t,
    pub modifiers: [uint64_t; 0],
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_drm_format_set {
    pub len: size_t,
    pub cap: size_t,
    pub formats: *mut *mut wlr_drm_format,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct wlr_egl {
    pub platform: EGLenum,
    pub display: EGLDisplay,
    pub config: EGLConfig,
    pub context: EGLContext,
    pub exts_str: *const libc::c_char,
    pub exts: C2RustUnnamed,
    pub wl_display: *mut wl_display,
    pub dmabuf_formats: wlr_drm_format_set,
}
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct C2RustUnnamed {
    pub bind_wayland_display_wl: bool,
    pub buffer_age_ext: bool,
    pub image_base_khr: bool,
    pub image_dma_buf_export_mesa: bool,
    pub image_dmabuf_import_ext: bool,
    pub image_dmabuf_import_modifiers_ext: bool,
    pub swap_buffers_with_damage_ext: bool,
    pub swap_buffers_with_damage_khr: bool,
}
/* XDG_SURFACE_ERROR_ENUM */
/* *
 * @ingroup iface_xdg_surface
 * @struct xdg_surface_listener
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct xdg_surface_listener {
    pub configure: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut xdg_surface,
                                               _: uint32_t) -> ()>,
}
/* *
 * @ingroup iface_xdg_toplevel
 */
/* *
 * @ingroup iface_xdg_toplevel
 */
/* *
 * @ingroup iface_xdg_toplevel
 */
/* *
 * @ingroup iface_xdg_toplevel
 */
/* XDG_TOPLEVEL_STATE_ENUM */
/* *
 * @ingroup iface_xdg_toplevel
 * @struct xdg_toplevel_listener
 */
#[derive ( Copy, Clone )]
#[repr(C)]
pub struct xdg_toplevel_listener {
    pub configure: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                               _: *mut xdg_toplevel,
                                               _: int32_t, _: int32_t,
                                               _: *mut wl_array) -> ()>,
    pub close: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                           _: *mut xdg_toplevel) -> ()>,
}
/* ZWP_POINTER_CONSTRAINTS_V1_ERROR_ENUM */
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 * the pointer constraint may reactivate
 *
 * A persistent pointer constraint may again reactivate once it has
 * been deactivated. See the corresponding deactivation event
 * (wp_locked_pointer.unlocked and wp_confined_pointer.unconfined) for
 * details.
 */
pub type zwp_pointer_constraints_v1_lifetime = libc::c_uint;
pub const ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_PERSISTENT:
          zwp_pointer_constraints_v1_lifetime =
    2;
pub const ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ONESHOT:
          zwp_pointer_constraints_v1_lifetime =
    1;
pub type C2RustUnnamed_0 = libc::c_uint;
pub const REGION_TYPE_MAX: C2RustUnnamed_0 = 3;
pub const REGION_TYPE_JOINT: C2RustUnnamed_0 = 2;
pub const REGION_TYPE_DISJOINT: C2RustUnnamed_0 = 1;
pub const REGION_TYPE_NONE: C2RustUnnamed_0 = 0;
#[inline]
unsafe extern "C" fn wl_fixed_from_int(mut i: libc::c_int) -> wl_fixed_t {
    return i * 256i32;
}
#[inline]
unsafe extern "C" fn wl_display_get_registry(mut wl_display: *mut wl_display)
 -> *mut wl_registry {
    let mut registry: *mut wl_proxy = 0 as *mut wl_proxy;
    registry =
        wl_proxy_marshal_constructor(wl_display as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &wl_registry_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return registry as *mut wl_registry;
}
#[inline]
unsafe extern "C" fn wl_registry_add_listener(mut wl_registry:
                                                  *mut wl_registry,
                                              mut listener:
                                                  *const wl_registry_listener,
                                              mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(wl_registry as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
#[inline]
unsafe extern "C" fn wl_registry_bind(mut wl_registry: *mut wl_registry,
                                      mut name: uint32_t,
                                      mut interface: *const wl_interface,
                                      mut version: uint32_t)
 -> *mut libc::c_void {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor_versioned(wl_registry as *mut wl_proxy,
                                               0i32 as uint32_t, interface,
                                               version, name,
                                               (*interface).name, version,
                                               0 as *mut libc::c_void);
    return id as *mut libc::c_void;
}
#[inline]
unsafe extern "C" fn wl_compositor_create_surface(mut wl_compositor:
                                                      *mut wl_compositor)
 -> *mut wl_surface {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(wl_compositor as *mut wl_proxy,
                                     0i32 as uint32_t,
                                     &wl_surface_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut wl_surface;
}
#[inline]
unsafe extern "C" fn wl_compositor_create_region(mut wl_compositor:
                                                     *mut wl_compositor)
 -> *mut wl_region {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(wl_compositor as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &wl_region_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut wl_region;
}
#[inline]
unsafe extern "C" fn wl_surface_commit(mut wl_surface: *mut wl_surface) {
    wl_proxy_marshal(wl_surface as *mut wl_proxy, 6i32 as uint32_t);
}
#[inline]
unsafe extern "C" fn wl_seat_get_pointer(mut wl_seat: *mut wl_seat)
 -> *mut wl_pointer {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(wl_seat as *mut wl_proxy,
                                     0i32 as uint32_t,
                                     &wl_pointer_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut wl_pointer;
}
#[inline]
unsafe extern "C" fn wl_pointer_add_listener(mut wl_pointer: *mut wl_pointer,
                                             mut listener:
                                                 *const wl_pointer_listener,
                                             mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(wl_pointer as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
#[inline]
unsafe extern "C" fn wl_region_add(mut wl_region: *mut wl_region,
                                   mut x: int32_t, mut y: int32_t,
                                   mut width_0: int32_t,
                                   mut height_0: int32_t) {
    wl_proxy_marshal(wl_region as *mut wl_proxy, 1i32 as uint32_t, x, y,
                     width_0, height_0);
}
/* *
 * @ingroup iface_xdg_wm_base
 *
 * This creates an xdg_surface for the given surface. While xdg_surface
 * itself is not a role, the corresponding surface may only be assigned
 * a role extending xdg_surface, such as xdg_toplevel or xdg_popup.
 *
 * This creates an xdg_surface for the given surface. An xdg_surface is
 * used as basis to define a role to a given surface, such as xdg_toplevel
 * or xdg_popup. It also manages functionality shared between xdg_surface
 * based surface roles.
 *
 * See the documentation of xdg_surface for more details about what an
 * xdg_surface is and how it is used.
 */
#[inline]
unsafe extern "C" fn xdg_wm_base_get_xdg_surface(mut xdg_wm_base:
                                                     *mut xdg_wm_base,
                                                 mut surface: *mut wl_surface)
 -> *mut xdg_surface {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(xdg_wm_base as *mut wl_proxy,
                                     2i32 as uint32_t,
                                     &xdg_surface_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void, surface);
    return id as *mut xdg_surface;
}
/* *
 * @ingroup iface_xdg_surface
 */
#[inline]
unsafe extern "C" fn xdg_surface_add_listener(mut xdg_surface:
                                                  *mut xdg_surface,
                                              mut listener:
                                                  *const xdg_surface_listener,
                                              mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(xdg_surface as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
/* *
 * @ingroup iface_xdg_surface
 *
 * This creates an xdg_toplevel object for the given xdg_surface and gives
 * the associated wl_surface the xdg_toplevel role.
 *
 * See the documentation of xdg_toplevel for more details about what an
 * xdg_toplevel is and how it is used.
 */
#[inline]
unsafe extern "C" fn xdg_surface_get_toplevel(mut xdg_surface:
                                                  *mut xdg_surface)
 -> *mut xdg_toplevel {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(xdg_surface as *mut wl_proxy,
                                     1i32 as uint32_t,
                                     &xdg_toplevel_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void);
    return id as *mut xdg_toplevel;
}
/* *
 * @ingroup iface_xdg_surface
 *
 * When a configure event is received, if a client commits the
 * surface in response to the configure event, then the client
 * must make an ack_configure request sometime before the commit
 * request, passing along the serial of the configure event.
 *
 * For instance, for toplevel surfaces the compositor might use this
 * information to move a surface to the top left only when the client has
 * drawn itself for the maximized or fullscreen state.
 *
 * If the client receives multiple configure events before it
 * can respond to one, it only has to ack the last configure event.
 *
 * A client is not required to commit immediately after sending
 * an ack_configure request - it may even ack_configure several times
 * before its next surface commit.
 *
 * A client may send multiple ack_configure requests before committing, but
 * only the last request sent before a commit indicates which configure
 * event the client really is responding to.
 */
#[inline]
unsafe extern "C" fn xdg_surface_ack_configure(mut xdg_surface:
                                                   *mut xdg_surface,
                                               mut serial: uint32_t) {
    wl_proxy_marshal(xdg_surface as *mut wl_proxy, 4i32 as uint32_t, serial);
}
/* *
 * @ingroup iface_xdg_toplevel
 */
#[inline]
unsafe extern "C" fn xdg_toplevel_add_listener(mut xdg_toplevel:
                                                   *mut xdg_toplevel,
                                               mut listener:
                                                   *const xdg_toplevel_listener,
                                               mut data: *mut libc::c_void)
 -> libc::c_int {
    return wl_proxy_add_listener(xdg_toplevel as *mut wl_proxy,
                                 listener as
                                     *mut Option<unsafe extern "C" fn()
                                                     -> ()>, data);
}
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 *
 * The lock_pointer request lets the client request to disable movements of
 * the virtual pointer (i.e. the cursor), effectively locking the pointer
 * to a position. This request may not take effect immediately; in the
 * future, when the compositor deems implementation-specific constraints
 * are satisfied, the pointer lock will be activated and the compositor
 * sends a locked event.
 *
 * The protocol provides no guarantee that the constraints are ever
 * satisfied, and does not require the compositor to send an error if the
 * constraints cannot ever be satisfied. It is thus possible to request a
 * lock that will never activate.
 *
 * There may not be another pointer constraint of any kind requested or
 * active on the surface for any of the wl_pointer objects of the seat of
 * the passed pointer when requesting a lock. If there is, an error will be
 * raised. See general pointer lock documentation for more details.
 *
 * The intersection of the region passed with this request and the input
 * region of the surface is used to determine where the pointer must be
 * in order for the lock to activate. It is up to the compositor whether to
 * warp the pointer or require some kind of user interaction for the lock
 * to activate. If the region is null the surface input region is used.
 *
 * A surface may receive pointer focus without the lock being activated.
 *
 * The request creates a new object wp_locked_pointer which is used to
 * interact with the lock as well as receive updates about its state. See
 * the the description of wp_locked_pointer for further information.
 *
 * Note that while a pointer is locked, the wl_pointer objects of the
 * corresponding seat will not emit any wl_pointer.motion events, but
 * relative motion events will still be emitted via wp_relative_pointer
 * objects of the same seat. wl_pointer.axis and wl_pointer.button events
 * are unaffected.
 */
#[inline]
unsafe extern "C" fn zwp_pointer_constraints_v1_lock_pointer(mut zwp_pointer_constraints_v1:
                                                                 *mut zwp_pointer_constraints_v1,
                                                             mut surface:
                                                                 *mut wl_surface,
                                                             mut pointer:
                                                                 *mut wl_pointer,
                                                             mut region:
                                                                 *mut wl_region,
                                                             mut lifetime:
                                                                 uint32_t)
 -> *mut zwp_locked_pointer_v1 {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(zwp_pointer_constraints_v1 as
                                         *mut wl_proxy, 1i32 as uint32_t,
                                     &zwp_locked_pointer_v1_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void, surface, pointer,
                                     region, lifetime);
    return id as *mut zwp_locked_pointer_v1;
}
/* *
 * @ingroup iface_zwp_pointer_constraints_v1
 *
 * The confine_pointer request lets the client request to confine the
 * pointer cursor to a given region. This request may not take effect
 * immediately; in the future, when the compositor deems implementation-
 * specific constraints are satisfied, the pointer confinement will be
 * activated and the compositor sends a confined event.
 *
 * The intersection of the region passed with this request and the input
 * region of the surface is used to determine where the pointer must be
 * in order for the confinement to activate. It is up to the compositor
 * whether to warp the pointer or require some kind of user interaction for
 * the confinement to activate. If the region is null the surface input
 * region is used.
 *
 * The request will create a new object wp_confined_pointer which is used
 * to interact with the confinement as well as receive updates about its
 * state. See the the description of wp_confined_pointer for further
 * information.
 */
#[inline]
unsafe extern "C" fn zwp_pointer_constraints_v1_confine_pointer(mut zwp_pointer_constraints_v1:
                                                                    *mut zwp_pointer_constraints_v1,
                                                                mut surface:
                                                                    *mut wl_surface,
                                                                mut pointer:
                                                                    *mut wl_pointer,
                                                                mut region:
                                                                    *mut wl_region,
                                                                mut lifetime:
                                                                    uint32_t)
 -> *mut zwp_confined_pointer_v1 {
    let mut id: *mut wl_proxy = 0 as *mut wl_proxy;
    id =
        wl_proxy_marshal_constructor(zwp_pointer_constraints_v1 as
                                         *mut wl_proxy, 2i32 as uint32_t,
                                     &zwp_confined_pointer_v1_interface as
                                         *const wl_interface,
                                     0 as *mut libc::c_void, surface, pointer,
                                     region, lifetime);
    return id as *mut zwp_confined_pointer_v1;
}
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 *
 * Set the cursor position hint relative to the top left corner of the
 * surface.
 *
 * If the client is drawing its own cursor, it should update the position
 * hint to the position of its own cursor. A compositor may use this
 * information to warp the pointer upon unlock in order to avoid pointer
 * jumps.
 *
 * The cursor position hint is double buffered. The new hint will only take
 * effect when the associated surface gets it pending state applied. See
 * wl_surface.commit for details.
 */
#[inline]
unsafe extern "C" fn zwp_locked_pointer_v1_set_cursor_position_hint(mut zwp_locked_pointer_v1:
                                                                        *mut zwp_locked_pointer_v1,
                                                                    mut surface_x:
                                                                        wl_fixed_t,
                                                                    mut surface_y:
                                                                        wl_fixed_t) {
    wl_proxy_marshal(zwp_locked_pointer_v1 as *mut wl_proxy, 1i32 as uint32_t,
                     surface_x, surface_y);
}
/* *
 * @ingroup iface_zwp_locked_pointer_v1
 *
 * Set a new region used to lock the pointer.
 *
 * The new lock region is double-buffered. The new lock region will
 * only take effect when the associated surface gets its pending state
 * applied. See wl_surface.commit for details.
 *
 * For details about the lock region, see wp_locked_pointer.
 */
#[inline]
unsafe extern "C" fn zwp_locked_pointer_v1_set_region(mut zwp_locked_pointer_v1:
                                                          *mut zwp_locked_pointer_v1,
                                                      mut region:
                                                          *mut wl_region) {
    wl_proxy_marshal(zwp_locked_pointer_v1 as *mut wl_proxy, 2i32 as uint32_t,
                     region);
}
/* *
 * @ingroup iface_zwp_confined_pointer_v1
 *
 * Set a new region used to confine the pointer.
 *
 * The new confine region is double-buffered. The new confine region will
 * only take effect when the associated surface gets its pending state
 * applied. See wl_surface.commit for details.
 *
 * If the confinement is active when the new confinement region is applied
 * and the pointer ends up outside of newly applied region, the pointer may
 * warped to a position within the new confinement region. If warped, a
 * wl_pointer.motion event will be emitted, but no
 * wp_relative_pointer.relative_motion event.
 *
 * The compositor may also, instead of using the new region, unconfine the
 * pointer.
 *
 * For details about the confine region, see wp_confined_pointer.
 */
#[inline]
unsafe extern "C" fn zwp_confined_pointer_v1_set_region(mut zwp_confined_pointer_v1:
                                                            *mut zwp_confined_pointer_v1,
                                                        mut region:
                                                            *mut wl_region) {
    wl_proxy_marshal(zwp_confined_pointer_v1 as *mut wl_proxy,
                     1i32 as uint32_t, region);
}
static mut width: libc::c_int = 512i32;
static mut height: libc::c_int = 512i32;
static mut compositor: *mut wl_compositor =
    0 as *const wl_compositor as *mut wl_compositor;
static mut seat: *mut wl_seat = 0 as *const wl_seat as *mut wl_seat;
static mut wm_base: *mut xdg_wm_base =
    0 as *const xdg_wm_base as *mut xdg_wm_base;
static mut pointer_constraints: *mut zwp_pointer_constraints_v1 =
    0 as *const zwp_pointer_constraints_v1 as *mut zwp_pointer_constraints_v1;
#[no_mangle]
pub static mut egl: wlr_egl =
    wlr_egl{platform: 0,
            display: 0 as *const libc::c_void as *mut libc::c_void,
            config: 0 as *const libc::c_void as *mut libc::c_void,
            context: 0 as *const libc::c_void as *mut libc::c_void,
            exts_str: 0 as *const libc::c_char,
            exts:
                C2RustUnnamed{bind_wayland_display_wl: false,
                              buffer_age_ext: false,
                              image_base_khr: false,
                              image_dma_buf_export_mesa: false,
                              image_dmabuf_import_ext: false,
                              image_dmabuf_import_modifiers_ext: false,
                              swap_buffers_with_damage_ext: false,
                              swap_buffers_with_damage_khr: false,},
            wl_display: 0 as *const wl_display as *mut wl_display,
            dmabuf_formats:
                wlr_drm_format_set{len: 0,
                                   cap: 0,
                                   formats:
                                       0 as *const *mut wlr_drm_format as
                                           *mut *mut wlr_drm_format,},};
#[no_mangle]
pub static mut egl_window: *mut wl_egl_window =
    0 as *const wl_egl_window as *mut wl_egl_window;
#[no_mangle]
pub static mut egl_surface: *mut wlr_egl_surface =
    0 as *const wlr_egl_surface as *mut wlr_egl_surface;
#[no_mangle]
pub static mut locked_pointer: *mut zwp_locked_pointer_v1 =
    0 as *const zwp_locked_pointer_v1 as *mut zwp_locked_pointer_v1;
#[no_mangle]
pub static mut confined_pointer: *mut zwp_confined_pointer_v1 =
    0 as *const zwp_confined_pointer_v1 as *mut zwp_confined_pointer_v1;
#[no_mangle]
pub static mut region_type: C2RustUnnamed_0 = REGION_TYPE_NONE;
#[no_mangle]
pub static mut regions: [*mut wl_region; 3] =
    [0 as *const wl_region as *mut wl_region; 3];
unsafe extern "C" fn draw() {
    eglMakeCurrent(egl.display, egl_surface as EGLSurface,
                   egl_surface as EGLSurface, egl.context);
    let mut color: [libc::c_float; 4] =
        [1.0f64 as libc::c_float, 1.0f64 as libc::c_float,
         0.0f64 as libc::c_float, 1.0f64 as libc::c_float];
    glViewport(0i32, 0i32, width, height);
    glClearColor(color[0], color[1], color[2], 1.0f64 as GLfloat);
    glClear(0x4000i32 as GLbitfield);
    eglSwapBuffers(egl.display, egl_surface as EGLSurface);
}
unsafe extern "C" fn pointer_handle_button(mut data: *mut libc::c_void,
                                           mut pointer: *mut wl_pointer,
                                           mut serial: uint32_t,
                                           mut time: uint32_t,
                                           mut button: uint32_t,
                                           mut state_w: uint32_t) {
    let mut surface: *mut wl_surface = data as *mut wl_surface;
    if button == 0x110i32 as libc::c_uint &&
           state_w ==
               WL_POINTER_BUTTON_STATE_PRESSED as libc::c_int as libc::c_uint
       {
        region_type =
            (region_type as
                 libc::c_uint).wrapping_add(1i32 as
                                                libc::c_uint).wrapping_rem(REGION_TYPE_MAX
                                                                               as
                                                                               libc::c_int
                                                                               as
                                                                               libc::c_uint)
                as C2RustUnnamed_0;
        if !locked_pointer.is_null() {
            zwp_locked_pointer_v1_set_region(locked_pointer,
                                             regions[region_type as usize]);
        } else if !confined_pointer.is_null() {
            zwp_confined_pointer_v1_set_region(confined_pointer,
                                               regions[region_type as usize]);
        }
        wl_surface_commit(surface);
    };
}
unsafe extern "C" fn pointer_handle_enter(mut data: *mut libc::c_void,
                                          mut wl_pointer: *mut wl_pointer,
                                          mut serial: uint32_t,
                                          mut surface: *mut wl_surface,
                                          mut surface_x: wl_fixed_t,
                                          mut surface_y: wl_fixed_t) {
    // This space intentionally left blank
}
unsafe extern "C" fn pointer_handle_leave(mut data: *mut libc::c_void,
                                          mut wl_pointer: *mut wl_pointer,
                                          mut serial: uint32_t,
                                          mut surface: *mut wl_surface) {
    // This space intentionally left blank
}
unsafe extern "C" fn pointer_handle_motion(mut data: *mut libc::c_void,
                                           mut wl_pointer: *mut wl_pointer,
                                           mut time: uint32_t,
                                           mut surface_x: wl_fixed_t,
                                           mut surface_y: wl_fixed_t) {
    // This space intentionally left blank
}
unsafe extern "C" fn pointer_handle_axis(mut data: *mut libc::c_void,
                                         mut wl_pointer: *mut wl_pointer,
                                         mut time: uint32_t,
                                         mut axis: uint32_t,
                                         mut value: wl_fixed_t) {
    // This space intentionally left blank
}
unsafe extern "C" fn pointer_handle_frame(mut data: *mut libc::c_void,
                                          mut wl_pointer: *mut wl_pointer) {
    // This space intentionally left blank
}
unsafe extern "C" fn pointer_handle_axis_source(mut data: *mut libc::c_void,
                                                mut wl_pointer:
                                                    *mut wl_pointer,
                                                mut axis_source: uint32_t) {
    // This space intentionally left blank
}
unsafe extern "C" fn pointer_handle_axis_stop(mut data: *mut libc::c_void,
                                              mut wl_pointer: *mut wl_pointer,
                                              mut time: uint32_t,
                                              mut axis: uint32_t) {
    // This space intentionally left blank
}
unsafe extern "C" fn pointer_handle_axis_discrete(mut data: *mut libc::c_void,
                                                  mut wl_pointer:
                                                      *mut wl_pointer,
                                                  mut axis: uint32_t,
                                                  mut discrete: int32_t) {
    // This space intentionally left blank
}
static mut pointer_listener: wl_pointer_listener =
    unsafe {
        {
            let mut init =
                wl_pointer_listener{enter:
                                        Some(pointer_handle_enter as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          *mut wl_surface,
                                                                      _:
                                                                          wl_fixed_t,
                                                                      _:
                                                                          wl_fixed_t)
                                                     -> ()),
                                    leave:
                                        Some(pointer_handle_leave as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          *mut wl_surface)
                                                     -> ()),
                                    motion:
                                        Some(pointer_handle_motion as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          wl_fixed_t,
                                                                      _:
                                                                          wl_fixed_t)
                                                     -> ()),
                                    button:
                                        Some(pointer_handle_button as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t)
                                                     -> ()),
                                    axis:
                                        Some(pointer_handle_axis as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          wl_fixed_t)
                                                     -> ()),
                                    frame:
                                        Some(pointer_handle_frame as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer)
                                                     -> ()),
                                    axis_source:
                                        Some(pointer_handle_axis_source as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t)
                                                     -> ()),
                                    axis_stop:
                                        Some(pointer_handle_axis_stop as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          uint32_t)
                                                     -> ()),
                                    axis_discrete:
                                        Some(pointer_handle_axis_discrete as
                                                 unsafe extern "C" fn(_:
                                                                          *mut libc::c_void,
                                                                      _:
                                                                          *mut wl_pointer,
                                                                      _:
                                                                          uint32_t,
                                                                      _:
                                                                          int32_t)
                                                     -> ()),};
            init
        }
    };
unsafe extern "C" fn xdg_surface_handle_configure(mut data: *mut libc::c_void,
                                                  mut xdg_surface:
                                                      *mut xdg_surface,
                                                  mut serial: uint32_t) {
    xdg_surface_ack_configure(xdg_surface, serial);
    wl_egl_window_resize(egl_window, width, height, 0i32, 0i32);
    draw();
}
static mut xdg_surface_listener: xdg_surface_listener =
    unsafe {
        {
            let mut init =
                xdg_surface_listener{configure:
                                         Some(xdg_surface_handle_configure as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut xdg_surface,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),};
            init
        }
    };
unsafe extern "C" fn xdg_toplevel_handle_configure(mut data:
                                                       *mut libc::c_void,
                                                   mut xdg_toplevel:
                                                       *mut xdg_toplevel,
                                                   mut w: int32_t,
                                                   mut h: int32_t,
                                                   mut states:
                                                       *mut wl_array) {
    width = w;
    height = h;
}
unsafe extern "C" fn xdg_toplevel_handle_close(mut data: *mut libc::c_void,
                                               mut xdg_toplevel:
                                                   *mut xdg_toplevel) {
    exit(0i32);
}
static mut xdg_toplevel_listener: xdg_toplevel_listener =
    unsafe {
        {
            let mut init =
                xdg_toplevel_listener{configure:
                                          Some(xdg_toplevel_handle_configure
                                                   as
                                                   unsafe extern "C" fn(_:
                                                                            *mut libc::c_void,
                                                                        _:
                                                                            *mut xdg_toplevel,
                                                                        _:
                                                                            int32_t,
                                                                        _:
                                                                            int32_t,
                                                                        _:
                                                                            *mut wl_array)
                                                       -> ()),
                                      close:
                                          Some(xdg_toplevel_handle_close as
                                                   unsafe extern "C" fn(_:
                                                                            *mut libc::c_void,
                                                                        _:
                                                                            *mut xdg_toplevel)
                                                       -> ()),};
            init
        }
    };
unsafe extern "C" fn handle_global(mut data: *mut libc::c_void,
                                   mut registry: *mut wl_registry,
                                   mut name: uint32_t,
                                   mut interface: *const libc::c_char,
                                   mut version: uint32_t) {
    if strcmp(interface, wl_compositor_interface.name) == 0i32 {
        compositor =
            wl_registry_bind(registry, name, &wl_compositor_interface,
                             1i32 as uint32_t) as *mut wl_compositor
    } else if strcmp(interface, xdg_wm_base_interface.name) == 0i32 {
        wm_base =
            wl_registry_bind(registry, name, &xdg_wm_base_interface,
                             1i32 as uint32_t) as *mut xdg_wm_base
    } else if strcmp(interface, wl_seat_interface.name) == 0i32 {
        seat =
            wl_registry_bind(registry, name, &wl_seat_interface, version) as
                *mut wl_seat
    } else if strcmp(interface, zwp_pointer_constraints_v1_interface.name) ==
                  0i32 {
        pointer_constraints =
            wl_registry_bind(registry, name,
                             &zwp_pointer_constraints_v1_interface, version)
                as *mut zwp_pointer_constraints_v1
    };
}
static mut registry_listener: wl_registry_listener =
    unsafe {
        {
            let mut init =
                wl_registry_listener{global:
                                         Some(handle_global as
                                                  unsafe extern "C" fn(_:
                                                                           *mut libc::c_void,
                                                                       _:
                                                                           *mut wl_registry,
                                                                       _:
                                                                           uint32_t,
                                                                       _:
                                                                           *const libc::c_char,
                                                                       _:
                                                                           uint32_t)
                                                      -> ()),
                                     global_remove: None,};
            init
        }
    };
unsafe fn main_0(mut argc: libc::c_int, mut argv: *mut *mut libc::c_char)
 -> libc::c_int {
    let mut lock: bool = false;
    let mut lifetime: zwp_pointer_constraints_v1_lifetime =
        0 as zwp_pointer_constraints_v1_lifetime;
    let mut display: *mut wl_display = 0 as *mut wl_display;
    let mut registry: *mut wl_registry = 0 as *mut wl_registry;
    let mut disjoint_region: *mut wl_region = 0 as *mut wl_region;
    let mut joint_region: *mut wl_region = 0 as *mut wl_region;
    let mut surface: *mut wl_surface = 0 as *mut wl_surface;
    let mut xdg_surface: *mut xdg_surface = 0 as *mut xdg_surface;
    let mut xdg_toplevel: *mut xdg_toplevel = 0 as *mut xdg_toplevel;
    let mut pointer: *mut wl_pointer = 0 as *mut wl_pointer;
    let mut current_block: u64;
    if !(argc != 4i32) {
        lock = false;
        if strcmp(*argv.offset(1),
                  b"lock\x00" as *const u8 as *const libc::c_char) == 0i32 {
            lock = 1i32 != 0;
            current_block = 17216689946888361452;
        } else if strcmp(*argv.offset(1),
                         b"confine\x00" as *const u8 as *const libc::c_char)
                      == 0i32 {
            lock = 0i32 != 0;
            current_block = 17216689946888361452;
        } else { current_block = 14989254834144594272; }
        match current_block {
            14989254834144594272 => { }
            _ => {
                lifetime = 0 as zwp_pointer_constraints_v1_lifetime;
                if strcmp(*argv.offset(2),
                          b"oneshot\x00" as *const u8 as *const libc::c_char)
                       == 0i32 {
                    lifetime = ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_ONESHOT;
                    current_block = 7976072742316086414;
                } else if strcmp(*argv.offset(2),
                                 b"persistent\x00" as *const u8 as
                                     *const libc::c_char) == 0i32 {
                    lifetime = ZWP_POINTER_CONSTRAINTS_V1_LIFETIME_PERSISTENT;
                    current_block = 7976072742316086414;
                } else { current_block = 14989254834144594272; }
                match current_block {
                    14989254834144594272 => { }
                    _ => {
                        if strcmp(*argv.offset(3),
                                  b"no-region\x00" as *const u8 as
                                      *const libc::c_char) == 0i32 {
                            region_type = REGION_TYPE_NONE
                        } else if strcmp(*argv.offset(3),
                                         b"disjoint-region\x00" as *const u8
                                             as *const libc::c_char) == 0i32 {
                            region_type = REGION_TYPE_DISJOINT
                        } else if strcmp(*argv.offset(3),
                                         b"joint-region\x00" as *const u8 as
                                             *const libc::c_char) == 0i32 {
                            region_type = REGION_TYPE_JOINT
                        }
                        display =
                            wl_display_connect(0 as *const libc::c_char);
                        registry = wl_display_get_registry(display);
                        wl_registry_add_listener(registry, &registry_listener,
                                                 0 as *mut libc::c_void);
                        wl_display_dispatch(display);
                        wl_display_roundtrip(display);
                        disjoint_region =
                            wl_compositor_create_region(compositor);
                        wl_region_add(disjoint_region, 0i32, 0i32, 255i32,
                                      256i32);
                        wl_region_add(disjoint_region, 257i32, 0i32, 255i32,
                                      256i32);
                        regions[REGION_TYPE_DISJOINT as libc::c_int as usize]
                            = disjoint_region;
                        joint_region =
                            wl_compositor_create_region(compositor);
                        wl_region_add(joint_region, 0i32, 0i32, 256i32,
                                      256i32);
                        wl_region_add(joint_region, 256i32, 0i32, 256i32,
                                      256i32);
                        wl_region_add(joint_region, 256i32, 256i32, 256i32,
                                      256i32);
                        regions[REGION_TYPE_JOINT as libc::c_int as usize] =
                            joint_region;
                        wlr_egl_init(&mut egl, 0x31d8i32 as EGLenum,
                                     display as *mut libc::c_void,
                                     0 as *mut EGLint,
                                     WL_SHM_FORMAT_ARGB8888 as libc::c_int);
                        surface = wl_compositor_create_surface(compositor);
                        xdg_surface =
                            xdg_wm_base_get_xdg_surface(wm_base, surface);
                        xdg_toplevel = xdg_surface_get_toplevel(xdg_surface);
                        xdg_surface_add_listener(xdg_surface,
                                                 &xdg_surface_listener,
                                                 0 as *mut libc::c_void);
                        xdg_toplevel_add_listener(xdg_toplevel,
                                                  &xdg_toplevel_listener,
                                                  0 as *mut libc::c_void);
                        pointer = wl_seat_get_pointer(seat);
                        wl_pointer_add_listener(pointer, &pointer_listener,
                                                surface as *mut libc::c_void);
                        if lock {
                            locked_pointer =
                                zwp_pointer_constraints_v1_lock_pointer(pointer_constraints,
                                                                        surface,
                                                                        pointer,
                                                                        regions[region_type
                                                                                    as
                                                                                    usize],
                                                                        lifetime
                                                                            as
                                                                            uint32_t);
                            zwp_locked_pointer_v1_set_cursor_position_hint(locked_pointer,
                                                                           wl_fixed_from_int(128i32),
                                                                           wl_fixed_from_int(128i32));
                        } else {
                            confined_pointer =
                                zwp_pointer_constraints_v1_confine_pointer(pointer_constraints,
                                                                           surface,
                                                                           pointer,
                                                                           regions[region_type
                                                                                       as
                                                                                       usize],
                                                                           lifetime
                                                                               as
                                                                               uint32_t)
                        }
                        wl_surface_commit(surface);
                        egl_window =
                            wl_egl_window_create(surface, width, height);
                        egl_surface =
                            wlr_egl_create_surface(&mut egl,
                                                   egl_window as
                                                       *mut libc::c_void) as
                                *mut wlr_egl_surface;
                        wl_display_roundtrip(display);
                        draw();
                        while wl_display_dispatch(display) != -1i32 { }
                        return 0i32
                    }
                }
            }
        }
    }
    fprintf(stderr,
            b"pointer-constraints <lock | confine> <oneshot | persistent> <no-region | disjoint-rejoin | joint-region>\n\x00"
                as *const u8 as *const libc::c_char);
    return 1i32;
}
#[main]
pub fn main() {
    let mut args: Vec<*mut libc::c_char> = Vec::new();
    for arg in ::std::env::args() {
        args.push(::std::ffi::CString::new(arg).expect("Failed to convert argument into CString.").into_raw());
    };
    args.push(::std::ptr::null_mut());
    unsafe {
        ::std::process::exit(main_0((args.len() - 1) as libc::c_int,
                                    args.as_mut_ptr() as
                                        *mut *mut libc::c_char) as i32)
    }
}
