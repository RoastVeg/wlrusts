use libc;
extern "C" {
    /* Generated by wayland-scanner 1.17.0 */
    /*
 * Copyright (C) 2015 Martin Gräßlin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
    #[no_mangle]
    static wl_seat_interface: wl_interface;
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_message {
    pub name: *const libc::c_char,
    pub signature: *const libc::c_char,
    pub types: *mut *const wl_interface,
}

#[repr(C)]#[derive(Copy, Clone)]
pub struct wl_interface {
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub method_count: libc::c_int,
    pub methods: *const wl_message,
    pub event_count: libc::c_int,
    pub events: *const wl_message,
}
static mut types: [*const wl_interface; 3] =
    unsafe {
        [&org_kde_kwin_idle_timeout_interface as *const wl_interface,
         &wl_seat_interface as *const wl_interface, 0 as *const wl_interface]
    };
// Initialized in run_static_initializers
static mut org_kde_kwin_idle_requests: [wl_message; 1] =
    [wl_message{name: 0 as *const libc::c_char,
                signature: 0 as *const libc::c_char,
                types: 0 as *mut *const wl_interface,}; 1];
#[no_mangle]
pub static mut org_kde_kwin_idle_interface: wl_interface =
    unsafe {
        {
            let mut init =
                wl_interface{name:
                                 b"org_kde_kwin_idle\x00" as *const u8 as
                                     *const libc::c_char,
                             version: 1i32,
                             method_count: 1i32,
                             methods: org_kde_kwin_idle_requests.as_ptr(),
                             event_count: 0i32,
                             events: 0 as *const wl_message,};
            init
        }
    };
// Initialized in run_static_initializers
static mut org_kde_kwin_idle_timeout_requests: [wl_message; 2] =
    [wl_message{name: 0 as *const libc::c_char,
                signature: 0 as *const libc::c_char,
                types: 0 as *mut *const wl_interface,}; 2];
// Initialized in run_static_initializers
static mut org_kde_kwin_idle_timeout_events: [wl_message; 2] =
    [wl_message{name: 0 as *const libc::c_char,
                signature: 0 as *const libc::c_char,
                types: 0 as *mut *const wl_interface,}; 2];
#[no_mangle]
pub static mut org_kde_kwin_idle_timeout_interface: wl_interface =
    unsafe {
        {
            let mut init =
                wl_interface{name:
                                 b"org_kde_kwin_idle_timeout\x00" as *const u8
                                     as *const libc::c_char,
                             version: 1i32,
                             method_count: 2i32,
                             methods:
                                 org_kde_kwin_idle_timeout_requests.as_ptr(),
                             event_count: 2i32,
                             events:
                                 org_kde_kwin_idle_timeout_events.as_ptr(),};
            init
        }
    };
unsafe extern "C" fn run_static_initializers() {
    org_kde_kwin_idle_requests =
        [{
             let mut init =
                 wl_message{name:
                                b"get_idle_timeout\x00" as *const u8 as
                                    *const libc::c_char,
                            signature:
                                b"nou\x00" as *const u8 as
                                    *const libc::c_char,
                            types: types.as_mut_ptr().offset(0),};
             init
         }];
    org_kde_kwin_idle_timeout_requests =
        [{
             let mut init =
                 wl_message{name:
                                b"release\x00" as *const u8 as
                                    *const libc::c_char,
                            signature:
                                b"\x00" as *const u8 as *const libc::c_char,
                            types: types.as_mut_ptr().offset(0),};
             init
         },
         {
             let mut init =
                 wl_message{name:
                                b"simulate_user_activity\x00" as *const u8 as
                                    *const libc::c_char,
                            signature:
                                b"\x00" as *const u8 as *const libc::c_char,
                            types: types.as_mut_ptr().offset(0),};
             init
         }];
    org_kde_kwin_idle_timeout_events =
        [{
             let mut init =
                 wl_message{name:
                                b"idle\x00" as *const u8 as
                                    *const libc::c_char,
                            signature:
                                b"\x00" as *const u8 as *const libc::c_char,
                            types: types.as_mut_ptr().offset(0),};
             init
         },
         {
             let mut init =
                 wl_message{name:
                                b"resumed\x00" as *const u8 as
                                    *const libc::c_char,
                            signature:
                                b"\x00" as *const u8 as *const libc::c_char,
                            types: types.as_mut_ptr().offset(0),};
             init
         }]
}
#[used]
#[cfg_attr ( target_os = "linux", link_section = ".init_array" )]
#[cfg_attr ( target_os = "windows", link_section = ".CRT$XIB" )]
#[cfg_attr ( target_os = "macos", link_section = "__DATA,__mod_init_func" )]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
